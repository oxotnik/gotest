definitions:
  model.UserInfo:
    properties:
      IP:
        type: string
      changer_id:
        type: integer
      creater_id:
        type: integer
      date_create:
        type: string
      date_last_change:
        type: string
      date_last_online:
        type: string
      date_of_birth:
        type: string
      date_register:
        type: string
      date_started:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      id_status:
        type: integer
      is_archive:
        type: boolean
      is_blocked:
        type: boolean
      is_new_password:
        type: boolean
      is_online:
        type: boolean
      is_user:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      org_structure_id:
        type: integer
      phone:
        type: string
      photo:
        type: string
      photo_full:
        type: string
      position_id:
        type: integer
      sex:
        type: boolean
      user_name:
        type: string
    type: object
info:
  contact:
    email: vmatsiukhin@gmail.com
    name: API Support
  description: |-
    Реализовал простой микросервис,  посмотрел возможности gin
    Посмотрел orm gome,  подключил postgres, т.к. бд у меня была, то по подходу db first, сформировал модель в коде и заюзал простые методы работы с данными.
    Добавил swagger
    Настроил окружение на сервере и развернул тестовый микросервис.
  title: Go First Microservice test
  version: "1.0"
paths:
  /dashboard/test:
    get:
      consumes:
      - application/json
      description: не реализован
      operationId: dashboard-test
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Метод тест - не реализован
  /user/get-user-from-id/{id}:
    get:
      consumes:
      - application/json
      description: Получить пользователя по ИД
      operationId: get-user-from-id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserInfo'
      summary: Получение пользователя по Id
  /user/get-users/:
    get:
      consumes:
      - application/json
      description: Получить пользователя по ИД
      operationId: get-users
      parameters:
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserInfo'
            type: array
      summary: Получение списка пользователей
swagger: "2.0"
