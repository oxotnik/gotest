// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAspNetUserToken(db *gorm.DB, opts ...gen.DOOption) aspNetUserToken {
	_aspNetUserToken := aspNetUserToken{}

	_aspNetUserToken.aspNetUserTokenDo.UseDB(db, opts...)
	_aspNetUserToken.aspNetUserTokenDo.UseModel(&model.AspNetUserToken{})

	tableName := _aspNetUserToken.aspNetUserTokenDo.TableName()
	_aspNetUserToken.ALL = field.NewAsterisk(tableName)
	_aspNetUserToken.UserID = field.NewString(tableName, "UserId")
	_aspNetUserToken.LoginProvider = field.NewString(tableName, "LoginProvider")
	_aspNetUserToken.Name = field.NewString(tableName, "Name")
	_aspNetUserToken.Value = field.NewString(tableName, "Value")

	_aspNetUserToken.fillFieldMap()

	return _aspNetUserToken
}

type aspNetUserToken struct {
	aspNetUserTokenDo

	ALL           field.Asterisk
	UserID        field.String
	LoginProvider field.String
	Name          field.String
	Value         field.String

	fieldMap map[string]field.Expr
}

func (a aspNetUserToken) Table(newTableName string) *aspNetUserToken {
	a.aspNetUserTokenDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aspNetUserToken) As(alias string) *aspNetUserToken {
	a.aspNetUserTokenDo.DO = *(a.aspNetUserTokenDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aspNetUserToken) updateTableName(table string) *aspNetUserToken {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewString(table, "UserId")
	a.LoginProvider = field.NewString(table, "LoginProvider")
	a.Name = field.NewString(table, "Name")
	a.Value = field.NewString(table, "Value")

	a.fillFieldMap()

	return a
}

func (a *aspNetUserToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aspNetUserToken) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["LoginProvider"] = a.LoginProvider
	a.fieldMap["Name"] = a.Name
	a.fieldMap["Value"] = a.Value
}

func (a aspNetUserToken) clone(db *gorm.DB) aspNetUserToken {
	a.aspNetUserTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aspNetUserToken) replaceDB(db *gorm.DB) aspNetUserToken {
	a.aspNetUserTokenDo.ReplaceDB(db)
	return a
}

type aspNetUserTokenDo struct{ gen.DO }

type IAspNetUserTokenDo interface {
	gen.SubQuery
	Debug() IAspNetUserTokenDo
	WithContext(ctx context.Context) IAspNetUserTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAspNetUserTokenDo
	WriteDB() IAspNetUserTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAspNetUserTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAspNetUserTokenDo
	Not(conds ...gen.Condition) IAspNetUserTokenDo
	Or(conds ...gen.Condition) IAspNetUserTokenDo
	Select(conds ...field.Expr) IAspNetUserTokenDo
	Where(conds ...gen.Condition) IAspNetUserTokenDo
	Order(conds ...field.Expr) IAspNetUserTokenDo
	Distinct(cols ...field.Expr) IAspNetUserTokenDo
	Omit(cols ...field.Expr) IAspNetUserTokenDo
	Join(table schema.Tabler, on ...field.Expr) IAspNetUserTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserTokenDo
	Group(cols ...field.Expr) IAspNetUserTokenDo
	Having(conds ...gen.Condition) IAspNetUserTokenDo
	Limit(limit int) IAspNetUserTokenDo
	Offset(offset int) IAspNetUserTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserTokenDo
	Unscoped() IAspNetUserTokenDo
	Create(values ...*model.AspNetUserToken) error
	CreateInBatches(values []*model.AspNetUserToken, batchSize int) error
	Save(values ...*model.AspNetUserToken) error
	First() (*model.AspNetUserToken, error)
	Take() (*model.AspNetUserToken, error)
	Last() (*model.AspNetUserToken, error)
	Find() ([]*model.AspNetUserToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUserToken, err error)
	FindInBatches(result *[]*model.AspNetUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AspNetUserToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAspNetUserTokenDo
	Assign(attrs ...field.AssignExpr) IAspNetUserTokenDo
	Joins(fields ...field.RelationField) IAspNetUserTokenDo
	Preload(fields ...field.RelationField) IAspNetUserTokenDo
	FirstOrInit() (*model.AspNetUserToken, error)
	FirstOrCreate() (*model.AspNetUserToken, error)
	FindByPage(offset int, limit int) (result []*model.AspNetUserToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAspNetUserTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aspNetUserTokenDo) Debug() IAspNetUserTokenDo {
	return a.withDO(a.DO.Debug())
}

func (a aspNetUserTokenDo) WithContext(ctx context.Context) IAspNetUserTokenDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aspNetUserTokenDo) ReadDB() IAspNetUserTokenDo {
	return a.Clauses(dbresolver.Read)
}

func (a aspNetUserTokenDo) WriteDB() IAspNetUserTokenDo {
	return a.Clauses(dbresolver.Write)
}

func (a aspNetUserTokenDo) Session(config *gorm.Session) IAspNetUserTokenDo {
	return a.withDO(a.DO.Session(config))
}

func (a aspNetUserTokenDo) Clauses(conds ...clause.Expression) IAspNetUserTokenDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aspNetUserTokenDo) Returning(value interface{}, columns ...string) IAspNetUserTokenDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aspNetUserTokenDo) Not(conds ...gen.Condition) IAspNetUserTokenDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aspNetUserTokenDo) Or(conds ...gen.Condition) IAspNetUserTokenDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aspNetUserTokenDo) Select(conds ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aspNetUserTokenDo) Where(conds ...gen.Condition) IAspNetUserTokenDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aspNetUserTokenDo) Order(conds ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aspNetUserTokenDo) Distinct(cols ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aspNetUserTokenDo) Omit(cols ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aspNetUserTokenDo) Join(table schema.Tabler, on ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aspNetUserTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aspNetUserTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aspNetUserTokenDo) Group(cols ...field.Expr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aspNetUserTokenDo) Having(conds ...gen.Condition) IAspNetUserTokenDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aspNetUserTokenDo) Limit(limit int) IAspNetUserTokenDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aspNetUserTokenDo) Offset(offset int) IAspNetUserTokenDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aspNetUserTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserTokenDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aspNetUserTokenDo) Unscoped() IAspNetUserTokenDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aspNetUserTokenDo) Create(values ...*model.AspNetUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aspNetUserTokenDo) CreateInBatches(values []*model.AspNetUserToken, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aspNetUserTokenDo) Save(values ...*model.AspNetUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aspNetUserTokenDo) First() (*model.AspNetUserToken, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserToken), nil
	}
}

func (a aspNetUserTokenDo) Take() (*model.AspNetUserToken, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserToken), nil
	}
}

func (a aspNetUserTokenDo) Last() (*model.AspNetUserToken, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserToken), nil
	}
}

func (a aspNetUserTokenDo) Find() ([]*model.AspNetUserToken, error) {
	result, err := a.DO.Find()
	return result.([]*model.AspNetUserToken), err
}

func (a aspNetUserTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUserToken, err error) {
	buf := make([]*model.AspNetUserToken, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aspNetUserTokenDo) FindInBatches(result *[]*model.AspNetUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aspNetUserTokenDo) Attrs(attrs ...field.AssignExpr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aspNetUserTokenDo) Assign(attrs ...field.AssignExpr) IAspNetUserTokenDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aspNetUserTokenDo) Joins(fields ...field.RelationField) IAspNetUserTokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aspNetUserTokenDo) Preload(fields ...field.RelationField) IAspNetUserTokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aspNetUserTokenDo) FirstOrInit() (*model.AspNetUserToken, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserToken), nil
	}
}

func (a aspNetUserTokenDo) FirstOrCreate() (*model.AspNetUserToken, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserToken), nil
	}
}

func (a aspNetUserTokenDo) FindByPage(offset int, limit int) (result []*model.AspNetUserToken, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aspNetUserTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aspNetUserTokenDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aspNetUserTokenDo) Delete(models ...*model.AspNetUserToken) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aspNetUserTokenDo) withDO(do gen.Dao) *aspNetUserTokenDo {
	a.DO = *do.(*gen.DO)
	return a
}
