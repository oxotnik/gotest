// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAspNetRole(db *gorm.DB, opts ...gen.DOOption) aspNetRole {
	_aspNetRole := aspNetRole{}

	_aspNetRole.aspNetRoleDo.UseDB(db, opts...)
	_aspNetRole.aspNetRoleDo.UseModel(&model.AspNetRole{})

	tableName := _aspNetRole.aspNetRoleDo.TableName()
	_aspNetRole.ALL = field.NewAsterisk(tableName)
	_aspNetRole.ID = field.NewString(tableName, "Id")
	_aspNetRole.Name = field.NewString(tableName, "Name")
	_aspNetRole.NormalizedName = field.NewString(tableName, "NormalizedName")
	_aspNetRole.ConcurrencyStamp = field.NewString(tableName, "ConcurrencyStamp")

	_aspNetRole.fillFieldMap()

	return _aspNetRole
}

type aspNetRole struct {
	aspNetRoleDo

	ALL              field.Asterisk
	ID               field.String
	Name             field.String
	NormalizedName   field.String
	ConcurrencyStamp field.String

	fieldMap map[string]field.Expr
}

func (a aspNetRole) Table(newTableName string) *aspNetRole {
	a.aspNetRoleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aspNetRole) As(alias string) *aspNetRole {
	a.aspNetRoleDo.DO = *(a.aspNetRoleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aspNetRole) updateTableName(table string) *aspNetRole {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.Name = field.NewString(table, "Name")
	a.NormalizedName = field.NewString(table, "NormalizedName")
	a.ConcurrencyStamp = field.NewString(table, "ConcurrencyStamp")

	a.fillFieldMap()

	return a
}

func (a *aspNetRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aspNetRole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["Name"] = a.Name
	a.fieldMap["NormalizedName"] = a.NormalizedName
	a.fieldMap["ConcurrencyStamp"] = a.ConcurrencyStamp
}

func (a aspNetRole) clone(db *gorm.DB) aspNetRole {
	a.aspNetRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aspNetRole) replaceDB(db *gorm.DB) aspNetRole {
	a.aspNetRoleDo.ReplaceDB(db)
	return a
}

type aspNetRoleDo struct{ gen.DO }

type IAspNetRoleDo interface {
	gen.SubQuery
	Debug() IAspNetRoleDo
	WithContext(ctx context.Context) IAspNetRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAspNetRoleDo
	WriteDB() IAspNetRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAspNetRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAspNetRoleDo
	Not(conds ...gen.Condition) IAspNetRoleDo
	Or(conds ...gen.Condition) IAspNetRoleDo
	Select(conds ...field.Expr) IAspNetRoleDo
	Where(conds ...gen.Condition) IAspNetRoleDo
	Order(conds ...field.Expr) IAspNetRoleDo
	Distinct(cols ...field.Expr) IAspNetRoleDo
	Omit(cols ...field.Expr) IAspNetRoleDo
	Join(table schema.Tabler, on ...field.Expr) IAspNetRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleDo
	Group(cols ...field.Expr) IAspNetRoleDo
	Having(conds ...gen.Condition) IAspNetRoleDo
	Limit(limit int) IAspNetRoleDo
	Offset(offset int) IAspNetRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetRoleDo
	Unscoped() IAspNetRoleDo
	Create(values ...*model.AspNetRole) error
	CreateInBatches(values []*model.AspNetRole, batchSize int) error
	Save(values ...*model.AspNetRole) error
	First() (*model.AspNetRole, error)
	Take() (*model.AspNetRole, error)
	Last() (*model.AspNetRole, error)
	Find() ([]*model.AspNetRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetRole, err error)
	FindInBatches(result *[]*model.AspNetRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AspNetRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAspNetRoleDo
	Assign(attrs ...field.AssignExpr) IAspNetRoleDo
	Joins(fields ...field.RelationField) IAspNetRoleDo
	Preload(fields ...field.RelationField) IAspNetRoleDo
	FirstOrInit() (*model.AspNetRole, error)
	FirstOrCreate() (*model.AspNetRole, error)
	FindByPage(offset int, limit int) (result []*model.AspNetRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAspNetRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aspNetRoleDo) Debug() IAspNetRoleDo {
	return a.withDO(a.DO.Debug())
}

func (a aspNetRoleDo) WithContext(ctx context.Context) IAspNetRoleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aspNetRoleDo) ReadDB() IAspNetRoleDo {
	return a.Clauses(dbresolver.Read)
}

func (a aspNetRoleDo) WriteDB() IAspNetRoleDo {
	return a.Clauses(dbresolver.Write)
}

func (a aspNetRoleDo) Session(config *gorm.Session) IAspNetRoleDo {
	return a.withDO(a.DO.Session(config))
}

func (a aspNetRoleDo) Clauses(conds ...clause.Expression) IAspNetRoleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aspNetRoleDo) Returning(value interface{}, columns ...string) IAspNetRoleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aspNetRoleDo) Not(conds ...gen.Condition) IAspNetRoleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aspNetRoleDo) Or(conds ...gen.Condition) IAspNetRoleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aspNetRoleDo) Select(conds ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aspNetRoleDo) Where(conds ...gen.Condition) IAspNetRoleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aspNetRoleDo) Order(conds ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aspNetRoleDo) Distinct(cols ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aspNetRoleDo) Omit(cols ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aspNetRoleDo) Join(table schema.Tabler, on ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aspNetRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aspNetRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aspNetRoleDo) Group(cols ...field.Expr) IAspNetRoleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aspNetRoleDo) Having(conds ...gen.Condition) IAspNetRoleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aspNetRoleDo) Limit(limit int) IAspNetRoleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aspNetRoleDo) Offset(offset int) IAspNetRoleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aspNetRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetRoleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aspNetRoleDo) Unscoped() IAspNetRoleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aspNetRoleDo) Create(values ...*model.AspNetRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aspNetRoleDo) CreateInBatches(values []*model.AspNetRole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aspNetRoleDo) Save(values ...*model.AspNetRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aspNetRoleDo) First() (*model.AspNetRole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRole), nil
	}
}

func (a aspNetRoleDo) Take() (*model.AspNetRole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRole), nil
	}
}

func (a aspNetRoleDo) Last() (*model.AspNetRole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRole), nil
	}
}

func (a aspNetRoleDo) Find() ([]*model.AspNetRole, error) {
	result, err := a.DO.Find()
	return result.([]*model.AspNetRole), err
}

func (a aspNetRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetRole, err error) {
	buf := make([]*model.AspNetRole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aspNetRoleDo) FindInBatches(result *[]*model.AspNetRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aspNetRoleDo) Attrs(attrs ...field.AssignExpr) IAspNetRoleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aspNetRoleDo) Assign(attrs ...field.AssignExpr) IAspNetRoleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aspNetRoleDo) Joins(fields ...field.RelationField) IAspNetRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aspNetRoleDo) Preload(fields ...field.RelationField) IAspNetRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aspNetRoleDo) FirstOrInit() (*model.AspNetRole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRole), nil
	}
}

func (a aspNetRoleDo) FirstOrCreate() (*model.AspNetRole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRole), nil
	}
}

func (a aspNetRoleDo) FindByPage(offset int, limit int) (result []*model.AspNetRole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aspNetRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aspNetRoleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aspNetRoleDo) Delete(models ...*model.AspNetRole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aspNetRoleDo) withDO(do gen.Dao) *aspNetRoleDo {
	a.DO = *do.(*gen.DO)
	return a
}
