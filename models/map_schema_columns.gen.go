// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newMapSchemaColumn(db *gorm.DB, opts ...gen.DOOption) mapSchemaColumn {
	_mapSchemaColumn := mapSchemaColumn{}

	_mapSchemaColumn.mapSchemaColumnDo.UseDB(db, opts...)
	_mapSchemaColumn.mapSchemaColumnDo.UseModel(&model.MapSchemaColumn{})

	tableName := _mapSchemaColumn.mapSchemaColumnDo.TableName()
	_mapSchemaColumn.ALL = field.NewAsterisk(tableName)
	_mapSchemaColumn.ID = field.NewInt32(tableName, "id")
	_mapSchemaColumn.DateCreate = field.NewTime(tableName, "date_create")
	_mapSchemaColumn.DateLastChange = field.NewTime(tableName, "date_last_change")
	_mapSchemaColumn.CreaterID = field.NewInt64(tableName, "creater_id")
	_mapSchemaColumn.ChangerID = field.NewInt64(tableName, "changer_id")
	_mapSchemaColumn.TableID = field.NewInt32(tableName, "table_id")
	_mapSchemaColumn.Name = field.NewString(tableName, "name")
	_mapSchemaColumn.Title = field.NewString(tableName, "title")
	_mapSchemaColumn.Type = field.NewString(tableName, "type")
	_mapSchemaColumn.IsKey = field.NewBool(tableName, "is_key")
	_mapSchemaColumn.ZuluTypeID = field.NewInt32(tableName, "zulu_type_id")
	_mapSchemaColumn.ZuluModeID = field.NewInt32(tableName, "zulu_mode_id")
	_mapSchemaColumn.HandBookID = field.NewInt32(tableName, "hand_book_id")
	_mapSchemaColumn.ExtID = field.NewInt32(tableName, "ext_id")
	_mapSchemaColumn.CascadeID = field.NewInt32(tableName, "cascade_id")
	_mapSchemaColumn.Priority = field.NewInt32(tableName, "priority")
	_mapSchemaColumn.IsView = field.NewBool(tableName, "is_view")
	_mapSchemaColumn.IsDynamic = field.NewBool(tableName, "is_dynamic")

	_mapSchemaColumn.fillFieldMap()

	return _mapSchemaColumn
}

type mapSchemaColumn struct {
	mapSchemaColumnDo

	ALL            field.Asterisk
	ID             field.Int32
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64
	TableID        field.Int32
	Name           field.String
	Title          field.String
	Type           field.String
	IsKey          field.Bool
	ZuluTypeID     field.Int32
	ZuluModeID     field.Int32
	HandBookID     field.Int32
	ExtID          field.Int32
	CascadeID      field.Int32
	Priority       field.Int32
	IsView         field.Bool
	IsDynamic      field.Bool

	fieldMap map[string]field.Expr
}

func (m mapSchemaColumn) Table(newTableName string) *mapSchemaColumn {
	m.mapSchemaColumnDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mapSchemaColumn) As(alias string) *mapSchemaColumn {
	m.mapSchemaColumnDo.DO = *(m.mapSchemaColumnDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mapSchemaColumn) updateTableName(table string) *mapSchemaColumn {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.DateCreate = field.NewTime(table, "date_create")
	m.DateLastChange = field.NewTime(table, "date_last_change")
	m.CreaterID = field.NewInt64(table, "creater_id")
	m.ChangerID = field.NewInt64(table, "changer_id")
	m.TableID = field.NewInt32(table, "table_id")
	m.Name = field.NewString(table, "name")
	m.Title = field.NewString(table, "title")
	m.Type = field.NewString(table, "type")
	m.IsKey = field.NewBool(table, "is_key")
	m.ZuluTypeID = field.NewInt32(table, "zulu_type_id")
	m.ZuluModeID = field.NewInt32(table, "zulu_mode_id")
	m.HandBookID = field.NewInt32(table, "hand_book_id")
	m.ExtID = field.NewInt32(table, "ext_id")
	m.CascadeID = field.NewInt32(table, "cascade_id")
	m.Priority = field.NewInt32(table, "priority")
	m.IsView = field.NewBool(table, "is_view")
	m.IsDynamic = field.NewBool(table, "is_dynamic")

	m.fillFieldMap()

	return m
}

func (m *mapSchemaColumn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mapSchemaColumn) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 18)
	m.fieldMap["id"] = m.ID
	m.fieldMap["date_create"] = m.DateCreate
	m.fieldMap["date_last_change"] = m.DateLastChange
	m.fieldMap["creater_id"] = m.CreaterID
	m.fieldMap["changer_id"] = m.ChangerID
	m.fieldMap["table_id"] = m.TableID
	m.fieldMap["name"] = m.Name
	m.fieldMap["title"] = m.Title
	m.fieldMap["type"] = m.Type
	m.fieldMap["is_key"] = m.IsKey
	m.fieldMap["zulu_type_id"] = m.ZuluTypeID
	m.fieldMap["zulu_mode_id"] = m.ZuluModeID
	m.fieldMap["hand_book_id"] = m.HandBookID
	m.fieldMap["ext_id"] = m.ExtID
	m.fieldMap["cascade_id"] = m.CascadeID
	m.fieldMap["priority"] = m.Priority
	m.fieldMap["is_view"] = m.IsView
	m.fieldMap["is_dynamic"] = m.IsDynamic
}

func (m mapSchemaColumn) clone(db *gorm.DB) mapSchemaColumn {
	m.mapSchemaColumnDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mapSchemaColumn) replaceDB(db *gorm.DB) mapSchemaColumn {
	m.mapSchemaColumnDo.ReplaceDB(db)
	return m
}

type mapSchemaColumnDo struct{ gen.DO }

type IMapSchemaColumnDo interface {
	gen.SubQuery
	Debug() IMapSchemaColumnDo
	WithContext(ctx context.Context) IMapSchemaColumnDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMapSchemaColumnDo
	WriteDB() IMapSchemaColumnDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMapSchemaColumnDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMapSchemaColumnDo
	Not(conds ...gen.Condition) IMapSchemaColumnDo
	Or(conds ...gen.Condition) IMapSchemaColumnDo
	Select(conds ...field.Expr) IMapSchemaColumnDo
	Where(conds ...gen.Condition) IMapSchemaColumnDo
	Order(conds ...field.Expr) IMapSchemaColumnDo
	Distinct(cols ...field.Expr) IMapSchemaColumnDo
	Omit(cols ...field.Expr) IMapSchemaColumnDo
	Join(table schema.Tabler, on ...field.Expr) IMapSchemaColumnDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMapSchemaColumnDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMapSchemaColumnDo
	Group(cols ...field.Expr) IMapSchemaColumnDo
	Having(conds ...gen.Condition) IMapSchemaColumnDo
	Limit(limit int) IMapSchemaColumnDo
	Offset(offset int) IMapSchemaColumnDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMapSchemaColumnDo
	Unscoped() IMapSchemaColumnDo
	Create(values ...*model.MapSchemaColumn) error
	CreateInBatches(values []*model.MapSchemaColumn, batchSize int) error
	Save(values ...*model.MapSchemaColumn) error
	First() (*model.MapSchemaColumn, error)
	Take() (*model.MapSchemaColumn, error)
	Last() (*model.MapSchemaColumn, error)
	Find() ([]*model.MapSchemaColumn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapSchemaColumn, err error)
	FindInBatches(result *[]*model.MapSchemaColumn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MapSchemaColumn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMapSchemaColumnDo
	Assign(attrs ...field.AssignExpr) IMapSchemaColumnDo
	Joins(fields ...field.RelationField) IMapSchemaColumnDo
	Preload(fields ...field.RelationField) IMapSchemaColumnDo
	FirstOrInit() (*model.MapSchemaColumn, error)
	FirstOrCreate() (*model.MapSchemaColumn, error)
	FindByPage(offset int, limit int) (result []*model.MapSchemaColumn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMapSchemaColumnDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mapSchemaColumnDo) Debug() IMapSchemaColumnDo {
	return m.withDO(m.DO.Debug())
}

func (m mapSchemaColumnDo) WithContext(ctx context.Context) IMapSchemaColumnDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mapSchemaColumnDo) ReadDB() IMapSchemaColumnDo {
	return m.Clauses(dbresolver.Read)
}

func (m mapSchemaColumnDo) WriteDB() IMapSchemaColumnDo {
	return m.Clauses(dbresolver.Write)
}

func (m mapSchemaColumnDo) Session(config *gorm.Session) IMapSchemaColumnDo {
	return m.withDO(m.DO.Session(config))
}

func (m mapSchemaColumnDo) Clauses(conds ...clause.Expression) IMapSchemaColumnDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mapSchemaColumnDo) Returning(value interface{}, columns ...string) IMapSchemaColumnDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mapSchemaColumnDo) Not(conds ...gen.Condition) IMapSchemaColumnDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mapSchemaColumnDo) Or(conds ...gen.Condition) IMapSchemaColumnDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mapSchemaColumnDo) Select(conds ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mapSchemaColumnDo) Where(conds ...gen.Condition) IMapSchemaColumnDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mapSchemaColumnDo) Order(conds ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mapSchemaColumnDo) Distinct(cols ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mapSchemaColumnDo) Omit(cols ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mapSchemaColumnDo) Join(table schema.Tabler, on ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mapSchemaColumnDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mapSchemaColumnDo) RightJoin(table schema.Tabler, on ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mapSchemaColumnDo) Group(cols ...field.Expr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mapSchemaColumnDo) Having(conds ...gen.Condition) IMapSchemaColumnDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mapSchemaColumnDo) Limit(limit int) IMapSchemaColumnDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mapSchemaColumnDo) Offset(offset int) IMapSchemaColumnDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mapSchemaColumnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMapSchemaColumnDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mapSchemaColumnDo) Unscoped() IMapSchemaColumnDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mapSchemaColumnDo) Create(values ...*model.MapSchemaColumn) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mapSchemaColumnDo) CreateInBatches(values []*model.MapSchemaColumn, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mapSchemaColumnDo) Save(values ...*model.MapSchemaColumn) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mapSchemaColumnDo) First() (*model.MapSchemaColumn, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaColumn), nil
	}
}

func (m mapSchemaColumnDo) Take() (*model.MapSchemaColumn, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaColumn), nil
	}
}

func (m mapSchemaColumnDo) Last() (*model.MapSchemaColumn, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaColumn), nil
	}
}

func (m mapSchemaColumnDo) Find() ([]*model.MapSchemaColumn, error) {
	result, err := m.DO.Find()
	return result.([]*model.MapSchemaColumn), err
}

func (m mapSchemaColumnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapSchemaColumn, err error) {
	buf := make([]*model.MapSchemaColumn, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mapSchemaColumnDo) FindInBatches(result *[]*model.MapSchemaColumn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mapSchemaColumnDo) Attrs(attrs ...field.AssignExpr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mapSchemaColumnDo) Assign(attrs ...field.AssignExpr) IMapSchemaColumnDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mapSchemaColumnDo) Joins(fields ...field.RelationField) IMapSchemaColumnDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mapSchemaColumnDo) Preload(fields ...field.RelationField) IMapSchemaColumnDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mapSchemaColumnDo) FirstOrInit() (*model.MapSchemaColumn, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaColumn), nil
	}
}

func (m mapSchemaColumnDo) FirstOrCreate() (*model.MapSchemaColumn, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaColumn), nil
	}
}

func (m mapSchemaColumnDo) FindByPage(offset int, limit int) (result []*model.MapSchemaColumn, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mapSchemaColumnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mapSchemaColumnDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mapSchemaColumnDo) Delete(models ...*model.MapSchemaColumn) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mapSchemaColumnDo) withDO(do gen.Dao) *mapSchemaColumnDo {
	m.DO = *do.(*gen.DO)
	return m
}
