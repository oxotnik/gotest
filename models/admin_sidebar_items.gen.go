// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAdminSidebarItem(db *gorm.DB, opts ...gen.DOOption) adminSidebarItem {
	_adminSidebarItem := adminSidebarItem{}

	_adminSidebarItem.adminSidebarItemDo.UseDB(db, opts...)
	_adminSidebarItem.adminSidebarItemDo.UseModel(&model.AdminSidebarItem{})

	tableName := _adminSidebarItem.adminSidebarItemDo.TableName()
	_adminSidebarItem.ALL = field.NewAsterisk(tableName)
	_adminSidebarItem.ID = field.NewInt32(tableName, "id")
	_adminSidebarItem.ParentID = field.NewInt32(tableName, "parent_id")
	_adminSidebarItem.Icon = field.NewString(tableName, "icon")
	_adminSidebarItem.Title = field.NewString(tableName, "title")
	_adminSidebarItem.URL = field.NewString(tableName, "url")
	_adminSidebarItem.IsDisable = field.NewBool(tableName, "is_disable")
	_adminSidebarItem.Priority = field.NewInt32(tableName, "priority")
	_adminSidebarItem.IsCategory = field.NewBool(tableName, "is_category")
	_adminSidebarItem.ModuleID = field.NewInt32(tableName, "module_id")
	_adminSidebarItem.Role = field.NewString(tableName, "role")
	_adminSidebarItem.IconCategory = field.NewString(tableName, "icon_category")

	_adminSidebarItem.fillFieldMap()

	return _adminSidebarItem
}

type adminSidebarItem struct {
	adminSidebarItemDo

	ALL          field.Asterisk
	ID           field.Int32
	ParentID     field.Int32
	Icon         field.String
	Title        field.String
	URL          field.String
	IsDisable    field.Bool
	Priority     field.Int32
	IsCategory   field.Bool
	ModuleID     field.Int32
	Role         field.String
	IconCategory field.String

	fieldMap map[string]field.Expr
}

func (a adminSidebarItem) Table(newTableName string) *adminSidebarItem {
	a.adminSidebarItemDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminSidebarItem) As(alias string) *adminSidebarItem {
	a.adminSidebarItemDo.DO = *(a.adminSidebarItemDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminSidebarItem) updateTableName(table string) *adminSidebarItem {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.ParentID = field.NewInt32(table, "parent_id")
	a.Icon = field.NewString(table, "icon")
	a.Title = field.NewString(table, "title")
	a.URL = field.NewString(table, "url")
	a.IsDisable = field.NewBool(table, "is_disable")
	a.Priority = field.NewInt32(table, "priority")
	a.IsCategory = field.NewBool(table, "is_category")
	a.ModuleID = field.NewInt32(table, "module_id")
	a.Role = field.NewString(table, "role")
	a.IconCategory = field.NewString(table, "icon_category")

	a.fillFieldMap()

	return a
}

func (a *adminSidebarItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminSidebarItem) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["icon"] = a.Icon
	a.fieldMap["title"] = a.Title
	a.fieldMap["url"] = a.URL
	a.fieldMap["is_disable"] = a.IsDisable
	a.fieldMap["priority"] = a.Priority
	a.fieldMap["is_category"] = a.IsCategory
	a.fieldMap["module_id"] = a.ModuleID
	a.fieldMap["role"] = a.Role
	a.fieldMap["icon_category"] = a.IconCategory
}

func (a adminSidebarItem) clone(db *gorm.DB) adminSidebarItem {
	a.adminSidebarItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminSidebarItem) replaceDB(db *gorm.DB) adminSidebarItem {
	a.adminSidebarItemDo.ReplaceDB(db)
	return a
}

type adminSidebarItemDo struct{ gen.DO }

type IAdminSidebarItemDo interface {
	gen.SubQuery
	Debug() IAdminSidebarItemDo
	WithContext(ctx context.Context) IAdminSidebarItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminSidebarItemDo
	WriteDB() IAdminSidebarItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminSidebarItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminSidebarItemDo
	Not(conds ...gen.Condition) IAdminSidebarItemDo
	Or(conds ...gen.Condition) IAdminSidebarItemDo
	Select(conds ...field.Expr) IAdminSidebarItemDo
	Where(conds ...gen.Condition) IAdminSidebarItemDo
	Order(conds ...field.Expr) IAdminSidebarItemDo
	Distinct(cols ...field.Expr) IAdminSidebarItemDo
	Omit(cols ...field.Expr) IAdminSidebarItemDo
	Join(table schema.Tabler, on ...field.Expr) IAdminSidebarItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminSidebarItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminSidebarItemDo
	Group(cols ...field.Expr) IAdminSidebarItemDo
	Having(conds ...gen.Condition) IAdminSidebarItemDo
	Limit(limit int) IAdminSidebarItemDo
	Offset(offset int) IAdminSidebarItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminSidebarItemDo
	Unscoped() IAdminSidebarItemDo
	Create(values ...*model.AdminSidebarItem) error
	CreateInBatches(values []*model.AdminSidebarItem, batchSize int) error
	Save(values ...*model.AdminSidebarItem) error
	First() (*model.AdminSidebarItem, error)
	Take() (*model.AdminSidebarItem, error)
	Last() (*model.AdminSidebarItem, error)
	Find() ([]*model.AdminSidebarItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminSidebarItem, err error)
	FindInBatches(result *[]*model.AdminSidebarItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminSidebarItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminSidebarItemDo
	Assign(attrs ...field.AssignExpr) IAdminSidebarItemDo
	Joins(fields ...field.RelationField) IAdminSidebarItemDo
	Preload(fields ...field.RelationField) IAdminSidebarItemDo
	FirstOrInit() (*model.AdminSidebarItem, error)
	FirstOrCreate() (*model.AdminSidebarItem, error)
	FindByPage(offset int, limit int) (result []*model.AdminSidebarItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminSidebarItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminSidebarItemDo) Debug() IAdminSidebarItemDo {
	return a.withDO(a.DO.Debug())
}

func (a adminSidebarItemDo) WithContext(ctx context.Context) IAdminSidebarItemDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminSidebarItemDo) ReadDB() IAdminSidebarItemDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminSidebarItemDo) WriteDB() IAdminSidebarItemDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminSidebarItemDo) Session(config *gorm.Session) IAdminSidebarItemDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminSidebarItemDo) Clauses(conds ...clause.Expression) IAdminSidebarItemDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminSidebarItemDo) Returning(value interface{}, columns ...string) IAdminSidebarItemDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminSidebarItemDo) Not(conds ...gen.Condition) IAdminSidebarItemDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminSidebarItemDo) Or(conds ...gen.Condition) IAdminSidebarItemDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminSidebarItemDo) Select(conds ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminSidebarItemDo) Where(conds ...gen.Condition) IAdminSidebarItemDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminSidebarItemDo) Order(conds ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminSidebarItemDo) Distinct(cols ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminSidebarItemDo) Omit(cols ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminSidebarItemDo) Join(table schema.Tabler, on ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminSidebarItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminSidebarItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminSidebarItemDo) Group(cols ...field.Expr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminSidebarItemDo) Having(conds ...gen.Condition) IAdminSidebarItemDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminSidebarItemDo) Limit(limit int) IAdminSidebarItemDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminSidebarItemDo) Offset(offset int) IAdminSidebarItemDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminSidebarItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminSidebarItemDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminSidebarItemDo) Unscoped() IAdminSidebarItemDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminSidebarItemDo) Create(values ...*model.AdminSidebarItem) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminSidebarItemDo) CreateInBatches(values []*model.AdminSidebarItem, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminSidebarItemDo) Save(values ...*model.AdminSidebarItem) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminSidebarItemDo) First() (*model.AdminSidebarItem, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSidebarItem), nil
	}
}

func (a adminSidebarItemDo) Take() (*model.AdminSidebarItem, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSidebarItem), nil
	}
}

func (a adminSidebarItemDo) Last() (*model.AdminSidebarItem, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSidebarItem), nil
	}
}

func (a adminSidebarItemDo) Find() ([]*model.AdminSidebarItem, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminSidebarItem), err
}

func (a adminSidebarItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminSidebarItem, err error) {
	buf := make([]*model.AdminSidebarItem, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminSidebarItemDo) FindInBatches(result *[]*model.AdminSidebarItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminSidebarItemDo) Attrs(attrs ...field.AssignExpr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminSidebarItemDo) Assign(attrs ...field.AssignExpr) IAdminSidebarItemDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminSidebarItemDo) Joins(fields ...field.RelationField) IAdminSidebarItemDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminSidebarItemDo) Preload(fields ...field.RelationField) IAdminSidebarItemDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminSidebarItemDo) FirstOrInit() (*model.AdminSidebarItem, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSidebarItem), nil
	}
}

func (a adminSidebarItemDo) FirstOrCreate() (*model.AdminSidebarItem, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminSidebarItem), nil
	}
}

func (a adminSidebarItemDo) FindByPage(offset int, limit int) (result []*model.AdminSidebarItem, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminSidebarItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminSidebarItemDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminSidebarItemDo) Delete(models ...*model.AdminSidebarItem) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminSidebarItemDo) withDO(do gen.Dao) *adminSidebarItemDo {
	a.DO = *do.(*gen.DO)
	return a
}
