// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newUserInfoPrivilege(db *gorm.DB, opts ...gen.DOOption) userInfoPrivilege {
	_userInfoPrivilege := userInfoPrivilege{}

	_userInfoPrivilege.userInfoPrivilegeDo.UseDB(db, opts...)
	_userInfoPrivilege.userInfoPrivilegeDo.UseModel(&model.UserInfoPrivilege{})

	tableName := _userInfoPrivilege.userInfoPrivilegeDo.TableName()
	_userInfoPrivilege.ALL = field.NewAsterisk(tableName)
	_userInfoPrivilege.ID = field.NewInt32(tableName, "id")
	_userInfoPrivilege.UserID = field.NewInt64(tableName, "user_id")
	_userInfoPrivilege.DateCreate = field.NewTime(tableName, "date_create")
	_userInfoPrivilege.DateLastChange = field.NewTime(tableName, "date_last_change")
	_userInfoPrivilege.CreaterID = field.NewInt64(tableName, "creater_id")
	_userInfoPrivilege.ChangerID = field.NewInt64(tableName, "changer_id")
	_userInfoPrivilege.PrivilegesID = field.NewInt32(tableName, "privileges_id")

	_userInfoPrivilege.fillFieldMap()

	return _userInfoPrivilege
}

type userInfoPrivilege struct {
	userInfoPrivilegeDo

	ALL            field.Asterisk
	ID             field.Int32
	UserID         field.Int64
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64
	PrivilegesID   field.Int32

	fieldMap map[string]field.Expr
}

func (u userInfoPrivilege) Table(newTableName string) *userInfoPrivilege {
	u.userInfoPrivilegeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInfoPrivilege) As(alias string) *userInfoPrivilege {
	u.userInfoPrivilegeDo.DO = *(u.userInfoPrivilegeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInfoPrivilege) updateTableName(table string) *userInfoPrivilege {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.DateCreate = field.NewTime(table, "date_create")
	u.DateLastChange = field.NewTime(table, "date_last_change")
	u.CreaterID = field.NewInt64(table, "creater_id")
	u.ChangerID = field.NewInt64(table, "changer_id")
	u.PrivilegesID = field.NewInt32(table, "privileges_id")

	u.fillFieldMap()

	return u
}

func (u *userInfoPrivilege) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInfoPrivilege) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["date_create"] = u.DateCreate
	u.fieldMap["date_last_change"] = u.DateLastChange
	u.fieldMap["creater_id"] = u.CreaterID
	u.fieldMap["changer_id"] = u.ChangerID
	u.fieldMap["privileges_id"] = u.PrivilegesID
}

func (u userInfoPrivilege) clone(db *gorm.DB) userInfoPrivilege {
	u.userInfoPrivilegeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInfoPrivilege) replaceDB(db *gorm.DB) userInfoPrivilege {
	u.userInfoPrivilegeDo.ReplaceDB(db)
	return u
}

type userInfoPrivilegeDo struct{ gen.DO }

type IUserInfoPrivilegeDo interface {
	gen.SubQuery
	Debug() IUserInfoPrivilegeDo
	WithContext(ctx context.Context) IUserInfoPrivilegeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInfoPrivilegeDo
	WriteDB() IUserInfoPrivilegeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInfoPrivilegeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInfoPrivilegeDo
	Not(conds ...gen.Condition) IUserInfoPrivilegeDo
	Or(conds ...gen.Condition) IUserInfoPrivilegeDo
	Select(conds ...field.Expr) IUserInfoPrivilegeDo
	Where(conds ...gen.Condition) IUserInfoPrivilegeDo
	Order(conds ...field.Expr) IUserInfoPrivilegeDo
	Distinct(cols ...field.Expr) IUserInfoPrivilegeDo
	Omit(cols ...field.Expr) IUserInfoPrivilegeDo
	Join(table schema.Tabler, on ...field.Expr) IUserInfoPrivilegeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoPrivilegeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoPrivilegeDo
	Group(cols ...field.Expr) IUserInfoPrivilegeDo
	Having(conds ...gen.Condition) IUserInfoPrivilegeDo
	Limit(limit int) IUserInfoPrivilegeDo
	Offset(offset int) IUserInfoPrivilegeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoPrivilegeDo
	Unscoped() IUserInfoPrivilegeDo
	Create(values ...*model.UserInfoPrivilege) error
	CreateInBatches(values []*model.UserInfoPrivilege, batchSize int) error
	Save(values ...*model.UserInfoPrivilege) error
	First() (*model.UserInfoPrivilege, error)
	Take() (*model.UserInfoPrivilege, error)
	Last() (*model.UserInfoPrivilege, error)
	Find() ([]*model.UserInfoPrivilege, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoPrivilege, err error)
	FindInBatches(result *[]*model.UserInfoPrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserInfoPrivilege) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInfoPrivilegeDo
	Assign(attrs ...field.AssignExpr) IUserInfoPrivilegeDo
	Joins(fields ...field.RelationField) IUserInfoPrivilegeDo
	Preload(fields ...field.RelationField) IUserInfoPrivilegeDo
	FirstOrInit() (*model.UserInfoPrivilege, error)
	FirstOrCreate() (*model.UserInfoPrivilege, error)
	FindByPage(offset int, limit int) (result []*model.UserInfoPrivilege, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInfoPrivilegeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userInfoPrivilegeDo) Debug() IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Debug())
}

func (u userInfoPrivilegeDo) WithContext(ctx context.Context) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInfoPrivilegeDo) ReadDB() IUserInfoPrivilegeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInfoPrivilegeDo) WriteDB() IUserInfoPrivilegeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInfoPrivilegeDo) Session(config *gorm.Session) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userInfoPrivilegeDo) Clauses(conds ...clause.Expression) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInfoPrivilegeDo) Returning(value interface{}, columns ...string) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInfoPrivilegeDo) Not(conds ...gen.Condition) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInfoPrivilegeDo) Or(conds ...gen.Condition) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInfoPrivilegeDo) Select(conds ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInfoPrivilegeDo) Where(conds ...gen.Condition) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInfoPrivilegeDo) Order(conds ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInfoPrivilegeDo) Distinct(cols ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInfoPrivilegeDo) Omit(cols ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInfoPrivilegeDo) Join(table schema.Tabler, on ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInfoPrivilegeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInfoPrivilegeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInfoPrivilegeDo) Group(cols ...field.Expr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInfoPrivilegeDo) Having(conds ...gen.Condition) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInfoPrivilegeDo) Limit(limit int) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInfoPrivilegeDo) Offset(offset int) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInfoPrivilegeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInfoPrivilegeDo) Unscoped() IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInfoPrivilegeDo) Create(values ...*model.UserInfoPrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInfoPrivilegeDo) CreateInBatches(values []*model.UserInfoPrivilege, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInfoPrivilegeDo) Save(values ...*model.UserInfoPrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInfoPrivilegeDo) First() (*model.UserInfoPrivilege, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoPrivilege), nil
	}
}

func (u userInfoPrivilegeDo) Take() (*model.UserInfoPrivilege, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoPrivilege), nil
	}
}

func (u userInfoPrivilegeDo) Last() (*model.UserInfoPrivilege, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoPrivilege), nil
	}
}

func (u userInfoPrivilegeDo) Find() ([]*model.UserInfoPrivilege, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInfoPrivilege), err
}

func (u userInfoPrivilegeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoPrivilege, err error) {
	buf := make([]*model.UserInfoPrivilege, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInfoPrivilegeDo) FindInBatches(result *[]*model.UserInfoPrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInfoPrivilegeDo) Attrs(attrs ...field.AssignExpr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInfoPrivilegeDo) Assign(attrs ...field.AssignExpr) IUserInfoPrivilegeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInfoPrivilegeDo) Joins(fields ...field.RelationField) IUserInfoPrivilegeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInfoPrivilegeDo) Preload(fields ...field.RelationField) IUserInfoPrivilegeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInfoPrivilegeDo) FirstOrInit() (*model.UserInfoPrivilege, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoPrivilege), nil
	}
}

func (u userInfoPrivilegeDo) FirstOrCreate() (*model.UserInfoPrivilege, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoPrivilege), nil
	}
}

func (u userInfoPrivilegeDo) FindByPage(offset int, limit int) (result []*model.UserInfoPrivilege, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInfoPrivilegeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInfoPrivilegeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInfoPrivilegeDo) Delete(models ...*model.UserInfoPrivilege) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInfoPrivilegeDo) withDO(do gen.Dao) *userInfoPrivilegeDo {
	u.DO = *do.(*gen.DO)
	return u
}
