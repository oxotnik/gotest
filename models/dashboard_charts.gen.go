// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newDashboardChart(db *gorm.DB, opts ...gen.DOOption) dashboardChart {
	_dashboardChart := dashboardChart{}

	_dashboardChart.dashboardChartDo.UseDB(db, opts...)
	_dashboardChart.dashboardChartDo.UseModel(&model.DashboardChart{})

	tableName := _dashboardChart.dashboardChartDo.TableName()
	_dashboardChart.ALL = field.NewAsterisk(tableName)
	_dashboardChart.ID = field.NewInt32(tableName, "id")
	_dashboardChart.DateCreate = field.NewTime(tableName, "date_create")
	_dashboardChart.DateLastChange = field.NewTime(tableName, "date_last_change")
	_dashboardChart.CreaterID = field.NewInt64(tableName, "creater_id")
	_dashboardChart.ChangerID = field.NewInt64(tableName, "changer_id")
	_dashboardChart.ProjectID = field.NewInt32(tableName, "project_id")
	_dashboardChart.Title = field.NewString(tableName, "title")
	_dashboardChart.SqlFunction = field.NewString(tableName, "sql_function")
	_dashboardChart.SettingsJSON = field.NewString(tableName, "settings_json")
	_dashboardChart.Priority = field.NewInt32(tableName, "priority")
	_dashboardChart.Type = field.NewString(tableName, "type")

	_dashboardChart.fillFieldMap()

	return _dashboardChart
}

type dashboardChart struct {
	dashboardChartDo

	ALL            field.Asterisk
	ID             field.Int32
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64
	ProjectID      field.Int32
	Title          field.String
	SqlFunction    field.String
	SettingsJSON   field.String
	Priority       field.Int32
	Type           field.String

	fieldMap map[string]field.Expr
}

func (d dashboardChart) Table(newTableName string) *dashboardChart {
	d.dashboardChartDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dashboardChart) As(alias string) *dashboardChart {
	d.dashboardChartDo.DO = *(d.dashboardChartDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dashboardChart) updateTableName(table string) *dashboardChart {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.DateCreate = field.NewTime(table, "date_create")
	d.DateLastChange = field.NewTime(table, "date_last_change")
	d.CreaterID = field.NewInt64(table, "creater_id")
	d.ChangerID = field.NewInt64(table, "changer_id")
	d.ProjectID = field.NewInt32(table, "project_id")
	d.Title = field.NewString(table, "title")
	d.SqlFunction = field.NewString(table, "sql_function")
	d.SettingsJSON = field.NewString(table, "settings_json")
	d.Priority = field.NewInt32(table, "priority")
	d.Type = field.NewString(table, "type")

	d.fillFieldMap()

	return d
}

func (d *dashboardChart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dashboardChart) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["date_create"] = d.DateCreate
	d.fieldMap["date_last_change"] = d.DateLastChange
	d.fieldMap["creater_id"] = d.CreaterID
	d.fieldMap["changer_id"] = d.ChangerID
	d.fieldMap["project_id"] = d.ProjectID
	d.fieldMap["title"] = d.Title
	d.fieldMap["sql_function"] = d.SqlFunction
	d.fieldMap["settings_json"] = d.SettingsJSON
	d.fieldMap["priority"] = d.Priority
	d.fieldMap["type"] = d.Type
}

func (d dashboardChart) clone(db *gorm.DB) dashboardChart {
	d.dashboardChartDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dashboardChart) replaceDB(db *gorm.DB) dashboardChart {
	d.dashboardChartDo.ReplaceDB(db)
	return d
}

type dashboardChartDo struct{ gen.DO }

type IDashboardChartDo interface {
	gen.SubQuery
	Debug() IDashboardChartDo
	WithContext(ctx context.Context) IDashboardChartDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDashboardChartDo
	WriteDB() IDashboardChartDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDashboardChartDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDashboardChartDo
	Not(conds ...gen.Condition) IDashboardChartDo
	Or(conds ...gen.Condition) IDashboardChartDo
	Select(conds ...field.Expr) IDashboardChartDo
	Where(conds ...gen.Condition) IDashboardChartDo
	Order(conds ...field.Expr) IDashboardChartDo
	Distinct(cols ...field.Expr) IDashboardChartDo
	Omit(cols ...field.Expr) IDashboardChartDo
	Join(table schema.Tabler, on ...field.Expr) IDashboardChartDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDashboardChartDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDashboardChartDo
	Group(cols ...field.Expr) IDashboardChartDo
	Having(conds ...gen.Condition) IDashboardChartDo
	Limit(limit int) IDashboardChartDo
	Offset(offset int) IDashboardChartDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDashboardChartDo
	Unscoped() IDashboardChartDo
	Create(values ...*model.DashboardChart) error
	CreateInBatches(values []*model.DashboardChart, batchSize int) error
	Save(values ...*model.DashboardChart) error
	First() (*model.DashboardChart, error)
	Take() (*model.DashboardChart, error)
	Last() (*model.DashboardChart, error)
	Find() ([]*model.DashboardChart, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DashboardChart, err error)
	FindInBatches(result *[]*model.DashboardChart, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DashboardChart) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDashboardChartDo
	Assign(attrs ...field.AssignExpr) IDashboardChartDo
	Joins(fields ...field.RelationField) IDashboardChartDo
	Preload(fields ...field.RelationField) IDashboardChartDo
	FirstOrInit() (*model.DashboardChart, error)
	FirstOrCreate() (*model.DashboardChart, error)
	FindByPage(offset int, limit int) (result []*model.DashboardChart, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDashboardChartDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dashboardChartDo) Debug() IDashboardChartDo {
	return d.withDO(d.DO.Debug())
}

func (d dashboardChartDo) WithContext(ctx context.Context) IDashboardChartDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dashboardChartDo) ReadDB() IDashboardChartDo {
	return d.Clauses(dbresolver.Read)
}

func (d dashboardChartDo) WriteDB() IDashboardChartDo {
	return d.Clauses(dbresolver.Write)
}

func (d dashboardChartDo) Session(config *gorm.Session) IDashboardChartDo {
	return d.withDO(d.DO.Session(config))
}

func (d dashboardChartDo) Clauses(conds ...clause.Expression) IDashboardChartDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dashboardChartDo) Returning(value interface{}, columns ...string) IDashboardChartDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dashboardChartDo) Not(conds ...gen.Condition) IDashboardChartDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dashboardChartDo) Or(conds ...gen.Condition) IDashboardChartDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dashboardChartDo) Select(conds ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dashboardChartDo) Where(conds ...gen.Condition) IDashboardChartDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dashboardChartDo) Order(conds ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dashboardChartDo) Distinct(cols ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dashboardChartDo) Omit(cols ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dashboardChartDo) Join(table schema.Tabler, on ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dashboardChartDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dashboardChartDo) RightJoin(table schema.Tabler, on ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dashboardChartDo) Group(cols ...field.Expr) IDashboardChartDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dashboardChartDo) Having(conds ...gen.Condition) IDashboardChartDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dashboardChartDo) Limit(limit int) IDashboardChartDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dashboardChartDo) Offset(offset int) IDashboardChartDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dashboardChartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDashboardChartDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dashboardChartDo) Unscoped() IDashboardChartDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dashboardChartDo) Create(values ...*model.DashboardChart) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dashboardChartDo) CreateInBatches(values []*model.DashboardChart, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dashboardChartDo) Save(values ...*model.DashboardChart) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dashboardChartDo) First() (*model.DashboardChart, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardChart), nil
	}
}

func (d dashboardChartDo) Take() (*model.DashboardChart, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardChart), nil
	}
}

func (d dashboardChartDo) Last() (*model.DashboardChart, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardChart), nil
	}
}

func (d dashboardChartDo) Find() ([]*model.DashboardChart, error) {
	result, err := d.DO.Find()
	return result.([]*model.DashboardChart), err
}

func (d dashboardChartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DashboardChart, err error) {
	buf := make([]*model.DashboardChart, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dashboardChartDo) FindInBatches(result *[]*model.DashboardChart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dashboardChartDo) Attrs(attrs ...field.AssignExpr) IDashboardChartDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dashboardChartDo) Assign(attrs ...field.AssignExpr) IDashboardChartDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dashboardChartDo) Joins(fields ...field.RelationField) IDashboardChartDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dashboardChartDo) Preload(fields ...field.RelationField) IDashboardChartDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dashboardChartDo) FirstOrInit() (*model.DashboardChart, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardChart), nil
	}
}

func (d dashboardChartDo) FirstOrCreate() (*model.DashboardChart, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardChart), nil
	}
}

func (d dashboardChartDo) FindByPage(offset int, limit int) (result []*model.DashboardChart, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dashboardChartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dashboardChartDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dashboardChartDo) Delete(models ...*model.DashboardChart) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dashboardChartDo) withDO(do gen.Dao) *dashboardChartDo {
	d.DO = *do.(*gen.DO)
	return d
}
