// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newMapLayersSchemaTable(db *gorm.DB, opts ...gen.DOOption) mapLayersSchemaTable {
	_mapLayersSchemaTable := mapLayersSchemaTable{}

	_mapLayersSchemaTable.mapLayersSchemaTableDo.UseDB(db, opts...)
	_mapLayersSchemaTable.mapLayersSchemaTableDo.UseModel(&model.MapLayersSchemaTable{})

	tableName := _mapLayersSchemaTable.mapLayersSchemaTableDo.TableName()
	_mapLayersSchemaTable.ALL = field.NewAsterisk(tableName)
	_mapLayersSchemaTable.LayerID = field.NewInt32(tableName, "layer_id")
	_mapLayersSchemaTable.TableID = field.NewInt32(tableName, "table_id")

	_mapLayersSchemaTable.fillFieldMap()

	return _mapLayersSchemaTable
}

type mapLayersSchemaTable struct {
	mapLayersSchemaTableDo

	ALL     field.Asterisk
	LayerID field.Int32
	TableID field.Int32

	fieldMap map[string]field.Expr
}

func (m mapLayersSchemaTable) Table(newTableName string) *mapLayersSchemaTable {
	m.mapLayersSchemaTableDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mapLayersSchemaTable) As(alias string) *mapLayersSchemaTable {
	m.mapLayersSchemaTableDo.DO = *(m.mapLayersSchemaTableDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mapLayersSchemaTable) updateTableName(table string) *mapLayersSchemaTable {
	m.ALL = field.NewAsterisk(table)
	m.LayerID = field.NewInt32(table, "layer_id")
	m.TableID = field.NewInt32(table, "table_id")

	m.fillFieldMap()

	return m
}

func (m *mapLayersSchemaTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mapLayersSchemaTable) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["layer_id"] = m.LayerID
	m.fieldMap["table_id"] = m.TableID
}

func (m mapLayersSchemaTable) clone(db *gorm.DB) mapLayersSchemaTable {
	m.mapLayersSchemaTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mapLayersSchemaTable) replaceDB(db *gorm.DB) mapLayersSchemaTable {
	m.mapLayersSchemaTableDo.ReplaceDB(db)
	return m
}

type mapLayersSchemaTableDo struct{ gen.DO }

type IMapLayersSchemaTableDo interface {
	gen.SubQuery
	Debug() IMapLayersSchemaTableDo
	WithContext(ctx context.Context) IMapLayersSchemaTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMapLayersSchemaTableDo
	WriteDB() IMapLayersSchemaTableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMapLayersSchemaTableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMapLayersSchemaTableDo
	Not(conds ...gen.Condition) IMapLayersSchemaTableDo
	Or(conds ...gen.Condition) IMapLayersSchemaTableDo
	Select(conds ...field.Expr) IMapLayersSchemaTableDo
	Where(conds ...gen.Condition) IMapLayersSchemaTableDo
	Order(conds ...field.Expr) IMapLayersSchemaTableDo
	Distinct(cols ...field.Expr) IMapLayersSchemaTableDo
	Omit(cols ...field.Expr) IMapLayersSchemaTableDo
	Join(table schema.Tabler, on ...field.Expr) IMapLayersSchemaTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMapLayersSchemaTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMapLayersSchemaTableDo
	Group(cols ...field.Expr) IMapLayersSchemaTableDo
	Having(conds ...gen.Condition) IMapLayersSchemaTableDo
	Limit(limit int) IMapLayersSchemaTableDo
	Offset(offset int) IMapLayersSchemaTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMapLayersSchemaTableDo
	Unscoped() IMapLayersSchemaTableDo
	Create(values ...*model.MapLayersSchemaTable) error
	CreateInBatches(values []*model.MapLayersSchemaTable, batchSize int) error
	Save(values ...*model.MapLayersSchemaTable) error
	First() (*model.MapLayersSchemaTable, error)
	Take() (*model.MapLayersSchemaTable, error)
	Last() (*model.MapLayersSchemaTable, error)
	Find() ([]*model.MapLayersSchemaTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapLayersSchemaTable, err error)
	FindInBatches(result *[]*model.MapLayersSchemaTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MapLayersSchemaTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMapLayersSchemaTableDo
	Assign(attrs ...field.AssignExpr) IMapLayersSchemaTableDo
	Joins(fields ...field.RelationField) IMapLayersSchemaTableDo
	Preload(fields ...field.RelationField) IMapLayersSchemaTableDo
	FirstOrInit() (*model.MapLayersSchemaTable, error)
	FirstOrCreate() (*model.MapLayersSchemaTable, error)
	FindByPage(offset int, limit int) (result []*model.MapLayersSchemaTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMapLayersSchemaTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mapLayersSchemaTableDo) Debug() IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Debug())
}

func (m mapLayersSchemaTableDo) WithContext(ctx context.Context) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mapLayersSchemaTableDo) ReadDB() IMapLayersSchemaTableDo {
	return m.Clauses(dbresolver.Read)
}

func (m mapLayersSchemaTableDo) WriteDB() IMapLayersSchemaTableDo {
	return m.Clauses(dbresolver.Write)
}

func (m mapLayersSchemaTableDo) Session(config *gorm.Session) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Session(config))
}

func (m mapLayersSchemaTableDo) Clauses(conds ...clause.Expression) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mapLayersSchemaTableDo) Returning(value interface{}, columns ...string) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mapLayersSchemaTableDo) Not(conds ...gen.Condition) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mapLayersSchemaTableDo) Or(conds ...gen.Condition) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mapLayersSchemaTableDo) Select(conds ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mapLayersSchemaTableDo) Where(conds ...gen.Condition) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mapLayersSchemaTableDo) Order(conds ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mapLayersSchemaTableDo) Distinct(cols ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mapLayersSchemaTableDo) Omit(cols ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mapLayersSchemaTableDo) Join(table schema.Tabler, on ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mapLayersSchemaTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mapLayersSchemaTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mapLayersSchemaTableDo) Group(cols ...field.Expr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mapLayersSchemaTableDo) Having(conds ...gen.Condition) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mapLayersSchemaTableDo) Limit(limit int) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mapLayersSchemaTableDo) Offset(offset int) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mapLayersSchemaTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mapLayersSchemaTableDo) Unscoped() IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mapLayersSchemaTableDo) Create(values ...*model.MapLayersSchemaTable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mapLayersSchemaTableDo) CreateInBatches(values []*model.MapLayersSchemaTable, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mapLayersSchemaTableDo) Save(values ...*model.MapLayersSchemaTable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mapLayersSchemaTableDo) First() (*model.MapLayersSchemaTable, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLayersSchemaTable), nil
	}
}

func (m mapLayersSchemaTableDo) Take() (*model.MapLayersSchemaTable, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLayersSchemaTable), nil
	}
}

func (m mapLayersSchemaTableDo) Last() (*model.MapLayersSchemaTable, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLayersSchemaTable), nil
	}
}

func (m mapLayersSchemaTableDo) Find() ([]*model.MapLayersSchemaTable, error) {
	result, err := m.DO.Find()
	return result.([]*model.MapLayersSchemaTable), err
}

func (m mapLayersSchemaTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapLayersSchemaTable, err error) {
	buf := make([]*model.MapLayersSchemaTable, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mapLayersSchemaTableDo) FindInBatches(result *[]*model.MapLayersSchemaTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mapLayersSchemaTableDo) Attrs(attrs ...field.AssignExpr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mapLayersSchemaTableDo) Assign(attrs ...field.AssignExpr) IMapLayersSchemaTableDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mapLayersSchemaTableDo) Joins(fields ...field.RelationField) IMapLayersSchemaTableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mapLayersSchemaTableDo) Preload(fields ...field.RelationField) IMapLayersSchemaTableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mapLayersSchemaTableDo) FirstOrInit() (*model.MapLayersSchemaTable, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLayersSchemaTable), nil
	}
}

func (m mapLayersSchemaTableDo) FirstOrCreate() (*model.MapLayersSchemaTable, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLayersSchemaTable), nil
	}
}

func (m mapLayersSchemaTableDo) FindByPage(offset int, limit int) (result []*model.MapLayersSchemaTable, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mapLayersSchemaTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mapLayersSchemaTableDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mapLayersSchemaTableDo) Delete(models ...*model.MapLayersSchemaTable) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mapLayersSchemaTableDo) withDO(do gen.Dao) *mapLayersSchemaTableDo {
	m.DO = *do.(*gen.DO)
	return m
}
