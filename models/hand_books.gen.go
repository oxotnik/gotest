// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newHandBook(db *gorm.DB, opts ...gen.DOOption) handBook {
	_handBook := handBook{}

	_handBook.handBookDo.UseDB(db, opts...)
	_handBook.handBookDo.UseModel(&model.HandBook{})

	tableName := _handBook.handBookDo.TableName()
	_handBook.ALL = field.NewAsterisk(tableName)
	_handBook.ID = field.NewInt32(tableName, "id")
	_handBook.HandBookTC = field.NewString(tableName, "HandBook_TC")
	_handBook.Title = field.NewString(tableName, "title")
	_handBook.Priority = field.NewInt32(tableName, "priority")
	_handBook.ParentID = field.NewInt32(tableName, "parentId")
	_handBook.Sys = field.NewInt64(tableName, "sys")
	_handBook.IsArchive = field.NewBool(tableName, "is_archive")
	_handBook.DateCreate = field.NewTime(tableName, "date_create")
	_handBook.KeyTc = field.NewString(tableName, "key_tc")
	_handBook.ParamSmalInt = field.NewInt32(tableName, "param_smal_int")
	_handBook.Properties = field.NewString(tableName, "properties")

	_handBook.fillFieldMap()

	return _handBook
}

type handBook struct {
	handBookDo

	ALL          field.Asterisk
	ID           field.Int32
	HandBookTC   field.String
	Title        field.String
	Priority     field.Int32
	ParentID     field.Int32
	Sys          field.Int64
	IsArchive    field.Bool
	DateCreate   field.Time
	KeyTc        field.String
	ParamSmalInt field.Int32
	Properties   field.String

	fieldMap map[string]field.Expr
}

func (h handBook) Table(newTableName string) *handBook {
	h.handBookDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h handBook) As(alias string) *handBook {
	h.handBookDo.DO = *(h.handBookDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *handBook) updateTableName(table string) *handBook {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "id")
	h.HandBookTC = field.NewString(table, "HandBook_TC")
	h.Title = field.NewString(table, "title")
	h.Priority = field.NewInt32(table, "priority")
	h.ParentID = field.NewInt32(table, "parentId")
	h.Sys = field.NewInt64(table, "sys")
	h.IsArchive = field.NewBool(table, "is_archive")
	h.DateCreate = field.NewTime(table, "date_create")
	h.KeyTc = field.NewString(table, "key_tc")
	h.ParamSmalInt = field.NewInt32(table, "param_smal_int")
	h.Properties = field.NewString(table, "properties")

	h.fillFieldMap()

	return h
}

func (h *handBook) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *handBook) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 11)
	h.fieldMap["id"] = h.ID
	h.fieldMap["HandBook_TC"] = h.HandBookTC
	h.fieldMap["title"] = h.Title
	h.fieldMap["priority"] = h.Priority
	h.fieldMap["parentId"] = h.ParentID
	h.fieldMap["sys"] = h.Sys
	h.fieldMap["is_archive"] = h.IsArchive
	h.fieldMap["date_create"] = h.DateCreate
	h.fieldMap["key_tc"] = h.KeyTc
	h.fieldMap["param_smal_int"] = h.ParamSmalInt
	h.fieldMap["properties"] = h.Properties
}

func (h handBook) clone(db *gorm.DB) handBook {
	h.handBookDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h handBook) replaceDB(db *gorm.DB) handBook {
	h.handBookDo.ReplaceDB(db)
	return h
}

type handBookDo struct{ gen.DO }

type IHandBookDo interface {
	gen.SubQuery
	Debug() IHandBookDo
	WithContext(ctx context.Context) IHandBookDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHandBookDo
	WriteDB() IHandBookDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHandBookDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHandBookDo
	Not(conds ...gen.Condition) IHandBookDo
	Or(conds ...gen.Condition) IHandBookDo
	Select(conds ...field.Expr) IHandBookDo
	Where(conds ...gen.Condition) IHandBookDo
	Order(conds ...field.Expr) IHandBookDo
	Distinct(cols ...field.Expr) IHandBookDo
	Omit(cols ...field.Expr) IHandBookDo
	Join(table schema.Tabler, on ...field.Expr) IHandBookDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHandBookDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHandBookDo
	Group(cols ...field.Expr) IHandBookDo
	Having(conds ...gen.Condition) IHandBookDo
	Limit(limit int) IHandBookDo
	Offset(offset int) IHandBookDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHandBookDo
	Unscoped() IHandBookDo
	Create(values ...*model.HandBook) error
	CreateInBatches(values []*model.HandBook, batchSize int) error
	Save(values ...*model.HandBook) error
	First() (*model.HandBook, error)
	Take() (*model.HandBook, error)
	Last() (*model.HandBook, error)
	Find() ([]*model.HandBook, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HandBook, err error)
	FindInBatches(result *[]*model.HandBook, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HandBook) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHandBookDo
	Assign(attrs ...field.AssignExpr) IHandBookDo
	Joins(fields ...field.RelationField) IHandBookDo
	Preload(fields ...field.RelationField) IHandBookDo
	FirstOrInit() (*model.HandBook, error)
	FirstOrCreate() (*model.HandBook, error)
	FindByPage(offset int, limit int) (result []*model.HandBook, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHandBookDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h handBookDo) Debug() IHandBookDo {
	return h.withDO(h.DO.Debug())
}

func (h handBookDo) WithContext(ctx context.Context) IHandBookDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h handBookDo) ReadDB() IHandBookDo {
	return h.Clauses(dbresolver.Read)
}

func (h handBookDo) WriteDB() IHandBookDo {
	return h.Clauses(dbresolver.Write)
}

func (h handBookDo) Session(config *gorm.Session) IHandBookDo {
	return h.withDO(h.DO.Session(config))
}

func (h handBookDo) Clauses(conds ...clause.Expression) IHandBookDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h handBookDo) Returning(value interface{}, columns ...string) IHandBookDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h handBookDo) Not(conds ...gen.Condition) IHandBookDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h handBookDo) Or(conds ...gen.Condition) IHandBookDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h handBookDo) Select(conds ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h handBookDo) Where(conds ...gen.Condition) IHandBookDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h handBookDo) Order(conds ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h handBookDo) Distinct(cols ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h handBookDo) Omit(cols ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h handBookDo) Join(table schema.Tabler, on ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h handBookDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h handBookDo) RightJoin(table schema.Tabler, on ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h handBookDo) Group(cols ...field.Expr) IHandBookDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h handBookDo) Having(conds ...gen.Condition) IHandBookDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h handBookDo) Limit(limit int) IHandBookDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h handBookDo) Offset(offset int) IHandBookDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h handBookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHandBookDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h handBookDo) Unscoped() IHandBookDo {
	return h.withDO(h.DO.Unscoped())
}

func (h handBookDo) Create(values ...*model.HandBook) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h handBookDo) CreateInBatches(values []*model.HandBook, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h handBookDo) Save(values ...*model.HandBook) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h handBookDo) First() (*model.HandBook, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBook), nil
	}
}

func (h handBookDo) Take() (*model.HandBook, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBook), nil
	}
}

func (h handBookDo) Last() (*model.HandBook, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBook), nil
	}
}

func (h handBookDo) Find() ([]*model.HandBook, error) {
	result, err := h.DO.Find()
	return result.([]*model.HandBook), err
}

func (h handBookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HandBook, err error) {
	buf := make([]*model.HandBook, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h handBookDo) FindInBatches(result *[]*model.HandBook, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h handBookDo) Attrs(attrs ...field.AssignExpr) IHandBookDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h handBookDo) Assign(attrs ...field.AssignExpr) IHandBookDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h handBookDo) Joins(fields ...field.RelationField) IHandBookDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h handBookDo) Preload(fields ...field.RelationField) IHandBookDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h handBookDo) FirstOrInit() (*model.HandBook, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBook), nil
	}
}

func (h handBookDo) FirstOrCreate() (*model.HandBook, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBook), nil
	}
}

func (h handBookDo) FindByPage(offset int, limit int) (result []*model.HandBook, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h handBookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h handBookDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h handBookDo) Delete(models ...*model.HandBook) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *handBookDo) withDO(do gen.Dao) *handBookDo {
	h.DO = *do.(*gen.DO)
	return h
}
