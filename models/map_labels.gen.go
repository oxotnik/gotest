// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newMapLabel(db *gorm.DB, opts ...gen.DOOption) mapLabel {
	_mapLabel := mapLabel{}

	_mapLabel.mapLabelDo.UseDB(db, opts...)
	_mapLabel.mapLabelDo.UseModel(&model.MapLabel{})

	tableName := _mapLabel.mapLabelDo.TableName()
	_mapLabel.ALL = field.NewAsterisk(tableName)
	_mapLabel.ID = field.NewInt32(tableName, "id")
	_mapLabel.DateCreate = field.NewTime(tableName, "date_create")
	_mapLabel.DateLastChange = field.NewTime(tableName, "date_last_change")
	_mapLabel.CreaterID = field.NewInt64(tableName, "creater_id")
	_mapLabel.ChangerID = field.NewInt64(tableName, "changer_id")
	_mapLabel.IsArchive = field.NewBool(tableName, "is_archive")
	_mapLabel.Title = field.NewString(tableName, "title")
	_mapLabel.ProjectID = field.NewInt32(tableName, "project_id")
	_mapLabel.LayerID = field.NewInt32(tableName, "layer_id")
	_mapLabel.StyleJSON = field.NewString(tableName, "style_json")

	_mapLabel.fillFieldMap()

	return _mapLabel
}

type mapLabel struct {
	mapLabelDo

	ALL            field.Asterisk
	ID             field.Int32
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64
	IsArchive      field.Bool
	Title          field.String
	ProjectID      field.Int32
	LayerID        field.Int32
	StyleJSON      field.String

	fieldMap map[string]field.Expr
}

func (m mapLabel) Table(newTableName string) *mapLabel {
	m.mapLabelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mapLabel) As(alias string) *mapLabel {
	m.mapLabelDo.DO = *(m.mapLabelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mapLabel) updateTableName(table string) *mapLabel {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.DateCreate = field.NewTime(table, "date_create")
	m.DateLastChange = field.NewTime(table, "date_last_change")
	m.CreaterID = field.NewInt64(table, "creater_id")
	m.ChangerID = field.NewInt64(table, "changer_id")
	m.IsArchive = field.NewBool(table, "is_archive")
	m.Title = field.NewString(table, "title")
	m.ProjectID = field.NewInt32(table, "project_id")
	m.LayerID = field.NewInt32(table, "layer_id")
	m.StyleJSON = field.NewString(table, "style_json")

	m.fillFieldMap()

	return m
}

func (m *mapLabel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mapLabel) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.ID
	m.fieldMap["date_create"] = m.DateCreate
	m.fieldMap["date_last_change"] = m.DateLastChange
	m.fieldMap["creater_id"] = m.CreaterID
	m.fieldMap["changer_id"] = m.ChangerID
	m.fieldMap["is_archive"] = m.IsArchive
	m.fieldMap["title"] = m.Title
	m.fieldMap["project_id"] = m.ProjectID
	m.fieldMap["layer_id"] = m.LayerID
	m.fieldMap["style_json"] = m.StyleJSON
}

func (m mapLabel) clone(db *gorm.DB) mapLabel {
	m.mapLabelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mapLabel) replaceDB(db *gorm.DB) mapLabel {
	m.mapLabelDo.ReplaceDB(db)
	return m
}

type mapLabelDo struct{ gen.DO }

type IMapLabelDo interface {
	gen.SubQuery
	Debug() IMapLabelDo
	WithContext(ctx context.Context) IMapLabelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMapLabelDo
	WriteDB() IMapLabelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMapLabelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMapLabelDo
	Not(conds ...gen.Condition) IMapLabelDo
	Or(conds ...gen.Condition) IMapLabelDo
	Select(conds ...field.Expr) IMapLabelDo
	Where(conds ...gen.Condition) IMapLabelDo
	Order(conds ...field.Expr) IMapLabelDo
	Distinct(cols ...field.Expr) IMapLabelDo
	Omit(cols ...field.Expr) IMapLabelDo
	Join(table schema.Tabler, on ...field.Expr) IMapLabelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMapLabelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMapLabelDo
	Group(cols ...field.Expr) IMapLabelDo
	Having(conds ...gen.Condition) IMapLabelDo
	Limit(limit int) IMapLabelDo
	Offset(offset int) IMapLabelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMapLabelDo
	Unscoped() IMapLabelDo
	Create(values ...*model.MapLabel) error
	CreateInBatches(values []*model.MapLabel, batchSize int) error
	Save(values ...*model.MapLabel) error
	First() (*model.MapLabel, error)
	Take() (*model.MapLabel, error)
	Last() (*model.MapLabel, error)
	Find() ([]*model.MapLabel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapLabel, err error)
	FindInBatches(result *[]*model.MapLabel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MapLabel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMapLabelDo
	Assign(attrs ...field.AssignExpr) IMapLabelDo
	Joins(fields ...field.RelationField) IMapLabelDo
	Preload(fields ...field.RelationField) IMapLabelDo
	FirstOrInit() (*model.MapLabel, error)
	FirstOrCreate() (*model.MapLabel, error)
	FindByPage(offset int, limit int) (result []*model.MapLabel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMapLabelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mapLabelDo) Debug() IMapLabelDo {
	return m.withDO(m.DO.Debug())
}

func (m mapLabelDo) WithContext(ctx context.Context) IMapLabelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mapLabelDo) ReadDB() IMapLabelDo {
	return m.Clauses(dbresolver.Read)
}

func (m mapLabelDo) WriteDB() IMapLabelDo {
	return m.Clauses(dbresolver.Write)
}

func (m mapLabelDo) Session(config *gorm.Session) IMapLabelDo {
	return m.withDO(m.DO.Session(config))
}

func (m mapLabelDo) Clauses(conds ...clause.Expression) IMapLabelDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mapLabelDo) Returning(value interface{}, columns ...string) IMapLabelDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mapLabelDo) Not(conds ...gen.Condition) IMapLabelDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mapLabelDo) Or(conds ...gen.Condition) IMapLabelDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mapLabelDo) Select(conds ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mapLabelDo) Where(conds ...gen.Condition) IMapLabelDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mapLabelDo) Order(conds ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mapLabelDo) Distinct(cols ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mapLabelDo) Omit(cols ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mapLabelDo) Join(table schema.Tabler, on ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mapLabelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mapLabelDo) RightJoin(table schema.Tabler, on ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mapLabelDo) Group(cols ...field.Expr) IMapLabelDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mapLabelDo) Having(conds ...gen.Condition) IMapLabelDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mapLabelDo) Limit(limit int) IMapLabelDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mapLabelDo) Offset(offset int) IMapLabelDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mapLabelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMapLabelDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mapLabelDo) Unscoped() IMapLabelDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mapLabelDo) Create(values ...*model.MapLabel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mapLabelDo) CreateInBatches(values []*model.MapLabel, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mapLabelDo) Save(values ...*model.MapLabel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mapLabelDo) First() (*model.MapLabel, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLabel), nil
	}
}

func (m mapLabelDo) Take() (*model.MapLabel, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLabel), nil
	}
}

func (m mapLabelDo) Last() (*model.MapLabel, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLabel), nil
	}
}

func (m mapLabelDo) Find() ([]*model.MapLabel, error) {
	result, err := m.DO.Find()
	return result.([]*model.MapLabel), err
}

func (m mapLabelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapLabel, err error) {
	buf := make([]*model.MapLabel, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mapLabelDo) FindInBatches(result *[]*model.MapLabel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mapLabelDo) Attrs(attrs ...field.AssignExpr) IMapLabelDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mapLabelDo) Assign(attrs ...field.AssignExpr) IMapLabelDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mapLabelDo) Joins(fields ...field.RelationField) IMapLabelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mapLabelDo) Preload(fields ...field.RelationField) IMapLabelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mapLabelDo) FirstOrInit() (*model.MapLabel, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLabel), nil
	}
}

func (m mapLabelDo) FirstOrCreate() (*model.MapLabel, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapLabel), nil
	}
}

func (m mapLabelDo) FindByPage(offset int, limit int) (result []*model.MapLabel, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mapLabelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mapLabelDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mapLabelDo) Delete(models ...*model.MapLabel) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mapLabelDo) withDO(do gen.Dao) *mapLabelDo {
	m.DO = *do.(*gen.DO)
	return m
}
