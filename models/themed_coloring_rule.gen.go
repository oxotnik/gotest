// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newThemedColoringRule(db *gorm.DB, opts ...gen.DOOption) themedColoringRule {
	_themedColoringRule := themedColoringRule{}

	_themedColoringRule.themedColoringRuleDo.UseDB(db, opts...)
	_themedColoringRule.themedColoringRuleDo.UseModel(&model.ThemedColoringRule{})

	tableName := _themedColoringRule.themedColoringRuleDo.TableName()
	_themedColoringRule.ALL = field.NewAsterisk(tableName)
	_themedColoringRule.ID = field.NewInt32(tableName, "id")
	_themedColoringRule.DateCreate = field.NewTime(tableName, "date_create")
	_themedColoringRule.DateLastChange = field.NewTime(tableName, "date_last_change")
	_themedColoringRule.CreaterID = field.NewInt32(tableName, "creater_id")
	_themedColoringRule.ChangerID = field.NewInt32(tableName, "changer_id")
	_themedColoringRule.ThemedColoringID = field.NewInt32(tableName, "themed_coloring_id")
	_themedColoringRule.LibraryStyleID = field.NewInt32(tableName, "library_style_id")
	_themedColoringRule.IsArchive = field.NewBool(tableName, "is_archive")
	_themedColoringRule.Title = field.NewString(tableName, "title")
	_themedColoringRule.Values = field.NewString(tableName, "values")

	_themedColoringRule.fillFieldMap()

	return _themedColoringRule
}

type themedColoringRule struct {
	themedColoringRuleDo

	ALL              field.Asterisk
	ID               field.Int32
	DateCreate       field.Time
	DateLastChange   field.Time
	CreaterID        field.Int32
	ChangerID        field.Int32
	ThemedColoringID field.Int32
	LibraryStyleID   field.Int32
	IsArchive        field.Bool
	Title            field.String
	Values           field.String

	fieldMap map[string]field.Expr
}

func (t themedColoringRule) Table(newTableName string) *themedColoringRule {
	t.themedColoringRuleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t themedColoringRule) As(alias string) *themedColoringRule {
	t.themedColoringRuleDo.DO = *(t.themedColoringRuleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *themedColoringRule) updateTableName(table string) *themedColoringRule {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.DateCreate = field.NewTime(table, "date_create")
	t.DateLastChange = field.NewTime(table, "date_last_change")
	t.CreaterID = field.NewInt32(table, "creater_id")
	t.ChangerID = field.NewInt32(table, "changer_id")
	t.ThemedColoringID = field.NewInt32(table, "themed_coloring_id")
	t.LibraryStyleID = field.NewInt32(table, "library_style_id")
	t.IsArchive = field.NewBool(table, "is_archive")
	t.Title = field.NewString(table, "title")
	t.Values = field.NewString(table, "values")

	t.fillFieldMap()

	return t
}

func (t *themedColoringRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *themedColoringRule) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["date_create"] = t.DateCreate
	t.fieldMap["date_last_change"] = t.DateLastChange
	t.fieldMap["creater_id"] = t.CreaterID
	t.fieldMap["changer_id"] = t.ChangerID
	t.fieldMap["themed_coloring_id"] = t.ThemedColoringID
	t.fieldMap["library_style_id"] = t.LibraryStyleID
	t.fieldMap["is_archive"] = t.IsArchive
	t.fieldMap["title"] = t.Title
	t.fieldMap["values"] = t.Values
}

func (t themedColoringRule) clone(db *gorm.DB) themedColoringRule {
	t.themedColoringRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t themedColoringRule) replaceDB(db *gorm.DB) themedColoringRule {
	t.themedColoringRuleDo.ReplaceDB(db)
	return t
}

type themedColoringRuleDo struct{ gen.DO }

type IThemedColoringRuleDo interface {
	gen.SubQuery
	Debug() IThemedColoringRuleDo
	WithContext(ctx context.Context) IThemedColoringRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThemedColoringRuleDo
	WriteDB() IThemedColoringRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThemedColoringRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThemedColoringRuleDo
	Not(conds ...gen.Condition) IThemedColoringRuleDo
	Or(conds ...gen.Condition) IThemedColoringRuleDo
	Select(conds ...field.Expr) IThemedColoringRuleDo
	Where(conds ...gen.Condition) IThemedColoringRuleDo
	Order(conds ...field.Expr) IThemedColoringRuleDo
	Distinct(cols ...field.Expr) IThemedColoringRuleDo
	Omit(cols ...field.Expr) IThemedColoringRuleDo
	Join(table schema.Tabler, on ...field.Expr) IThemedColoringRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThemedColoringRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThemedColoringRuleDo
	Group(cols ...field.Expr) IThemedColoringRuleDo
	Having(conds ...gen.Condition) IThemedColoringRuleDo
	Limit(limit int) IThemedColoringRuleDo
	Offset(offset int) IThemedColoringRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThemedColoringRuleDo
	Unscoped() IThemedColoringRuleDo
	Create(values ...*model.ThemedColoringRule) error
	CreateInBatches(values []*model.ThemedColoringRule, batchSize int) error
	Save(values ...*model.ThemedColoringRule) error
	First() (*model.ThemedColoringRule, error)
	Take() (*model.ThemedColoringRule, error)
	Last() (*model.ThemedColoringRule, error)
	Find() ([]*model.ThemedColoringRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThemedColoringRule, err error)
	FindInBatches(result *[]*model.ThemedColoringRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ThemedColoringRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThemedColoringRuleDo
	Assign(attrs ...field.AssignExpr) IThemedColoringRuleDo
	Joins(fields ...field.RelationField) IThemedColoringRuleDo
	Preload(fields ...field.RelationField) IThemedColoringRuleDo
	FirstOrInit() (*model.ThemedColoringRule, error)
	FirstOrCreate() (*model.ThemedColoringRule, error)
	FindByPage(offset int, limit int) (result []*model.ThemedColoringRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThemedColoringRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t themedColoringRuleDo) Debug() IThemedColoringRuleDo {
	return t.withDO(t.DO.Debug())
}

func (t themedColoringRuleDo) WithContext(ctx context.Context) IThemedColoringRuleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t themedColoringRuleDo) ReadDB() IThemedColoringRuleDo {
	return t.Clauses(dbresolver.Read)
}

func (t themedColoringRuleDo) WriteDB() IThemedColoringRuleDo {
	return t.Clauses(dbresolver.Write)
}

func (t themedColoringRuleDo) Session(config *gorm.Session) IThemedColoringRuleDo {
	return t.withDO(t.DO.Session(config))
}

func (t themedColoringRuleDo) Clauses(conds ...clause.Expression) IThemedColoringRuleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t themedColoringRuleDo) Returning(value interface{}, columns ...string) IThemedColoringRuleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t themedColoringRuleDo) Not(conds ...gen.Condition) IThemedColoringRuleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t themedColoringRuleDo) Or(conds ...gen.Condition) IThemedColoringRuleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t themedColoringRuleDo) Select(conds ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t themedColoringRuleDo) Where(conds ...gen.Condition) IThemedColoringRuleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t themedColoringRuleDo) Order(conds ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t themedColoringRuleDo) Distinct(cols ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t themedColoringRuleDo) Omit(cols ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t themedColoringRuleDo) Join(table schema.Tabler, on ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t themedColoringRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t themedColoringRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t themedColoringRuleDo) Group(cols ...field.Expr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t themedColoringRuleDo) Having(conds ...gen.Condition) IThemedColoringRuleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t themedColoringRuleDo) Limit(limit int) IThemedColoringRuleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t themedColoringRuleDo) Offset(offset int) IThemedColoringRuleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t themedColoringRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThemedColoringRuleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t themedColoringRuleDo) Unscoped() IThemedColoringRuleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t themedColoringRuleDo) Create(values ...*model.ThemedColoringRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t themedColoringRuleDo) CreateInBatches(values []*model.ThemedColoringRule, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t themedColoringRuleDo) Save(values ...*model.ThemedColoringRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t themedColoringRuleDo) First() (*model.ThemedColoringRule, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoringRule), nil
	}
}

func (t themedColoringRuleDo) Take() (*model.ThemedColoringRule, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoringRule), nil
	}
}

func (t themedColoringRuleDo) Last() (*model.ThemedColoringRule, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoringRule), nil
	}
}

func (t themedColoringRuleDo) Find() ([]*model.ThemedColoringRule, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThemedColoringRule), err
}

func (t themedColoringRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThemedColoringRule, err error) {
	buf := make([]*model.ThemedColoringRule, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t themedColoringRuleDo) FindInBatches(result *[]*model.ThemedColoringRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t themedColoringRuleDo) Attrs(attrs ...field.AssignExpr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t themedColoringRuleDo) Assign(attrs ...field.AssignExpr) IThemedColoringRuleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t themedColoringRuleDo) Joins(fields ...field.RelationField) IThemedColoringRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t themedColoringRuleDo) Preload(fields ...field.RelationField) IThemedColoringRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t themedColoringRuleDo) FirstOrInit() (*model.ThemedColoringRule, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoringRule), nil
	}
}

func (t themedColoringRuleDo) FirstOrCreate() (*model.ThemedColoringRule, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoringRule), nil
	}
}

func (t themedColoringRuleDo) FindByPage(offset int, limit int) (result []*model.ThemedColoringRule, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t themedColoringRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t themedColoringRuleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t themedColoringRuleDo) Delete(models ...*model.ThemedColoringRule) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *themedColoringRuleDo) withDO(do gen.Dao) *themedColoringRuleDo {
	t.DO = *do.(*gen.DO)
	return t
}
