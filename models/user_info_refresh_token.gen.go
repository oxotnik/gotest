// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newUserInfoRefreshToken(db *gorm.DB, opts ...gen.DOOption) userInfoRefreshToken {
	_userInfoRefreshToken := userInfoRefreshToken{}

	_userInfoRefreshToken.userInfoRefreshTokenDo.UseDB(db, opts...)
	_userInfoRefreshToken.userInfoRefreshTokenDo.UseModel(&model.UserInfoRefreshToken{})

	tableName := _userInfoRefreshToken.userInfoRefreshTokenDo.TableName()
	_userInfoRefreshToken.ALL = field.NewAsterisk(tableName)
	_userInfoRefreshToken.ID = field.NewInt64(tableName, "id")
	_userInfoRefreshToken.UserID = field.NewInt64(tableName, "user_id")
	_userInfoRefreshToken.DateCreate = field.NewTime(tableName, "date_create")
	_userInfoRefreshToken.CreatedByIP = field.NewString(tableName, "created_by_ip")
	_userInfoRefreshToken.Token = field.NewString(tableName, "token")
	_userInfoRefreshToken.Expires = field.NewTime(tableName, "expires")
	_userInfoRefreshToken.RevokedDate = field.NewTime(tableName, "revoked_date")
	_userInfoRefreshToken.RevokedByIP = field.NewString(tableName, "revoked_by_ip")
	_userInfoRefreshToken.ReplacedByToken = field.NewString(tableName, "replaced_by_token")

	_userInfoRefreshToken.fillFieldMap()

	return _userInfoRefreshToken
}

type userInfoRefreshToken struct {
	userInfoRefreshTokenDo

	ALL             field.Asterisk
	ID              field.Int64
	UserID          field.Int64
	DateCreate      field.Time
	CreatedByIP     field.String
	Token           field.String
	Expires         field.Time
	RevokedDate     field.Time
	RevokedByIP     field.String
	ReplacedByToken field.String

	fieldMap map[string]field.Expr
}

func (u userInfoRefreshToken) Table(newTableName string) *userInfoRefreshToken {
	u.userInfoRefreshTokenDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInfoRefreshToken) As(alias string) *userInfoRefreshToken {
	u.userInfoRefreshTokenDo.DO = *(u.userInfoRefreshTokenDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInfoRefreshToken) updateTableName(table string) *userInfoRefreshToken {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.DateCreate = field.NewTime(table, "date_create")
	u.CreatedByIP = field.NewString(table, "created_by_ip")
	u.Token = field.NewString(table, "token")
	u.Expires = field.NewTime(table, "expires")
	u.RevokedDate = field.NewTime(table, "revoked_date")
	u.RevokedByIP = field.NewString(table, "revoked_by_ip")
	u.ReplacedByToken = field.NewString(table, "replaced_by_token")

	u.fillFieldMap()

	return u
}

func (u *userInfoRefreshToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInfoRefreshToken) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["date_create"] = u.DateCreate
	u.fieldMap["created_by_ip"] = u.CreatedByIP
	u.fieldMap["token"] = u.Token
	u.fieldMap["expires"] = u.Expires
	u.fieldMap["revoked_date"] = u.RevokedDate
	u.fieldMap["revoked_by_ip"] = u.RevokedByIP
	u.fieldMap["replaced_by_token"] = u.ReplacedByToken
}

func (u userInfoRefreshToken) clone(db *gorm.DB) userInfoRefreshToken {
	u.userInfoRefreshTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInfoRefreshToken) replaceDB(db *gorm.DB) userInfoRefreshToken {
	u.userInfoRefreshTokenDo.ReplaceDB(db)
	return u
}

type userInfoRefreshTokenDo struct{ gen.DO }

type IUserInfoRefreshTokenDo interface {
	gen.SubQuery
	Debug() IUserInfoRefreshTokenDo
	WithContext(ctx context.Context) IUserInfoRefreshTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInfoRefreshTokenDo
	WriteDB() IUserInfoRefreshTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInfoRefreshTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInfoRefreshTokenDo
	Not(conds ...gen.Condition) IUserInfoRefreshTokenDo
	Or(conds ...gen.Condition) IUserInfoRefreshTokenDo
	Select(conds ...field.Expr) IUserInfoRefreshTokenDo
	Where(conds ...gen.Condition) IUserInfoRefreshTokenDo
	Order(conds ...field.Expr) IUserInfoRefreshTokenDo
	Distinct(cols ...field.Expr) IUserInfoRefreshTokenDo
	Omit(cols ...field.Expr) IUserInfoRefreshTokenDo
	Join(table schema.Tabler, on ...field.Expr) IUserInfoRefreshTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoRefreshTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoRefreshTokenDo
	Group(cols ...field.Expr) IUserInfoRefreshTokenDo
	Having(conds ...gen.Condition) IUserInfoRefreshTokenDo
	Limit(limit int) IUserInfoRefreshTokenDo
	Offset(offset int) IUserInfoRefreshTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoRefreshTokenDo
	Unscoped() IUserInfoRefreshTokenDo
	Create(values ...*model.UserInfoRefreshToken) error
	CreateInBatches(values []*model.UserInfoRefreshToken, batchSize int) error
	Save(values ...*model.UserInfoRefreshToken) error
	First() (*model.UserInfoRefreshToken, error)
	Take() (*model.UserInfoRefreshToken, error)
	Last() (*model.UserInfoRefreshToken, error)
	Find() ([]*model.UserInfoRefreshToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoRefreshToken, err error)
	FindInBatches(result *[]*model.UserInfoRefreshToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserInfoRefreshToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInfoRefreshTokenDo
	Assign(attrs ...field.AssignExpr) IUserInfoRefreshTokenDo
	Joins(fields ...field.RelationField) IUserInfoRefreshTokenDo
	Preload(fields ...field.RelationField) IUserInfoRefreshTokenDo
	FirstOrInit() (*model.UserInfoRefreshToken, error)
	FirstOrCreate() (*model.UserInfoRefreshToken, error)
	FindByPage(offset int, limit int) (result []*model.UserInfoRefreshToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInfoRefreshTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userInfoRefreshTokenDo) Debug() IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Debug())
}

func (u userInfoRefreshTokenDo) WithContext(ctx context.Context) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInfoRefreshTokenDo) ReadDB() IUserInfoRefreshTokenDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInfoRefreshTokenDo) WriteDB() IUserInfoRefreshTokenDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInfoRefreshTokenDo) Session(config *gorm.Session) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Session(config))
}

func (u userInfoRefreshTokenDo) Clauses(conds ...clause.Expression) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInfoRefreshTokenDo) Returning(value interface{}, columns ...string) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInfoRefreshTokenDo) Not(conds ...gen.Condition) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInfoRefreshTokenDo) Or(conds ...gen.Condition) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInfoRefreshTokenDo) Select(conds ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInfoRefreshTokenDo) Where(conds ...gen.Condition) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInfoRefreshTokenDo) Order(conds ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInfoRefreshTokenDo) Distinct(cols ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInfoRefreshTokenDo) Omit(cols ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInfoRefreshTokenDo) Join(table schema.Tabler, on ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInfoRefreshTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInfoRefreshTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInfoRefreshTokenDo) Group(cols ...field.Expr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInfoRefreshTokenDo) Having(conds ...gen.Condition) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInfoRefreshTokenDo) Limit(limit int) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInfoRefreshTokenDo) Offset(offset int) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInfoRefreshTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInfoRefreshTokenDo) Unscoped() IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInfoRefreshTokenDo) Create(values ...*model.UserInfoRefreshToken) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInfoRefreshTokenDo) CreateInBatches(values []*model.UserInfoRefreshToken, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInfoRefreshTokenDo) Save(values ...*model.UserInfoRefreshToken) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInfoRefreshTokenDo) First() (*model.UserInfoRefreshToken, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoRefreshToken), nil
	}
}

func (u userInfoRefreshTokenDo) Take() (*model.UserInfoRefreshToken, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoRefreshToken), nil
	}
}

func (u userInfoRefreshTokenDo) Last() (*model.UserInfoRefreshToken, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoRefreshToken), nil
	}
}

func (u userInfoRefreshTokenDo) Find() ([]*model.UserInfoRefreshToken, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInfoRefreshToken), err
}

func (u userInfoRefreshTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoRefreshToken, err error) {
	buf := make([]*model.UserInfoRefreshToken, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInfoRefreshTokenDo) FindInBatches(result *[]*model.UserInfoRefreshToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInfoRefreshTokenDo) Attrs(attrs ...field.AssignExpr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInfoRefreshTokenDo) Assign(attrs ...field.AssignExpr) IUserInfoRefreshTokenDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInfoRefreshTokenDo) Joins(fields ...field.RelationField) IUserInfoRefreshTokenDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInfoRefreshTokenDo) Preload(fields ...field.RelationField) IUserInfoRefreshTokenDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInfoRefreshTokenDo) FirstOrInit() (*model.UserInfoRefreshToken, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoRefreshToken), nil
	}
}

func (u userInfoRefreshTokenDo) FirstOrCreate() (*model.UserInfoRefreshToken, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoRefreshToken), nil
	}
}

func (u userInfoRefreshTokenDo) FindByPage(offset int, limit int) (result []*model.UserInfoRefreshToken, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInfoRefreshTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInfoRefreshTokenDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInfoRefreshTokenDo) Delete(models ...*model.UserInfoRefreshToken) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInfoRefreshTokenDo) withDO(do gen.Dao) *userInfoRefreshTokenDo {
	u.DO = *do.(*gen.DO)
	return u
}
