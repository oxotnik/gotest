// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAspNetUserLogin(db *gorm.DB, opts ...gen.DOOption) aspNetUserLogin {
	_aspNetUserLogin := aspNetUserLogin{}

	_aspNetUserLogin.aspNetUserLoginDo.UseDB(db, opts...)
	_aspNetUserLogin.aspNetUserLoginDo.UseModel(&model.AspNetUserLogin{})

	tableName := _aspNetUserLogin.aspNetUserLoginDo.TableName()
	_aspNetUserLogin.ALL = field.NewAsterisk(tableName)
	_aspNetUserLogin.LoginProvider = field.NewString(tableName, "LoginProvider")
	_aspNetUserLogin.ProviderKey = field.NewString(tableName, "ProviderKey")
	_aspNetUserLogin.ProviderDisplayName = field.NewString(tableName, "ProviderDisplayName")
	_aspNetUserLogin.UserID = field.NewString(tableName, "UserId")

	_aspNetUserLogin.fillFieldMap()

	return _aspNetUserLogin
}

type aspNetUserLogin struct {
	aspNetUserLoginDo

	ALL                 field.Asterisk
	LoginProvider       field.String
	ProviderKey         field.String
	ProviderDisplayName field.String
	UserID              field.String

	fieldMap map[string]field.Expr
}

func (a aspNetUserLogin) Table(newTableName string) *aspNetUserLogin {
	a.aspNetUserLoginDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aspNetUserLogin) As(alias string) *aspNetUserLogin {
	a.aspNetUserLoginDo.DO = *(a.aspNetUserLoginDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aspNetUserLogin) updateTableName(table string) *aspNetUserLogin {
	a.ALL = field.NewAsterisk(table)
	a.LoginProvider = field.NewString(table, "LoginProvider")
	a.ProviderKey = field.NewString(table, "ProviderKey")
	a.ProviderDisplayName = field.NewString(table, "ProviderDisplayName")
	a.UserID = field.NewString(table, "UserId")

	a.fillFieldMap()

	return a
}

func (a *aspNetUserLogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aspNetUserLogin) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["LoginProvider"] = a.LoginProvider
	a.fieldMap["ProviderKey"] = a.ProviderKey
	a.fieldMap["ProviderDisplayName"] = a.ProviderDisplayName
	a.fieldMap["UserId"] = a.UserID
}

func (a aspNetUserLogin) clone(db *gorm.DB) aspNetUserLogin {
	a.aspNetUserLoginDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aspNetUserLogin) replaceDB(db *gorm.DB) aspNetUserLogin {
	a.aspNetUserLoginDo.ReplaceDB(db)
	return a
}

type aspNetUserLoginDo struct{ gen.DO }

type IAspNetUserLoginDo interface {
	gen.SubQuery
	Debug() IAspNetUserLoginDo
	WithContext(ctx context.Context) IAspNetUserLoginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAspNetUserLoginDo
	WriteDB() IAspNetUserLoginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAspNetUserLoginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAspNetUserLoginDo
	Not(conds ...gen.Condition) IAspNetUserLoginDo
	Or(conds ...gen.Condition) IAspNetUserLoginDo
	Select(conds ...field.Expr) IAspNetUserLoginDo
	Where(conds ...gen.Condition) IAspNetUserLoginDo
	Order(conds ...field.Expr) IAspNetUserLoginDo
	Distinct(cols ...field.Expr) IAspNetUserLoginDo
	Omit(cols ...field.Expr) IAspNetUserLoginDo
	Join(table schema.Tabler, on ...field.Expr) IAspNetUserLoginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserLoginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserLoginDo
	Group(cols ...field.Expr) IAspNetUserLoginDo
	Having(conds ...gen.Condition) IAspNetUserLoginDo
	Limit(limit int) IAspNetUserLoginDo
	Offset(offset int) IAspNetUserLoginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserLoginDo
	Unscoped() IAspNetUserLoginDo
	Create(values ...*model.AspNetUserLogin) error
	CreateInBatches(values []*model.AspNetUserLogin, batchSize int) error
	Save(values ...*model.AspNetUserLogin) error
	First() (*model.AspNetUserLogin, error)
	Take() (*model.AspNetUserLogin, error)
	Last() (*model.AspNetUserLogin, error)
	Find() ([]*model.AspNetUserLogin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUserLogin, err error)
	FindInBatches(result *[]*model.AspNetUserLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AspNetUserLogin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAspNetUserLoginDo
	Assign(attrs ...field.AssignExpr) IAspNetUserLoginDo
	Joins(fields ...field.RelationField) IAspNetUserLoginDo
	Preload(fields ...field.RelationField) IAspNetUserLoginDo
	FirstOrInit() (*model.AspNetUserLogin, error)
	FirstOrCreate() (*model.AspNetUserLogin, error)
	FindByPage(offset int, limit int) (result []*model.AspNetUserLogin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAspNetUserLoginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aspNetUserLoginDo) Debug() IAspNetUserLoginDo {
	return a.withDO(a.DO.Debug())
}

func (a aspNetUserLoginDo) WithContext(ctx context.Context) IAspNetUserLoginDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aspNetUserLoginDo) ReadDB() IAspNetUserLoginDo {
	return a.Clauses(dbresolver.Read)
}

func (a aspNetUserLoginDo) WriteDB() IAspNetUserLoginDo {
	return a.Clauses(dbresolver.Write)
}

func (a aspNetUserLoginDo) Session(config *gorm.Session) IAspNetUserLoginDo {
	return a.withDO(a.DO.Session(config))
}

func (a aspNetUserLoginDo) Clauses(conds ...clause.Expression) IAspNetUserLoginDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aspNetUserLoginDo) Returning(value interface{}, columns ...string) IAspNetUserLoginDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aspNetUserLoginDo) Not(conds ...gen.Condition) IAspNetUserLoginDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aspNetUserLoginDo) Or(conds ...gen.Condition) IAspNetUserLoginDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aspNetUserLoginDo) Select(conds ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aspNetUserLoginDo) Where(conds ...gen.Condition) IAspNetUserLoginDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aspNetUserLoginDo) Order(conds ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aspNetUserLoginDo) Distinct(cols ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aspNetUserLoginDo) Omit(cols ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aspNetUserLoginDo) Join(table schema.Tabler, on ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aspNetUserLoginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aspNetUserLoginDo) RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aspNetUserLoginDo) Group(cols ...field.Expr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aspNetUserLoginDo) Having(conds ...gen.Condition) IAspNetUserLoginDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aspNetUserLoginDo) Limit(limit int) IAspNetUserLoginDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aspNetUserLoginDo) Offset(offset int) IAspNetUserLoginDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aspNetUserLoginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserLoginDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aspNetUserLoginDo) Unscoped() IAspNetUserLoginDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aspNetUserLoginDo) Create(values ...*model.AspNetUserLogin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aspNetUserLoginDo) CreateInBatches(values []*model.AspNetUserLogin, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aspNetUserLoginDo) Save(values ...*model.AspNetUserLogin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aspNetUserLoginDo) First() (*model.AspNetUserLogin, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserLogin), nil
	}
}

func (a aspNetUserLoginDo) Take() (*model.AspNetUserLogin, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserLogin), nil
	}
}

func (a aspNetUserLoginDo) Last() (*model.AspNetUserLogin, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserLogin), nil
	}
}

func (a aspNetUserLoginDo) Find() ([]*model.AspNetUserLogin, error) {
	result, err := a.DO.Find()
	return result.([]*model.AspNetUserLogin), err
}

func (a aspNetUserLoginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUserLogin, err error) {
	buf := make([]*model.AspNetUserLogin, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aspNetUserLoginDo) FindInBatches(result *[]*model.AspNetUserLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aspNetUserLoginDo) Attrs(attrs ...field.AssignExpr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aspNetUserLoginDo) Assign(attrs ...field.AssignExpr) IAspNetUserLoginDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aspNetUserLoginDo) Joins(fields ...field.RelationField) IAspNetUserLoginDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aspNetUserLoginDo) Preload(fields ...field.RelationField) IAspNetUserLoginDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aspNetUserLoginDo) FirstOrInit() (*model.AspNetUserLogin, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserLogin), nil
	}
}

func (a aspNetUserLoginDo) FirstOrCreate() (*model.AspNetUserLogin, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserLogin), nil
	}
}

func (a aspNetUserLoginDo) FindByPage(offset int, limit int) (result []*model.AspNetUserLogin, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aspNetUserLoginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aspNetUserLoginDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aspNetUserLoginDo) Delete(models ...*model.AspNetUserLogin) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aspNetUserLoginDo) withDO(do gen.Dao) *aspNetUserLoginDo {
	a.DO = *do.(*gen.DO)
	return a
}
