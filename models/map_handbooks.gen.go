// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newMapHandbook(db *gorm.DB, opts ...gen.DOOption) mapHandbook {
	_mapHandbook := mapHandbook{}

	_mapHandbook.mapHandbookDo.UseDB(db, opts...)
	_mapHandbook.mapHandbookDo.UseModel(&model.MapHandbook{})

	tableName := _mapHandbook.mapHandbookDo.TableName()
	_mapHandbook.ALL = field.NewAsterisk(tableName)
	_mapHandbook.ID = field.NewInt32(tableName, "id")
	_mapHandbook.MapHandbooksListID = field.NewInt32(tableName, "map_handbooks_list_id")
	_mapHandbook.Value = field.NewString(tableName, "value")
	_mapHandbook.Priority = field.NewInt32(tableName, "priority")
	_mapHandbook.ParentID = field.NewInt32(tableName, "parent_id")
	_mapHandbook.ExtID = field.NewInt32(tableName, "ext_id")
	_mapHandbook.DateDreate = field.NewTime(tableName, "date_dreate")
	_mapHandbook.Jsonb = field.NewString(tableName, "jsonb")

	_mapHandbook.fillFieldMap()

	return _mapHandbook
}

type mapHandbook struct {
	mapHandbookDo

	ALL                field.Asterisk
	ID                 field.Int32
	MapHandbooksListID field.Int32
	Value              field.String
	Priority           field.Int32
	ParentID           field.Int32
	ExtID              field.Int32
	DateDreate         field.Time
	Jsonb              field.String

	fieldMap map[string]field.Expr
}

func (m mapHandbook) Table(newTableName string) *mapHandbook {
	m.mapHandbookDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mapHandbook) As(alias string) *mapHandbook {
	m.mapHandbookDo.DO = *(m.mapHandbookDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mapHandbook) updateTableName(table string) *mapHandbook {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.MapHandbooksListID = field.NewInt32(table, "map_handbooks_list_id")
	m.Value = field.NewString(table, "value")
	m.Priority = field.NewInt32(table, "priority")
	m.ParentID = field.NewInt32(table, "parent_id")
	m.ExtID = field.NewInt32(table, "ext_id")
	m.DateDreate = field.NewTime(table, "date_dreate")
	m.Jsonb = field.NewString(table, "jsonb")

	m.fillFieldMap()

	return m
}

func (m *mapHandbook) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mapHandbook) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["map_handbooks_list_id"] = m.MapHandbooksListID
	m.fieldMap["value"] = m.Value
	m.fieldMap["priority"] = m.Priority
	m.fieldMap["parent_id"] = m.ParentID
	m.fieldMap["ext_id"] = m.ExtID
	m.fieldMap["date_dreate"] = m.DateDreate
	m.fieldMap["jsonb"] = m.Jsonb
}

func (m mapHandbook) clone(db *gorm.DB) mapHandbook {
	m.mapHandbookDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mapHandbook) replaceDB(db *gorm.DB) mapHandbook {
	m.mapHandbookDo.ReplaceDB(db)
	return m
}

type mapHandbookDo struct{ gen.DO }

type IMapHandbookDo interface {
	gen.SubQuery
	Debug() IMapHandbookDo
	WithContext(ctx context.Context) IMapHandbookDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMapHandbookDo
	WriteDB() IMapHandbookDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMapHandbookDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMapHandbookDo
	Not(conds ...gen.Condition) IMapHandbookDo
	Or(conds ...gen.Condition) IMapHandbookDo
	Select(conds ...field.Expr) IMapHandbookDo
	Where(conds ...gen.Condition) IMapHandbookDo
	Order(conds ...field.Expr) IMapHandbookDo
	Distinct(cols ...field.Expr) IMapHandbookDo
	Omit(cols ...field.Expr) IMapHandbookDo
	Join(table schema.Tabler, on ...field.Expr) IMapHandbookDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMapHandbookDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMapHandbookDo
	Group(cols ...field.Expr) IMapHandbookDo
	Having(conds ...gen.Condition) IMapHandbookDo
	Limit(limit int) IMapHandbookDo
	Offset(offset int) IMapHandbookDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMapHandbookDo
	Unscoped() IMapHandbookDo
	Create(values ...*model.MapHandbook) error
	CreateInBatches(values []*model.MapHandbook, batchSize int) error
	Save(values ...*model.MapHandbook) error
	First() (*model.MapHandbook, error)
	Take() (*model.MapHandbook, error)
	Last() (*model.MapHandbook, error)
	Find() ([]*model.MapHandbook, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapHandbook, err error)
	FindInBatches(result *[]*model.MapHandbook, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MapHandbook) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMapHandbookDo
	Assign(attrs ...field.AssignExpr) IMapHandbookDo
	Joins(fields ...field.RelationField) IMapHandbookDo
	Preload(fields ...field.RelationField) IMapHandbookDo
	FirstOrInit() (*model.MapHandbook, error)
	FirstOrCreate() (*model.MapHandbook, error)
	FindByPage(offset int, limit int) (result []*model.MapHandbook, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMapHandbookDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mapHandbookDo) Debug() IMapHandbookDo {
	return m.withDO(m.DO.Debug())
}

func (m mapHandbookDo) WithContext(ctx context.Context) IMapHandbookDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mapHandbookDo) ReadDB() IMapHandbookDo {
	return m.Clauses(dbresolver.Read)
}

func (m mapHandbookDo) WriteDB() IMapHandbookDo {
	return m.Clauses(dbresolver.Write)
}

func (m mapHandbookDo) Session(config *gorm.Session) IMapHandbookDo {
	return m.withDO(m.DO.Session(config))
}

func (m mapHandbookDo) Clauses(conds ...clause.Expression) IMapHandbookDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mapHandbookDo) Returning(value interface{}, columns ...string) IMapHandbookDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mapHandbookDo) Not(conds ...gen.Condition) IMapHandbookDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mapHandbookDo) Or(conds ...gen.Condition) IMapHandbookDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mapHandbookDo) Select(conds ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mapHandbookDo) Where(conds ...gen.Condition) IMapHandbookDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mapHandbookDo) Order(conds ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mapHandbookDo) Distinct(cols ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mapHandbookDo) Omit(cols ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mapHandbookDo) Join(table schema.Tabler, on ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mapHandbookDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mapHandbookDo) RightJoin(table schema.Tabler, on ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mapHandbookDo) Group(cols ...field.Expr) IMapHandbookDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mapHandbookDo) Having(conds ...gen.Condition) IMapHandbookDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mapHandbookDo) Limit(limit int) IMapHandbookDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mapHandbookDo) Offset(offset int) IMapHandbookDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mapHandbookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMapHandbookDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mapHandbookDo) Unscoped() IMapHandbookDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mapHandbookDo) Create(values ...*model.MapHandbook) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mapHandbookDo) CreateInBatches(values []*model.MapHandbook, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mapHandbookDo) Save(values ...*model.MapHandbook) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mapHandbookDo) First() (*model.MapHandbook, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbook), nil
	}
}

func (m mapHandbookDo) Take() (*model.MapHandbook, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbook), nil
	}
}

func (m mapHandbookDo) Last() (*model.MapHandbook, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbook), nil
	}
}

func (m mapHandbookDo) Find() ([]*model.MapHandbook, error) {
	result, err := m.DO.Find()
	return result.([]*model.MapHandbook), err
}

func (m mapHandbookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapHandbook, err error) {
	buf := make([]*model.MapHandbook, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mapHandbookDo) FindInBatches(result *[]*model.MapHandbook, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mapHandbookDo) Attrs(attrs ...field.AssignExpr) IMapHandbookDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mapHandbookDo) Assign(attrs ...field.AssignExpr) IMapHandbookDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mapHandbookDo) Joins(fields ...field.RelationField) IMapHandbookDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mapHandbookDo) Preload(fields ...field.RelationField) IMapHandbookDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mapHandbookDo) FirstOrInit() (*model.MapHandbook, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbook), nil
	}
}

func (m mapHandbookDo) FirstOrCreate() (*model.MapHandbook, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbook), nil
	}
}

func (m mapHandbookDo) FindByPage(offset int, limit int) (result []*model.MapHandbook, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mapHandbookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mapHandbookDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mapHandbookDo) Delete(models ...*model.MapHandbook) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mapHandbookDo) withDO(do gen.Dao) *mapHandbookDo {
	m.DO = *do.(*gen.DO)
	return m
}
