// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAspNetPrivilege(db *gorm.DB, opts ...gen.DOOption) aspNetPrivilege {
	_aspNetPrivilege := aspNetPrivilege{}

	_aspNetPrivilege.aspNetPrivilegeDo.UseDB(db, opts...)
	_aspNetPrivilege.aspNetPrivilegeDo.UseModel(&model.AspNetPrivilege{})

	tableName := _aspNetPrivilege.aspNetPrivilegeDo.TableName()
	_aspNetPrivilege.ALL = field.NewAsterisk(tableName)
	_aspNetPrivilege.ID = field.NewInt32(tableName, "id")
	_aspNetPrivilege.PrivilegeType = field.NewString(tableName, "privilege_type")
	_aspNetPrivilege.ObjID = field.NewInt32(tableName, "obj_id")
	_aspNetPrivilege.Title = field.NewString(tableName, "title")
	_aspNetPrivilege.C = field.NewInt16(tableName, "c")
	_aspNetPrivilege.R = field.NewInt16(tableName, "r")
	_aspNetPrivilege.U = field.NewInt16(tableName, "u")
	_aspNetPrivilege.D = field.NewInt16(tableName, "d")
	_aspNetPrivilege.DateCreate = field.NewTime(tableName, "date_create")
	_aspNetPrivilege.DateLastChange = field.NewTime(tableName, "date_last_change")
	_aspNetPrivilege.CreaterID = field.NewInt64(tableName, "creater_id")
	_aspNetPrivilege.ChangerID = field.NewInt64(tableName, "changer_id")

	_aspNetPrivilege.fillFieldMap()

	return _aspNetPrivilege
}

type aspNetPrivilege struct {
	aspNetPrivilegeDo

	ALL            field.Asterisk
	ID             field.Int32
	PrivilegeType  field.String
	ObjID          field.Int32
	Title          field.String
	C              field.Int16
	R              field.Int16
	U              field.Int16
	D              field.Int16
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64

	fieldMap map[string]field.Expr
}

func (a aspNetPrivilege) Table(newTableName string) *aspNetPrivilege {
	a.aspNetPrivilegeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aspNetPrivilege) As(alias string) *aspNetPrivilege {
	a.aspNetPrivilegeDo.DO = *(a.aspNetPrivilegeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aspNetPrivilege) updateTableName(table string) *aspNetPrivilege {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.PrivilegeType = field.NewString(table, "privilege_type")
	a.ObjID = field.NewInt32(table, "obj_id")
	a.Title = field.NewString(table, "title")
	a.C = field.NewInt16(table, "c")
	a.R = field.NewInt16(table, "r")
	a.U = field.NewInt16(table, "u")
	a.D = field.NewInt16(table, "d")
	a.DateCreate = field.NewTime(table, "date_create")
	a.DateLastChange = field.NewTime(table, "date_last_change")
	a.CreaterID = field.NewInt64(table, "creater_id")
	a.ChangerID = field.NewInt64(table, "changer_id")

	a.fillFieldMap()

	return a
}

func (a *aspNetPrivilege) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aspNetPrivilege) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["privilege_type"] = a.PrivilegeType
	a.fieldMap["obj_id"] = a.ObjID
	a.fieldMap["title"] = a.Title
	a.fieldMap["c"] = a.C
	a.fieldMap["r"] = a.R
	a.fieldMap["u"] = a.U
	a.fieldMap["d"] = a.D
	a.fieldMap["date_create"] = a.DateCreate
	a.fieldMap["date_last_change"] = a.DateLastChange
	a.fieldMap["creater_id"] = a.CreaterID
	a.fieldMap["changer_id"] = a.ChangerID
}

func (a aspNetPrivilege) clone(db *gorm.DB) aspNetPrivilege {
	a.aspNetPrivilegeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aspNetPrivilege) replaceDB(db *gorm.DB) aspNetPrivilege {
	a.aspNetPrivilegeDo.ReplaceDB(db)
	return a
}

type aspNetPrivilegeDo struct{ gen.DO }

type IAspNetPrivilegeDo interface {
	gen.SubQuery
	Debug() IAspNetPrivilegeDo
	WithContext(ctx context.Context) IAspNetPrivilegeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAspNetPrivilegeDo
	WriteDB() IAspNetPrivilegeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAspNetPrivilegeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAspNetPrivilegeDo
	Not(conds ...gen.Condition) IAspNetPrivilegeDo
	Or(conds ...gen.Condition) IAspNetPrivilegeDo
	Select(conds ...field.Expr) IAspNetPrivilegeDo
	Where(conds ...gen.Condition) IAspNetPrivilegeDo
	Order(conds ...field.Expr) IAspNetPrivilegeDo
	Distinct(cols ...field.Expr) IAspNetPrivilegeDo
	Omit(cols ...field.Expr) IAspNetPrivilegeDo
	Join(table schema.Tabler, on ...field.Expr) IAspNetPrivilegeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetPrivilegeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAspNetPrivilegeDo
	Group(cols ...field.Expr) IAspNetPrivilegeDo
	Having(conds ...gen.Condition) IAspNetPrivilegeDo
	Limit(limit int) IAspNetPrivilegeDo
	Offset(offset int) IAspNetPrivilegeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetPrivilegeDo
	Unscoped() IAspNetPrivilegeDo
	Create(values ...*model.AspNetPrivilege) error
	CreateInBatches(values []*model.AspNetPrivilege, batchSize int) error
	Save(values ...*model.AspNetPrivilege) error
	First() (*model.AspNetPrivilege, error)
	Take() (*model.AspNetPrivilege, error)
	Last() (*model.AspNetPrivilege, error)
	Find() ([]*model.AspNetPrivilege, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetPrivilege, err error)
	FindInBatches(result *[]*model.AspNetPrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AspNetPrivilege) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAspNetPrivilegeDo
	Assign(attrs ...field.AssignExpr) IAspNetPrivilegeDo
	Joins(fields ...field.RelationField) IAspNetPrivilegeDo
	Preload(fields ...field.RelationField) IAspNetPrivilegeDo
	FirstOrInit() (*model.AspNetPrivilege, error)
	FirstOrCreate() (*model.AspNetPrivilege, error)
	FindByPage(offset int, limit int) (result []*model.AspNetPrivilege, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAspNetPrivilegeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aspNetPrivilegeDo) Debug() IAspNetPrivilegeDo {
	return a.withDO(a.DO.Debug())
}

func (a aspNetPrivilegeDo) WithContext(ctx context.Context) IAspNetPrivilegeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aspNetPrivilegeDo) ReadDB() IAspNetPrivilegeDo {
	return a.Clauses(dbresolver.Read)
}

func (a aspNetPrivilegeDo) WriteDB() IAspNetPrivilegeDo {
	return a.Clauses(dbresolver.Write)
}

func (a aspNetPrivilegeDo) Session(config *gorm.Session) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Session(config))
}

func (a aspNetPrivilegeDo) Clauses(conds ...clause.Expression) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aspNetPrivilegeDo) Returning(value interface{}, columns ...string) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aspNetPrivilegeDo) Not(conds ...gen.Condition) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aspNetPrivilegeDo) Or(conds ...gen.Condition) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aspNetPrivilegeDo) Select(conds ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aspNetPrivilegeDo) Where(conds ...gen.Condition) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aspNetPrivilegeDo) Order(conds ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aspNetPrivilegeDo) Distinct(cols ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aspNetPrivilegeDo) Omit(cols ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aspNetPrivilegeDo) Join(table schema.Tabler, on ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aspNetPrivilegeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aspNetPrivilegeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aspNetPrivilegeDo) Group(cols ...field.Expr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aspNetPrivilegeDo) Having(conds ...gen.Condition) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aspNetPrivilegeDo) Limit(limit int) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aspNetPrivilegeDo) Offset(offset int) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aspNetPrivilegeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aspNetPrivilegeDo) Unscoped() IAspNetPrivilegeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aspNetPrivilegeDo) Create(values ...*model.AspNetPrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aspNetPrivilegeDo) CreateInBatches(values []*model.AspNetPrivilege, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aspNetPrivilegeDo) Save(values ...*model.AspNetPrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aspNetPrivilegeDo) First() (*model.AspNetPrivilege, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetPrivilege), nil
	}
}

func (a aspNetPrivilegeDo) Take() (*model.AspNetPrivilege, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetPrivilege), nil
	}
}

func (a aspNetPrivilegeDo) Last() (*model.AspNetPrivilege, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetPrivilege), nil
	}
}

func (a aspNetPrivilegeDo) Find() ([]*model.AspNetPrivilege, error) {
	result, err := a.DO.Find()
	return result.([]*model.AspNetPrivilege), err
}

func (a aspNetPrivilegeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetPrivilege, err error) {
	buf := make([]*model.AspNetPrivilege, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aspNetPrivilegeDo) FindInBatches(result *[]*model.AspNetPrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aspNetPrivilegeDo) Attrs(attrs ...field.AssignExpr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aspNetPrivilegeDo) Assign(attrs ...field.AssignExpr) IAspNetPrivilegeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aspNetPrivilegeDo) Joins(fields ...field.RelationField) IAspNetPrivilegeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aspNetPrivilegeDo) Preload(fields ...field.RelationField) IAspNetPrivilegeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aspNetPrivilegeDo) FirstOrInit() (*model.AspNetPrivilege, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetPrivilege), nil
	}
}

func (a aspNetPrivilegeDo) FirstOrCreate() (*model.AspNetPrivilege, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetPrivilege), nil
	}
}

func (a aspNetPrivilegeDo) FindByPage(offset int, limit int) (result []*model.AspNetPrivilege, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aspNetPrivilegeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aspNetPrivilegeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aspNetPrivilegeDo) Delete(models ...*model.AspNetPrivilege) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aspNetPrivilegeDo) withDO(do gen.Dao) *aspNetPrivilegeDo {
	a.DO = *do.(*gen.DO)
	return a
}
