// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAspNetUser(db *gorm.DB, opts ...gen.DOOption) aspNetUser {
	_aspNetUser := aspNetUser{}

	_aspNetUser.aspNetUserDo.UseDB(db, opts...)
	_aspNetUser.aspNetUserDo.UseModel(&model.AspNetUser{})

	tableName := _aspNetUser.aspNetUserDo.TableName()
	_aspNetUser.ALL = field.NewAsterisk(tableName)
	_aspNetUser.ID = field.NewString(tableName, "Id")
	_aspNetUser.UserName = field.NewString(tableName, "UserName")
	_aspNetUser.NormalizedUserName = field.NewString(tableName, "NormalizedUserName")
	_aspNetUser.Email = field.NewString(tableName, "Email")
	_aspNetUser.NormalizedEmail = field.NewString(tableName, "NormalizedEmail")
	_aspNetUser.EmailConfirmed = field.NewBool(tableName, "EmailConfirmed")
	_aspNetUser.PasswordHash = field.NewString(tableName, "PasswordHash")
	_aspNetUser.SecurityStamp = field.NewString(tableName, "SecurityStamp")
	_aspNetUser.ConcurrencyStamp = field.NewString(tableName, "ConcurrencyStamp")
	_aspNetUser.PhoneNumber = field.NewString(tableName, "PhoneNumber")
	_aspNetUser.PhoneNumberConfirmed = field.NewBool(tableName, "PhoneNumberConfirmed")
	_aspNetUser.TwoFactorEnabled = field.NewBool(tableName, "TwoFactorEnabled")
	_aspNetUser.LockoutEnd = field.NewTime(tableName, "LockoutEnd")
	_aspNetUser.LockoutEnabled = field.NewBool(tableName, "LockoutEnabled")
	_aspNetUser.AccessFailedCount = field.NewInt32(tableName, "AccessFailedCount")

	_aspNetUser.fillFieldMap()

	return _aspNetUser
}

type aspNetUser struct {
	aspNetUserDo

	ALL                  field.Asterisk
	ID                   field.String
	UserName             field.String
	NormalizedUserName   field.String
	Email                field.String
	NormalizedEmail      field.String
	EmailConfirmed       field.Bool
	PasswordHash         field.String
	SecurityStamp        field.String
	ConcurrencyStamp     field.String
	PhoneNumber          field.String
	PhoneNumberConfirmed field.Bool
	TwoFactorEnabled     field.Bool
	LockoutEnd           field.Time
	LockoutEnabled       field.Bool
	AccessFailedCount    field.Int32

	fieldMap map[string]field.Expr
}

func (a aspNetUser) Table(newTableName string) *aspNetUser {
	a.aspNetUserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aspNetUser) As(alias string) *aspNetUser {
	a.aspNetUserDo.DO = *(a.aspNetUserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aspNetUser) updateTableName(table string) *aspNetUser {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.UserName = field.NewString(table, "UserName")
	a.NormalizedUserName = field.NewString(table, "NormalizedUserName")
	a.Email = field.NewString(table, "Email")
	a.NormalizedEmail = field.NewString(table, "NormalizedEmail")
	a.EmailConfirmed = field.NewBool(table, "EmailConfirmed")
	a.PasswordHash = field.NewString(table, "PasswordHash")
	a.SecurityStamp = field.NewString(table, "SecurityStamp")
	a.ConcurrencyStamp = field.NewString(table, "ConcurrencyStamp")
	a.PhoneNumber = field.NewString(table, "PhoneNumber")
	a.PhoneNumberConfirmed = field.NewBool(table, "PhoneNumberConfirmed")
	a.TwoFactorEnabled = field.NewBool(table, "TwoFactorEnabled")
	a.LockoutEnd = field.NewTime(table, "LockoutEnd")
	a.LockoutEnabled = field.NewBool(table, "LockoutEnabled")
	a.AccessFailedCount = field.NewInt32(table, "AccessFailedCount")

	a.fillFieldMap()

	return a
}

func (a *aspNetUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aspNetUser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["UserName"] = a.UserName
	a.fieldMap["NormalizedUserName"] = a.NormalizedUserName
	a.fieldMap["Email"] = a.Email
	a.fieldMap["NormalizedEmail"] = a.NormalizedEmail
	a.fieldMap["EmailConfirmed"] = a.EmailConfirmed
	a.fieldMap["PasswordHash"] = a.PasswordHash
	a.fieldMap["SecurityStamp"] = a.SecurityStamp
	a.fieldMap["ConcurrencyStamp"] = a.ConcurrencyStamp
	a.fieldMap["PhoneNumber"] = a.PhoneNumber
	a.fieldMap["PhoneNumberConfirmed"] = a.PhoneNumberConfirmed
	a.fieldMap["TwoFactorEnabled"] = a.TwoFactorEnabled
	a.fieldMap["LockoutEnd"] = a.LockoutEnd
	a.fieldMap["LockoutEnabled"] = a.LockoutEnabled
	a.fieldMap["AccessFailedCount"] = a.AccessFailedCount
}

func (a aspNetUser) clone(db *gorm.DB) aspNetUser {
	a.aspNetUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aspNetUser) replaceDB(db *gorm.DB) aspNetUser {
	a.aspNetUserDo.ReplaceDB(db)
	return a
}

type aspNetUserDo struct{ gen.DO }

type IAspNetUserDo interface {
	gen.SubQuery
	Debug() IAspNetUserDo
	WithContext(ctx context.Context) IAspNetUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAspNetUserDo
	WriteDB() IAspNetUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAspNetUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAspNetUserDo
	Not(conds ...gen.Condition) IAspNetUserDo
	Or(conds ...gen.Condition) IAspNetUserDo
	Select(conds ...field.Expr) IAspNetUserDo
	Where(conds ...gen.Condition) IAspNetUserDo
	Order(conds ...field.Expr) IAspNetUserDo
	Distinct(cols ...field.Expr) IAspNetUserDo
	Omit(cols ...field.Expr) IAspNetUserDo
	Join(table schema.Tabler, on ...field.Expr) IAspNetUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserDo
	Group(cols ...field.Expr) IAspNetUserDo
	Having(conds ...gen.Condition) IAspNetUserDo
	Limit(limit int) IAspNetUserDo
	Offset(offset int) IAspNetUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserDo
	Unscoped() IAspNetUserDo
	Create(values ...*model.AspNetUser) error
	CreateInBatches(values []*model.AspNetUser, batchSize int) error
	Save(values ...*model.AspNetUser) error
	First() (*model.AspNetUser, error)
	Take() (*model.AspNetUser, error)
	Last() (*model.AspNetUser, error)
	Find() ([]*model.AspNetUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUser, err error)
	FindInBatches(result *[]*model.AspNetUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AspNetUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAspNetUserDo
	Assign(attrs ...field.AssignExpr) IAspNetUserDo
	Joins(fields ...field.RelationField) IAspNetUserDo
	Preload(fields ...field.RelationField) IAspNetUserDo
	FirstOrInit() (*model.AspNetUser, error)
	FirstOrCreate() (*model.AspNetUser, error)
	FindByPage(offset int, limit int) (result []*model.AspNetUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAspNetUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aspNetUserDo) Debug() IAspNetUserDo {
	return a.withDO(a.DO.Debug())
}

func (a aspNetUserDo) WithContext(ctx context.Context) IAspNetUserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aspNetUserDo) ReadDB() IAspNetUserDo {
	return a.Clauses(dbresolver.Read)
}

func (a aspNetUserDo) WriteDB() IAspNetUserDo {
	return a.Clauses(dbresolver.Write)
}

func (a aspNetUserDo) Session(config *gorm.Session) IAspNetUserDo {
	return a.withDO(a.DO.Session(config))
}

func (a aspNetUserDo) Clauses(conds ...clause.Expression) IAspNetUserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aspNetUserDo) Returning(value interface{}, columns ...string) IAspNetUserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aspNetUserDo) Not(conds ...gen.Condition) IAspNetUserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aspNetUserDo) Or(conds ...gen.Condition) IAspNetUserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aspNetUserDo) Select(conds ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aspNetUserDo) Where(conds ...gen.Condition) IAspNetUserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aspNetUserDo) Order(conds ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aspNetUserDo) Distinct(cols ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aspNetUserDo) Omit(cols ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aspNetUserDo) Join(table schema.Tabler, on ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aspNetUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aspNetUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aspNetUserDo) Group(cols ...field.Expr) IAspNetUserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aspNetUserDo) Having(conds ...gen.Condition) IAspNetUserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aspNetUserDo) Limit(limit int) IAspNetUserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aspNetUserDo) Offset(offset int) IAspNetUserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aspNetUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aspNetUserDo) Unscoped() IAspNetUserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aspNetUserDo) Create(values ...*model.AspNetUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aspNetUserDo) CreateInBatches(values []*model.AspNetUser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aspNetUserDo) Save(values ...*model.AspNetUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aspNetUserDo) First() (*model.AspNetUser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUser), nil
	}
}

func (a aspNetUserDo) Take() (*model.AspNetUser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUser), nil
	}
}

func (a aspNetUserDo) Last() (*model.AspNetUser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUser), nil
	}
}

func (a aspNetUserDo) Find() ([]*model.AspNetUser, error) {
	result, err := a.DO.Find()
	return result.([]*model.AspNetUser), err
}

func (a aspNetUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUser, err error) {
	buf := make([]*model.AspNetUser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aspNetUserDo) FindInBatches(result *[]*model.AspNetUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aspNetUserDo) Attrs(attrs ...field.AssignExpr) IAspNetUserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aspNetUserDo) Assign(attrs ...field.AssignExpr) IAspNetUserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aspNetUserDo) Joins(fields ...field.RelationField) IAspNetUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aspNetUserDo) Preload(fields ...field.RelationField) IAspNetUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aspNetUserDo) FirstOrInit() (*model.AspNetUser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUser), nil
	}
}

func (a aspNetUserDo) FirstOrCreate() (*model.AspNetUser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUser), nil
	}
}

func (a aspNetUserDo) FindByPage(offset int, limit int) (result []*model.AspNetUser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aspNetUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aspNetUserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aspNetUserDo) Delete(models ...*model.AspNetUser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aspNetUserDo) withDO(do gen.Dao) *aspNetUserDo {
	a.DO = *do.(*gen.DO)
	return a
}
