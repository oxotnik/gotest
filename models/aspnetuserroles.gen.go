// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAspNetUserRole(db *gorm.DB, opts ...gen.DOOption) aspNetUserRole {
	_aspNetUserRole := aspNetUserRole{}

	_aspNetUserRole.aspNetUserRoleDo.UseDB(db, opts...)
	_aspNetUserRole.aspNetUserRoleDo.UseModel(&model.AspNetUserRole{})

	tableName := _aspNetUserRole.aspNetUserRoleDo.TableName()
	_aspNetUserRole.ALL = field.NewAsterisk(tableName)
	_aspNetUserRole.UserID = field.NewString(tableName, "UserId")
	_aspNetUserRole.RoleID = field.NewString(tableName, "RoleId")

	_aspNetUserRole.fillFieldMap()

	return _aspNetUserRole
}

type aspNetUserRole struct {
	aspNetUserRoleDo

	ALL    field.Asterisk
	UserID field.String
	RoleID field.String

	fieldMap map[string]field.Expr
}

func (a aspNetUserRole) Table(newTableName string) *aspNetUserRole {
	a.aspNetUserRoleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aspNetUserRole) As(alias string) *aspNetUserRole {
	a.aspNetUserRoleDo.DO = *(a.aspNetUserRoleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aspNetUserRole) updateTableName(table string) *aspNetUserRole {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewString(table, "UserId")
	a.RoleID = field.NewString(table, "RoleId")

	a.fillFieldMap()

	return a
}

func (a *aspNetUserRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aspNetUserRole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["RoleId"] = a.RoleID
}

func (a aspNetUserRole) clone(db *gorm.DB) aspNetUserRole {
	a.aspNetUserRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aspNetUserRole) replaceDB(db *gorm.DB) aspNetUserRole {
	a.aspNetUserRoleDo.ReplaceDB(db)
	return a
}

type aspNetUserRoleDo struct{ gen.DO }

type IAspNetUserRoleDo interface {
	gen.SubQuery
	Debug() IAspNetUserRoleDo
	WithContext(ctx context.Context) IAspNetUserRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAspNetUserRoleDo
	WriteDB() IAspNetUserRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAspNetUserRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAspNetUserRoleDo
	Not(conds ...gen.Condition) IAspNetUserRoleDo
	Or(conds ...gen.Condition) IAspNetUserRoleDo
	Select(conds ...field.Expr) IAspNetUserRoleDo
	Where(conds ...gen.Condition) IAspNetUserRoleDo
	Order(conds ...field.Expr) IAspNetUserRoleDo
	Distinct(cols ...field.Expr) IAspNetUserRoleDo
	Omit(cols ...field.Expr) IAspNetUserRoleDo
	Join(table schema.Tabler, on ...field.Expr) IAspNetUserRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserRoleDo
	Group(cols ...field.Expr) IAspNetUserRoleDo
	Having(conds ...gen.Condition) IAspNetUserRoleDo
	Limit(limit int) IAspNetUserRoleDo
	Offset(offset int) IAspNetUserRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserRoleDo
	Unscoped() IAspNetUserRoleDo
	Create(values ...*model.AspNetUserRole) error
	CreateInBatches(values []*model.AspNetUserRole, batchSize int) error
	Save(values ...*model.AspNetUserRole) error
	First() (*model.AspNetUserRole, error)
	Take() (*model.AspNetUserRole, error)
	Last() (*model.AspNetUserRole, error)
	Find() ([]*model.AspNetUserRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUserRole, err error)
	FindInBatches(result *[]*model.AspNetUserRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AspNetUserRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAspNetUserRoleDo
	Assign(attrs ...field.AssignExpr) IAspNetUserRoleDo
	Joins(fields ...field.RelationField) IAspNetUserRoleDo
	Preload(fields ...field.RelationField) IAspNetUserRoleDo
	FirstOrInit() (*model.AspNetUserRole, error)
	FirstOrCreate() (*model.AspNetUserRole, error)
	FindByPage(offset int, limit int) (result []*model.AspNetUserRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAspNetUserRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aspNetUserRoleDo) Debug() IAspNetUserRoleDo {
	return a.withDO(a.DO.Debug())
}

func (a aspNetUserRoleDo) WithContext(ctx context.Context) IAspNetUserRoleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aspNetUserRoleDo) ReadDB() IAspNetUserRoleDo {
	return a.Clauses(dbresolver.Read)
}

func (a aspNetUserRoleDo) WriteDB() IAspNetUserRoleDo {
	return a.Clauses(dbresolver.Write)
}

func (a aspNetUserRoleDo) Session(config *gorm.Session) IAspNetUserRoleDo {
	return a.withDO(a.DO.Session(config))
}

func (a aspNetUserRoleDo) Clauses(conds ...clause.Expression) IAspNetUserRoleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aspNetUserRoleDo) Returning(value interface{}, columns ...string) IAspNetUserRoleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aspNetUserRoleDo) Not(conds ...gen.Condition) IAspNetUserRoleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aspNetUserRoleDo) Or(conds ...gen.Condition) IAspNetUserRoleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aspNetUserRoleDo) Select(conds ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aspNetUserRoleDo) Where(conds ...gen.Condition) IAspNetUserRoleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aspNetUserRoleDo) Order(conds ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aspNetUserRoleDo) Distinct(cols ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aspNetUserRoleDo) Omit(cols ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aspNetUserRoleDo) Join(table schema.Tabler, on ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aspNetUserRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aspNetUserRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aspNetUserRoleDo) Group(cols ...field.Expr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aspNetUserRoleDo) Having(conds ...gen.Condition) IAspNetUserRoleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aspNetUserRoleDo) Limit(limit int) IAspNetUserRoleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aspNetUserRoleDo) Offset(offset int) IAspNetUserRoleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aspNetUserRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetUserRoleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aspNetUserRoleDo) Unscoped() IAspNetUserRoleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aspNetUserRoleDo) Create(values ...*model.AspNetUserRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aspNetUserRoleDo) CreateInBatches(values []*model.AspNetUserRole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aspNetUserRoleDo) Save(values ...*model.AspNetUserRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aspNetUserRoleDo) First() (*model.AspNetUserRole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserRole), nil
	}
}

func (a aspNetUserRoleDo) Take() (*model.AspNetUserRole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserRole), nil
	}
}

func (a aspNetUserRoleDo) Last() (*model.AspNetUserRole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserRole), nil
	}
}

func (a aspNetUserRoleDo) Find() ([]*model.AspNetUserRole, error) {
	result, err := a.DO.Find()
	return result.([]*model.AspNetUserRole), err
}

func (a aspNetUserRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetUserRole, err error) {
	buf := make([]*model.AspNetUserRole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aspNetUserRoleDo) FindInBatches(result *[]*model.AspNetUserRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aspNetUserRoleDo) Attrs(attrs ...field.AssignExpr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aspNetUserRoleDo) Assign(attrs ...field.AssignExpr) IAspNetUserRoleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aspNetUserRoleDo) Joins(fields ...field.RelationField) IAspNetUserRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aspNetUserRoleDo) Preload(fields ...field.RelationField) IAspNetUserRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aspNetUserRoleDo) FirstOrInit() (*model.AspNetUserRole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserRole), nil
	}
}

func (a aspNetUserRoleDo) FirstOrCreate() (*model.AspNetUserRole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetUserRole), nil
	}
}

func (a aspNetUserRoleDo) FindByPage(offset int, limit int) (result []*model.AspNetUserRole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aspNetUserRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aspNetUserRoleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aspNetUserRoleDo) Delete(models ...*model.AspNetUserRole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aspNetUserRoleDo) withDO(do gen.Dao) *aspNetUserRoleDo {
	a.DO = *do.(*gen.DO)
	return a
}
