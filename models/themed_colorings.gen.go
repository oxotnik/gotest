// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newThemedColoring(db *gorm.DB, opts ...gen.DOOption) themedColoring {
	_themedColoring := themedColoring{}

	_themedColoring.themedColoringDo.UseDB(db, opts...)
	_themedColoring.themedColoringDo.UseModel(&model.ThemedColoring{})

	tableName := _themedColoring.themedColoringDo.TableName()
	_themedColoring.ALL = field.NewAsterisk(tableName)
	_themedColoring.ID = field.NewInt32(tableName, "id")
	_themedColoring.DateCreate = field.NewTime(tableName, "date_create")
	_themedColoring.DateLastChange = field.NewTime(tableName, "date_last_change")
	_themedColoring.CreaterID = field.NewInt32(tableName, "creater_id")
	_themedColoring.ChangerID = field.NewInt32(tableName, "changer_id")
	_themedColoring.LayerID = field.NewInt32(tableName, "layer_id")
	_themedColoring.IsArchive = field.NewBool(tableName, "is_archive")
	_themedColoring.Title = field.NewString(tableName, "title")

	_themedColoring.fillFieldMap()

	return _themedColoring
}

type themedColoring struct {
	themedColoringDo

	ALL            field.Asterisk
	ID             field.Int32
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int32
	ChangerID      field.Int32
	LayerID        field.Int32
	IsArchive      field.Bool
	Title          field.String

	fieldMap map[string]field.Expr
}

func (t themedColoring) Table(newTableName string) *themedColoring {
	t.themedColoringDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t themedColoring) As(alias string) *themedColoring {
	t.themedColoringDo.DO = *(t.themedColoringDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *themedColoring) updateTableName(table string) *themedColoring {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.DateCreate = field.NewTime(table, "date_create")
	t.DateLastChange = field.NewTime(table, "date_last_change")
	t.CreaterID = field.NewInt32(table, "creater_id")
	t.ChangerID = field.NewInt32(table, "changer_id")
	t.LayerID = field.NewInt32(table, "layer_id")
	t.IsArchive = field.NewBool(table, "is_archive")
	t.Title = field.NewString(table, "title")

	t.fillFieldMap()

	return t
}

func (t *themedColoring) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *themedColoring) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["date_create"] = t.DateCreate
	t.fieldMap["date_last_change"] = t.DateLastChange
	t.fieldMap["creater_id"] = t.CreaterID
	t.fieldMap["changer_id"] = t.ChangerID
	t.fieldMap["layer_id"] = t.LayerID
	t.fieldMap["is_archive"] = t.IsArchive
	t.fieldMap["title"] = t.Title
}

func (t themedColoring) clone(db *gorm.DB) themedColoring {
	t.themedColoringDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t themedColoring) replaceDB(db *gorm.DB) themedColoring {
	t.themedColoringDo.ReplaceDB(db)
	return t
}

type themedColoringDo struct{ gen.DO }

type IThemedColoringDo interface {
	gen.SubQuery
	Debug() IThemedColoringDo
	WithContext(ctx context.Context) IThemedColoringDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThemedColoringDo
	WriteDB() IThemedColoringDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThemedColoringDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThemedColoringDo
	Not(conds ...gen.Condition) IThemedColoringDo
	Or(conds ...gen.Condition) IThemedColoringDo
	Select(conds ...field.Expr) IThemedColoringDo
	Where(conds ...gen.Condition) IThemedColoringDo
	Order(conds ...field.Expr) IThemedColoringDo
	Distinct(cols ...field.Expr) IThemedColoringDo
	Omit(cols ...field.Expr) IThemedColoringDo
	Join(table schema.Tabler, on ...field.Expr) IThemedColoringDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThemedColoringDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThemedColoringDo
	Group(cols ...field.Expr) IThemedColoringDo
	Having(conds ...gen.Condition) IThemedColoringDo
	Limit(limit int) IThemedColoringDo
	Offset(offset int) IThemedColoringDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThemedColoringDo
	Unscoped() IThemedColoringDo
	Create(values ...*model.ThemedColoring) error
	CreateInBatches(values []*model.ThemedColoring, batchSize int) error
	Save(values ...*model.ThemedColoring) error
	First() (*model.ThemedColoring, error)
	Take() (*model.ThemedColoring, error)
	Last() (*model.ThemedColoring, error)
	Find() ([]*model.ThemedColoring, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThemedColoring, err error)
	FindInBatches(result *[]*model.ThemedColoring, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ThemedColoring) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThemedColoringDo
	Assign(attrs ...field.AssignExpr) IThemedColoringDo
	Joins(fields ...field.RelationField) IThemedColoringDo
	Preload(fields ...field.RelationField) IThemedColoringDo
	FirstOrInit() (*model.ThemedColoring, error)
	FirstOrCreate() (*model.ThemedColoring, error)
	FindByPage(offset int, limit int) (result []*model.ThemedColoring, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThemedColoringDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t themedColoringDo) Debug() IThemedColoringDo {
	return t.withDO(t.DO.Debug())
}

func (t themedColoringDo) WithContext(ctx context.Context) IThemedColoringDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t themedColoringDo) ReadDB() IThemedColoringDo {
	return t.Clauses(dbresolver.Read)
}

func (t themedColoringDo) WriteDB() IThemedColoringDo {
	return t.Clauses(dbresolver.Write)
}

func (t themedColoringDo) Session(config *gorm.Session) IThemedColoringDo {
	return t.withDO(t.DO.Session(config))
}

func (t themedColoringDo) Clauses(conds ...clause.Expression) IThemedColoringDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t themedColoringDo) Returning(value interface{}, columns ...string) IThemedColoringDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t themedColoringDo) Not(conds ...gen.Condition) IThemedColoringDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t themedColoringDo) Or(conds ...gen.Condition) IThemedColoringDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t themedColoringDo) Select(conds ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t themedColoringDo) Where(conds ...gen.Condition) IThemedColoringDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t themedColoringDo) Order(conds ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t themedColoringDo) Distinct(cols ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t themedColoringDo) Omit(cols ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t themedColoringDo) Join(table schema.Tabler, on ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t themedColoringDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t themedColoringDo) RightJoin(table schema.Tabler, on ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t themedColoringDo) Group(cols ...field.Expr) IThemedColoringDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t themedColoringDo) Having(conds ...gen.Condition) IThemedColoringDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t themedColoringDo) Limit(limit int) IThemedColoringDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t themedColoringDo) Offset(offset int) IThemedColoringDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t themedColoringDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThemedColoringDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t themedColoringDo) Unscoped() IThemedColoringDo {
	return t.withDO(t.DO.Unscoped())
}

func (t themedColoringDo) Create(values ...*model.ThemedColoring) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t themedColoringDo) CreateInBatches(values []*model.ThemedColoring, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t themedColoringDo) Save(values ...*model.ThemedColoring) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t themedColoringDo) First() (*model.ThemedColoring, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoring), nil
	}
}

func (t themedColoringDo) Take() (*model.ThemedColoring, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoring), nil
	}
}

func (t themedColoringDo) Last() (*model.ThemedColoring, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoring), nil
	}
}

func (t themedColoringDo) Find() ([]*model.ThemedColoring, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThemedColoring), err
}

func (t themedColoringDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThemedColoring, err error) {
	buf := make([]*model.ThemedColoring, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t themedColoringDo) FindInBatches(result *[]*model.ThemedColoring, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t themedColoringDo) Attrs(attrs ...field.AssignExpr) IThemedColoringDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t themedColoringDo) Assign(attrs ...field.AssignExpr) IThemedColoringDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t themedColoringDo) Joins(fields ...field.RelationField) IThemedColoringDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t themedColoringDo) Preload(fields ...field.RelationField) IThemedColoringDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t themedColoringDo) FirstOrInit() (*model.ThemedColoring, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoring), nil
	}
}

func (t themedColoringDo) FirstOrCreate() (*model.ThemedColoring, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThemedColoring), nil
	}
}

func (t themedColoringDo) FindByPage(offset int, limit int) (result []*model.ThemedColoring, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t themedColoringDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t themedColoringDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t themedColoringDo) Delete(models ...*model.ThemedColoring) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *themedColoringDo) withDO(do gen.Dao) *themedColoringDo {
	t.DO = *do.(*gen.DO)
	return t
}
