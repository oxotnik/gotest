// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newUserInfoSetting(db *gorm.DB, opts ...gen.DOOption) userInfoSetting {
	_userInfoSetting := userInfoSetting{}

	_userInfoSetting.userInfoSettingDo.UseDB(db, opts...)
	_userInfoSetting.userInfoSettingDo.UseModel(&model.UserInfoSetting{})

	tableName := _userInfoSetting.userInfoSettingDo.TableName()
	_userInfoSetting.ALL = field.NewAsterisk(tableName)
	_userInfoSetting.DateCreate = field.NewTime(tableName, "date_create")
	_userInfoSetting.DateLastChange = field.NewTime(tableName, "date_last_change")
	_userInfoSetting.CreaterID = field.NewInt64(tableName, "creater_id")
	_userInfoSetting.ChangerID = field.NewInt64(tableName, "changer_id")
	_userInfoSetting.ID = field.NewInt64(tableName, "id")
	_userInfoSetting.WbAPIKey = field.NewString(tableName, "wb_api_key")
	_userInfoSetting.IsActiveWbAPIKey = field.NewBool(tableName, "is_active_wb_api_key")
	_userInfoSetting.TgChatID = field.NewInt64(tableName, "tg_chat_id")
	_userInfoSetting.IsTgNotification = field.NewBool(tableName, "is_tg_notification")
	_userInfoSetting.TgKey = field.NewString(tableName, "tg_key")
	_userInfoSetting.TgKeyOfActionDate = field.NewTime(tableName, "tg_key_of_action_date")
	_userInfoSetting.TgKeyCounter = field.NewInt32(tableName, "tg_key_counter")
	_userInfoSetting.WbSuppliersLogin = field.NewString(tableName, "wb_suppliers_login")
	_userInfoSetting.WbSuppliersPassword = field.NewString(tableName, "wb_suppliers_password")
	_userInfoSetting.WbSuppliersKey = field.NewString(tableName, "wb_suppliers_key")
	_userInfoSetting.WbDateLastRequest = field.NewTime(tableName, "wb_date_last_request")
	_userInfoSetting.ExpiresWbSuppliersKey = field.NewTime(tableName, "expires_wb_suppliers_key")

	_userInfoSetting.fillFieldMap()

	return _userInfoSetting
}

type userInfoSetting struct {
	userInfoSettingDo

	ALL                   field.Asterisk
	DateCreate            field.Time
	DateLastChange        field.Time
	CreaterID             field.Int64
	ChangerID             field.Int64
	ID                    field.Int64
	WbAPIKey              field.String
	IsActiveWbAPIKey      field.Bool
	TgChatID              field.Int64
	IsTgNotification      field.Bool
	TgKey                 field.String
	TgKeyOfActionDate     field.Time
	TgKeyCounter          field.Int32
	WbSuppliersLogin      field.String
	WbSuppliersPassword   field.String
	WbSuppliersKey        field.String
	WbDateLastRequest     field.Time
	ExpiresWbSuppliersKey field.Time

	fieldMap map[string]field.Expr
}

func (u userInfoSetting) Table(newTableName string) *userInfoSetting {
	u.userInfoSettingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInfoSetting) As(alias string) *userInfoSetting {
	u.userInfoSettingDo.DO = *(u.userInfoSettingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInfoSetting) updateTableName(table string) *userInfoSetting {
	u.ALL = field.NewAsterisk(table)
	u.DateCreate = field.NewTime(table, "date_create")
	u.DateLastChange = field.NewTime(table, "date_last_change")
	u.CreaterID = field.NewInt64(table, "creater_id")
	u.ChangerID = field.NewInt64(table, "changer_id")
	u.ID = field.NewInt64(table, "id")
	u.WbAPIKey = field.NewString(table, "wb_api_key")
	u.IsActiveWbAPIKey = field.NewBool(table, "is_active_wb_api_key")
	u.TgChatID = field.NewInt64(table, "tg_chat_id")
	u.IsTgNotification = field.NewBool(table, "is_tg_notification")
	u.TgKey = field.NewString(table, "tg_key")
	u.TgKeyOfActionDate = field.NewTime(table, "tg_key_of_action_date")
	u.TgKeyCounter = field.NewInt32(table, "tg_key_counter")
	u.WbSuppliersLogin = field.NewString(table, "wb_suppliers_login")
	u.WbSuppliersPassword = field.NewString(table, "wb_suppliers_password")
	u.WbSuppliersKey = field.NewString(table, "wb_suppliers_key")
	u.WbDateLastRequest = field.NewTime(table, "wb_date_last_request")
	u.ExpiresWbSuppliersKey = field.NewTime(table, "expires_wb_suppliers_key")

	u.fillFieldMap()

	return u
}

func (u *userInfoSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInfoSetting) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 17)
	u.fieldMap["date_create"] = u.DateCreate
	u.fieldMap["date_last_change"] = u.DateLastChange
	u.fieldMap["creater_id"] = u.CreaterID
	u.fieldMap["changer_id"] = u.ChangerID
	u.fieldMap["id"] = u.ID
	u.fieldMap["wb_api_key"] = u.WbAPIKey
	u.fieldMap["is_active_wb_api_key"] = u.IsActiveWbAPIKey
	u.fieldMap["tg_chat_id"] = u.TgChatID
	u.fieldMap["is_tg_notification"] = u.IsTgNotification
	u.fieldMap["tg_key"] = u.TgKey
	u.fieldMap["tg_key_of_action_date"] = u.TgKeyOfActionDate
	u.fieldMap["tg_key_counter"] = u.TgKeyCounter
	u.fieldMap["wb_suppliers_login"] = u.WbSuppliersLogin
	u.fieldMap["wb_suppliers_password"] = u.WbSuppliersPassword
	u.fieldMap["wb_suppliers_key"] = u.WbSuppliersKey
	u.fieldMap["wb_date_last_request"] = u.WbDateLastRequest
	u.fieldMap["expires_wb_suppliers_key"] = u.ExpiresWbSuppliersKey
}

func (u userInfoSetting) clone(db *gorm.DB) userInfoSetting {
	u.userInfoSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInfoSetting) replaceDB(db *gorm.DB) userInfoSetting {
	u.userInfoSettingDo.ReplaceDB(db)
	return u
}

type userInfoSettingDo struct{ gen.DO }

type IUserInfoSettingDo interface {
	gen.SubQuery
	Debug() IUserInfoSettingDo
	WithContext(ctx context.Context) IUserInfoSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInfoSettingDo
	WriteDB() IUserInfoSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInfoSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInfoSettingDo
	Not(conds ...gen.Condition) IUserInfoSettingDo
	Or(conds ...gen.Condition) IUserInfoSettingDo
	Select(conds ...field.Expr) IUserInfoSettingDo
	Where(conds ...gen.Condition) IUserInfoSettingDo
	Order(conds ...field.Expr) IUserInfoSettingDo
	Distinct(cols ...field.Expr) IUserInfoSettingDo
	Omit(cols ...field.Expr) IUserInfoSettingDo
	Join(table schema.Tabler, on ...field.Expr) IUserInfoSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoSettingDo
	Group(cols ...field.Expr) IUserInfoSettingDo
	Having(conds ...gen.Condition) IUserInfoSettingDo
	Limit(limit int) IUserInfoSettingDo
	Offset(offset int) IUserInfoSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoSettingDo
	Unscoped() IUserInfoSettingDo
	Create(values ...*model.UserInfoSetting) error
	CreateInBatches(values []*model.UserInfoSetting, batchSize int) error
	Save(values ...*model.UserInfoSetting) error
	First() (*model.UserInfoSetting, error)
	Take() (*model.UserInfoSetting, error)
	Last() (*model.UserInfoSetting, error)
	Find() ([]*model.UserInfoSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoSetting, err error)
	FindInBatches(result *[]*model.UserInfoSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserInfoSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInfoSettingDo
	Assign(attrs ...field.AssignExpr) IUserInfoSettingDo
	Joins(fields ...field.RelationField) IUserInfoSettingDo
	Preload(fields ...field.RelationField) IUserInfoSettingDo
	FirstOrInit() (*model.UserInfoSetting, error)
	FirstOrCreate() (*model.UserInfoSetting, error)
	FindByPage(offset int, limit int) (result []*model.UserInfoSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInfoSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userInfoSettingDo) Debug() IUserInfoSettingDo {
	return u.withDO(u.DO.Debug())
}

func (u userInfoSettingDo) WithContext(ctx context.Context) IUserInfoSettingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInfoSettingDo) ReadDB() IUserInfoSettingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInfoSettingDo) WriteDB() IUserInfoSettingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInfoSettingDo) Session(config *gorm.Session) IUserInfoSettingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userInfoSettingDo) Clauses(conds ...clause.Expression) IUserInfoSettingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInfoSettingDo) Returning(value interface{}, columns ...string) IUserInfoSettingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInfoSettingDo) Not(conds ...gen.Condition) IUserInfoSettingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInfoSettingDo) Or(conds ...gen.Condition) IUserInfoSettingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInfoSettingDo) Select(conds ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInfoSettingDo) Where(conds ...gen.Condition) IUserInfoSettingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInfoSettingDo) Order(conds ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInfoSettingDo) Distinct(cols ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInfoSettingDo) Omit(cols ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInfoSettingDo) Join(table schema.Tabler, on ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInfoSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInfoSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInfoSettingDo) Group(cols ...field.Expr) IUserInfoSettingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInfoSettingDo) Having(conds ...gen.Condition) IUserInfoSettingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInfoSettingDo) Limit(limit int) IUserInfoSettingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInfoSettingDo) Offset(offset int) IUserInfoSettingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInfoSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoSettingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInfoSettingDo) Unscoped() IUserInfoSettingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInfoSettingDo) Create(values ...*model.UserInfoSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInfoSettingDo) CreateInBatches(values []*model.UserInfoSetting, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInfoSettingDo) Save(values ...*model.UserInfoSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInfoSettingDo) First() (*model.UserInfoSetting, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoSetting), nil
	}
}

func (u userInfoSettingDo) Take() (*model.UserInfoSetting, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoSetting), nil
	}
}

func (u userInfoSettingDo) Last() (*model.UserInfoSetting, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoSetting), nil
	}
}

func (u userInfoSettingDo) Find() ([]*model.UserInfoSetting, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInfoSetting), err
}

func (u userInfoSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoSetting, err error) {
	buf := make([]*model.UserInfoSetting, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInfoSettingDo) FindInBatches(result *[]*model.UserInfoSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInfoSettingDo) Attrs(attrs ...field.AssignExpr) IUserInfoSettingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInfoSettingDo) Assign(attrs ...field.AssignExpr) IUserInfoSettingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInfoSettingDo) Joins(fields ...field.RelationField) IUserInfoSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInfoSettingDo) Preload(fields ...field.RelationField) IUserInfoSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInfoSettingDo) FirstOrInit() (*model.UserInfoSetting, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoSetting), nil
	}
}

func (u userInfoSettingDo) FirstOrCreate() (*model.UserInfoSetting, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoSetting), nil
	}
}

func (u userInfoSettingDo) FindByPage(offset int, limit int) (result []*model.UserInfoSetting, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInfoSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInfoSettingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInfoSettingDo) Delete(models ...*model.UserInfoSetting) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInfoSettingDo) withDO(do gen.Dao) *userInfoSettingDo {
	u.DO = *do.(*gen.DO)
	return u
}
