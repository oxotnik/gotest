// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newMapHandbooksList(db *gorm.DB, opts ...gen.DOOption) mapHandbooksList {
	_mapHandbooksList := mapHandbooksList{}

	_mapHandbooksList.mapHandbooksListDo.UseDB(db, opts...)
	_mapHandbooksList.mapHandbooksListDo.UseModel(&model.MapHandbooksList{})

	tableName := _mapHandbooksList.mapHandbooksListDo.TableName()
	_mapHandbooksList.ALL = field.NewAsterisk(tableName)
	_mapHandbooksList.ID = field.NewInt32(tableName, "id")
	_mapHandbooksList.Title = field.NewString(tableName, "title")
	_mapHandbooksList.ExtID = field.NewInt32(tableName, "ext_id")
	_mapHandbooksList.ProjectID = field.NewInt32(tableName, "project_id")
	_mapHandbooksList.CascadeID = field.NewInt32(tableName, "cascade_id")

	_mapHandbooksList.fillFieldMap()

	return _mapHandbooksList
}

type mapHandbooksList struct {
	mapHandbooksListDo

	ALL       field.Asterisk
	ID        field.Int32
	Title     field.String
	ExtID     field.Int32
	ProjectID field.Int32
	CascadeID field.Int32

	fieldMap map[string]field.Expr
}

func (m mapHandbooksList) Table(newTableName string) *mapHandbooksList {
	m.mapHandbooksListDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mapHandbooksList) As(alias string) *mapHandbooksList {
	m.mapHandbooksListDo.DO = *(m.mapHandbooksListDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mapHandbooksList) updateTableName(table string) *mapHandbooksList {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Title = field.NewString(table, "title")
	m.ExtID = field.NewInt32(table, "ext_id")
	m.ProjectID = field.NewInt32(table, "project_id")
	m.CascadeID = field.NewInt32(table, "cascade_id")

	m.fillFieldMap()

	return m
}

func (m *mapHandbooksList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mapHandbooksList) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["title"] = m.Title
	m.fieldMap["ext_id"] = m.ExtID
	m.fieldMap["project_id"] = m.ProjectID
	m.fieldMap["cascade_id"] = m.CascadeID
}

func (m mapHandbooksList) clone(db *gorm.DB) mapHandbooksList {
	m.mapHandbooksListDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mapHandbooksList) replaceDB(db *gorm.DB) mapHandbooksList {
	m.mapHandbooksListDo.ReplaceDB(db)
	return m
}

type mapHandbooksListDo struct{ gen.DO }

type IMapHandbooksListDo interface {
	gen.SubQuery
	Debug() IMapHandbooksListDo
	WithContext(ctx context.Context) IMapHandbooksListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMapHandbooksListDo
	WriteDB() IMapHandbooksListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMapHandbooksListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMapHandbooksListDo
	Not(conds ...gen.Condition) IMapHandbooksListDo
	Or(conds ...gen.Condition) IMapHandbooksListDo
	Select(conds ...field.Expr) IMapHandbooksListDo
	Where(conds ...gen.Condition) IMapHandbooksListDo
	Order(conds ...field.Expr) IMapHandbooksListDo
	Distinct(cols ...field.Expr) IMapHandbooksListDo
	Omit(cols ...field.Expr) IMapHandbooksListDo
	Join(table schema.Tabler, on ...field.Expr) IMapHandbooksListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMapHandbooksListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMapHandbooksListDo
	Group(cols ...field.Expr) IMapHandbooksListDo
	Having(conds ...gen.Condition) IMapHandbooksListDo
	Limit(limit int) IMapHandbooksListDo
	Offset(offset int) IMapHandbooksListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMapHandbooksListDo
	Unscoped() IMapHandbooksListDo
	Create(values ...*model.MapHandbooksList) error
	CreateInBatches(values []*model.MapHandbooksList, batchSize int) error
	Save(values ...*model.MapHandbooksList) error
	First() (*model.MapHandbooksList, error)
	Take() (*model.MapHandbooksList, error)
	Last() (*model.MapHandbooksList, error)
	Find() ([]*model.MapHandbooksList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapHandbooksList, err error)
	FindInBatches(result *[]*model.MapHandbooksList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MapHandbooksList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMapHandbooksListDo
	Assign(attrs ...field.AssignExpr) IMapHandbooksListDo
	Joins(fields ...field.RelationField) IMapHandbooksListDo
	Preload(fields ...field.RelationField) IMapHandbooksListDo
	FirstOrInit() (*model.MapHandbooksList, error)
	FirstOrCreate() (*model.MapHandbooksList, error)
	FindByPage(offset int, limit int) (result []*model.MapHandbooksList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMapHandbooksListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mapHandbooksListDo) Debug() IMapHandbooksListDo {
	return m.withDO(m.DO.Debug())
}

func (m mapHandbooksListDo) WithContext(ctx context.Context) IMapHandbooksListDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mapHandbooksListDo) ReadDB() IMapHandbooksListDo {
	return m.Clauses(dbresolver.Read)
}

func (m mapHandbooksListDo) WriteDB() IMapHandbooksListDo {
	return m.Clauses(dbresolver.Write)
}

func (m mapHandbooksListDo) Session(config *gorm.Session) IMapHandbooksListDo {
	return m.withDO(m.DO.Session(config))
}

func (m mapHandbooksListDo) Clauses(conds ...clause.Expression) IMapHandbooksListDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mapHandbooksListDo) Returning(value interface{}, columns ...string) IMapHandbooksListDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mapHandbooksListDo) Not(conds ...gen.Condition) IMapHandbooksListDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mapHandbooksListDo) Or(conds ...gen.Condition) IMapHandbooksListDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mapHandbooksListDo) Select(conds ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mapHandbooksListDo) Where(conds ...gen.Condition) IMapHandbooksListDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mapHandbooksListDo) Order(conds ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mapHandbooksListDo) Distinct(cols ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mapHandbooksListDo) Omit(cols ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mapHandbooksListDo) Join(table schema.Tabler, on ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mapHandbooksListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mapHandbooksListDo) RightJoin(table schema.Tabler, on ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mapHandbooksListDo) Group(cols ...field.Expr) IMapHandbooksListDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mapHandbooksListDo) Having(conds ...gen.Condition) IMapHandbooksListDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mapHandbooksListDo) Limit(limit int) IMapHandbooksListDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mapHandbooksListDo) Offset(offset int) IMapHandbooksListDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mapHandbooksListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMapHandbooksListDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mapHandbooksListDo) Unscoped() IMapHandbooksListDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mapHandbooksListDo) Create(values ...*model.MapHandbooksList) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mapHandbooksListDo) CreateInBatches(values []*model.MapHandbooksList, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mapHandbooksListDo) Save(values ...*model.MapHandbooksList) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mapHandbooksListDo) First() (*model.MapHandbooksList, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbooksList), nil
	}
}

func (m mapHandbooksListDo) Take() (*model.MapHandbooksList, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbooksList), nil
	}
}

func (m mapHandbooksListDo) Last() (*model.MapHandbooksList, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbooksList), nil
	}
}

func (m mapHandbooksListDo) Find() ([]*model.MapHandbooksList, error) {
	result, err := m.DO.Find()
	return result.([]*model.MapHandbooksList), err
}

func (m mapHandbooksListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapHandbooksList, err error) {
	buf := make([]*model.MapHandbooksList, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mapHandbooksListDo) FindInBatches(result *[]*model.MapHandbooksList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mapHandbooksListDo) Attrs(attrs ...field.AssignExpr) IMapHandbooksListDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mapHandbooksListDo) Assign(attrs ...field.AssignExpr) IMapHandbooksListDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mapHandbooksListDo) Joins(fields ...field.RelationField) IMapHandbooksListDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mapHandbooksListDo) Preload(fields ...field.RelationField) IMapHandbooksListDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mapHandbooksListDo) FirstOrInit() (*model.MapHandbooksList, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbooksList), nil
	}
}

func (m mapHandbooksListDo) FirstOrCreate() (*model.MapHandbooksList, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapHandbooksList), nil
	}
}

func (m mapHandbooksListDo) FindByPage(offset int, limit int) (result []*model.MapHandbooksList, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mapHandbooksListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mapHandbooksListDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mapHandbooksListDo) Delete(models ...*model.MapHandbooksList) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mapHandbooksListDo) withDO(do gen.Dao) *mapHandbooksListDo {
	m.DO = *do.(*gen.DO)
	return m
}
