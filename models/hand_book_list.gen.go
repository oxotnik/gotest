// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newHandBookList(db *gorm.DB, opts ...gen.DOOption) handBookList {
	_handBookList := handBookList{}

	_handBookList.handBookListDo.UseDB(db, opts...)
	_handBookList.handBookListDo.UseModel(&model.HandBookList{})

	tableName := _handBookList.handBookListDo.TableName()
	_handBookList.ALL = field.NewAsterisk(tableName)
	_handBookList.HandBookTC = field.NewString(tableName, "HandBook_TC")
	_handBookList.Title = field.NewString(tableName, "title")
	_handBookList.Access = field.NewString(tableName, "access")

	_handBookList.fillFieldMap()

	return _handBookList
}

type handBookList struct {
	handBookListDo

	ALL        field.Asterisk
	HandBookTC field.String
	Title      field.String
	Access     field.String

	fieldMap map[string]field.Expr
}

func (h handBookList) Table(newTableName string) *handBookList {
	h.handBookListDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h handBookList) As(alias string) *handBookList {
	h.handBookListDo.DO = *(h.handBookListDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *handBookList) updateTableName(table string) *handBookList {
	h.ALL = field.NewAsterisk(table)
	h.HandBookTC = field.NewString(table, "HandBook_TC")
	h.Title = field.NewString(table, "title")
	h.Access = field.NewString(table, "access")

	h.fillFieldMap()

	return h
}

func (h *handBookList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *handBookList) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 3)
	h.fieldMap["HandBook_TC"] = h.HandBookTC
	h.fieldMap["title"] = h.Title
	h.fieldMap["access"] = h.Access
}

func (h handBookList) clone(db *gorm.DB) handBookList {
	h.handBookListDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h handBookList) replaceDB(db *gorm.DB) handBookList {
	h.handBookListDo.ReplaceDB(db)
	return h
}

type handBookListDo struct{ gen.DO }

type IHandBookListDo interface {
	gen.SubQuery
	Debug() IHandBookListDo
	WithContext(ctx context.Context) IHandBookListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHandBookListDo
	WriteDB() IHandBookListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHandBookListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHandBookListDo
	Not(conds ...gen.Condition) IHandBookListDo
	Or(conds ...gen.Condition) IHandBookListDo
	Select(conds ...field.Expr) IHandBookListDo
	Where(conds ...gen.Condition) IHandBookListDo
	Order(conds ...field.Expr) IHandBookListDo
	Distinct(cols ...field.Expr) IHandBookListDo
	Omit(cols ...field.Expr) IHandBookListDo
	Join(table schema.Tabler, on ...field.Expr) IHandBookListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHandBookListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHandBookListDo
	Group(cols ...field.Expr) IHandBookListDo
	Having(conds ...gen.Condition) IHandBookListDo
	Limit(limit int) IHandBookListDo
	Offset(offset int) IHandBookListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHandBookListDo
	Unscoped() IHandBookListDo
	Create(values ...*model.HandBookList) error
	CreateInBatches(values []*model.HandBookList, batchSize int) error
	Save(values ...*model.HandBookList) error
	First() (*model.HandBookList, error)
	Take() (*model.HandBookList, error)
	Last() (*model.HandBookList, error)
	Find() ([]*model.HandBookList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HandBookList, err error)
	FindInBatches(result *[]*model.HandBookList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HandBookList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHandBookListDo
	Assign(attrs ...field.AssignExpr) IHandBookListDo
	Joins(fields ...field.RelationField) IHandBookListDo
	Preload(fields ...field.RelationField) IHandBookListDo
	FirstOrInit() (*model.HandBookList, error)
	FirstOrCreate() (*model.HandBookList, error)
	FindByPage(offset int, limit int) (result []*model.HandBookList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHandBookListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h handBookListDo) Debug() IHandBookListDo {
	return h.withDO(h.DO.Debug())
}

func (h handBookListDo) WithContext(ctx context.Context) IHandBookListDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h handBookListDo) ReadDB() IHandBookListDo {
	return h.Clauses(dbresolver.Read)
}

func (h handBookListDo) WriteDB() IHandBookListDo {
	return h.Clauses(dbresolver.Write)
}

func (h handBookListDo) Session(config *gorm.Session) IHandBookListDo {
	return h.withDO(h.DO.Session(config))
}

func (h handBookListDo) Clauses(conds ...clause.Expression) IHandBookListDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h handBookListDo) Returning(value interface{}, columns ...string) IHandBookListDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h handBookListDo) Not(conds ...gen.Condition) IHandBookListDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h handBookListDo) Or(conds ...gen.Condition) IHandBookListDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h handBookListDo) Select(conds ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h handBookListDo) Where(conds ...gen.Condition) IHandBookListDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h handBookListDo) Order(conds ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h handBookListDo) Distinct(cols ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h handBookListDo) Omit(cols ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h handBookListDo) Join(table schema.Tabler, on ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h handBookListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h handBookListDo) RightJoin(table schema.Tabler, on ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h handBookListDo) Group(cols ...field.Expr) IHandBookListDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h handBookListDo) Having(conds ...gen.Condition) IHandBookListDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h handBookListDo) Limit(limit int) IHandBookListDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h handBookListDo) Offset(offset int) IHandBookListDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h handBookListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHandBookListDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h handBookListDo) Unscoped() IHandBookListDo {
	return h.withDO(h.DO.Unscoped())
}

func (h handBookListDo) Create(values ...*model.HandBookList) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h handBookListDo) CreateInBatches(values []*model.HandBookList, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h handBookListDo) Save(values ...*model.HandBookList) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h handBookListDo) First() (*model.HandBookList, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBookList), nil
	}
}

func (h handBookListDo) Take() (*model.HandBookList, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBookList), nil
	}
}

func (h handBookListDo) Last() (*model.HandBookList, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBookList), nil
	}
}

func (h handBookListDo) Find() ([]*model.HandBookList, error) {
	result, err := h.DO.Find()
	return result.([]*model.HandBookList), err
}

func (h handBookListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HandBookList, err error) {
	buf := make([]*model.HandBookList, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h handBookListDo) FindInBatches(result *[]*model.HandBookList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h handBookListDo) Attrs(attrs ...field.AssignExpr) IHandBookListDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h handBookListDo) Assign(attrs ...field.AssignExpr) IHandBookListDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h handBookListDo) Joins(fields ...field.RelationField) IHandBookListDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h handBookListDo) Preload(fields ...field.RelationField) IHandBookListDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h handBookListDo) FirstOrInit() (*model.HandBookList, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBookList), nil
	}
}

func (h handBookListDo) FirstOrCreate() (*model.HandBookList, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HandBookList), nil
	}
}

func (h handBookListDo) FindByPage(offset int, limit int) (result []*model.HandBookList, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h handBookListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h handBookListDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h handBookListDo) Delete(models ...*model.HandBookList) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *handBookListDo) withDO(do gen.Dao) *handBookListDo {
	h.DO = *do.(*gen.DO)
	return h
}
