// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newEmailsSent(db *gorm.DB, opts ...gen.DOOption) emailsSent {
	_emailsSent := emailsSent{}

	_emailsSent.emailsSentDo.UseDB(db, opts...)
	_emailsSent.emailsSentDo.UseModel(&model.EmailsSent{})

	tableName := _emailsSent.emailsSentDo.TableName()
	_emailsSent.ALL = field.NewAsterisk(tableName)
	_emailsSent.ID = field.NewInt32(tableName, "id")
	_emailsSent.DateCreate = field.NewTime(tableName, "date_create")
	_emailsSent.DateLastChange = field.NewTime(tableName, "date_last_change")
	_emailsSent.CreaterID = field.NewInt64(tableName, "creater_id")
	_emailsSent.ChangerID = field.NewInt64(tableName, "changer_id")
	_emailsSent.KeyTc = field.NewString(tableName, "key_tc")
	_emailsSent.Subject = field.NewString(tableName, "subject")
	_emailsSent.Body = field.NewString(tableName, "body")
	_emailsSent.StudentID = field.NewInt32(tableName, "student_id")
	_emailsSent.Email = field.NewString(tableName, "email")
	_emailsSent.Files = field.NewString(tableName, "files")
	_emailsSent.IsSent = field.NewBool(tableName, "is_sent")
	_emailsSent.Message = field.NewString(tableName, "message")
	_emailsSent.ObjID = field.NewInt32(tableName, "obj_id")

	_emailsSent.fillFieldMap()

	return _emailsSent
}

type emailsSent struct {
	emailsSentDo

	ALL            field.Asterisk
	ID             field.Int32
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64
	KeyTc          field.String
	Subject        field.String
	Body           field.String
	StudentID      field.Int32
	Email          field.String
	Files          field.String
	IsSent         field.Bool
	Message        field.String
	ObjID          field.Int32

	fieldMap map[string]field.Expr
}

func (e emailsSent) Table(newTableName string) *emailsSent {
	e.emailsSentDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailsSent) As(alias string) *emailsSent {
	e.emailsSentDo.DO = *(e.emailsSentDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailsSent) updateTableName(table string) *emailsSent {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.DateCreate = field.NewTime(table, "date_create")
	e.DateLastChange = field.NewTime(table, "date_last_change")
	e.CreaterID = field.NewInt64(table, "creater_id")
	e.ChangerID = field.NewInt64(table, "changer_id")
	e.KeyTc = field.NewString(table, "key_tc")
	e.Subject = field.NewString(table, "subject")
	e.Body = field.NewString(table, "body")
	e.StudentID = field.NewInt32(table, "student_id")
	e.Email = field.NewString(table, "email")
	e.Files = field.NewString(table, "files")
	e.IsSent = field.NewBool(table, "is_sent")
	e.Message = field.NewString(table, "message")
	e.ObjID = field.NewInt32(table, "obj_id")

	e.fillFieldMap()

	return e
}

func (e *emailsSent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailsSent) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["date_create"] = e.DateCreate
	e.fieldMap["date_last_change"] = e.DateLastChange
	e.fieldMap["creater_id"] = e.CreaterID
	e.fieldMap["changer_id"] = e.ChangerID
	e.fieldMap["key_tc"] = e.KeyTc
	e.fieldMap["subject"] = e.Subject
	e.fieldMap["body"] = e.Body
	e.fieldMap["student_id"] = e.StudentID
	e.fieldMap["email"] = e.Email
	e.fieldMap["files"] = e.Files
	e.fieldMap["is_sent"] = e.IsSent
	e.fieldMap["message"] = e.Message
	e.fieldMap["obj_id"] = e.ObjID
}

func (e emailsSent) clone(db *gorm.DB) emailsSent {
	e.emailsSentDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailsSent) replaceDB(db *gorm.DB) emailsSent {
	e.emailsSentDo.ReplaceDB(db)
	return e
}

type emailsSentDo struct{ gen.DO }

type IEmailsSentDo interface {
	gen.SubQuery
	Debug() IEmailsSentDo
	WithContext(ctx context.Context) IEmailsSentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmailsSentDo
	WriteDB() IEmailsSentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmailsSentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmailsSentDo
	Not(conds ...gen.Condition) IEmailsSentDo
	Or(conds ...gen.Condition) IEmailsSentDo
	Select(conds ...field.Expr) IEmailsSentDo
	Where(conds ...gen.Condition) IEmailsSentDo
	Order(conds ...field.Expr) IEmailsSentDo
	Distinct(cols ...field.Expr) IEmailsSentDo
	Omit(cols ...field.Expr) IEmailsSentDo
	Join(table schema.Tabler, on ...field.Expr) IEmailsSentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmailsSentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmailsSentDo
	Group(cols ...field.Expr) IEmailsSentDo
	Having(conds ...gen.Condition) IEmailsSentDo
	Limit(limit int) IEmailsSentDo
	Offset(offset int) IEmailsSentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailsSentDo
	Unscoped() IEmailsSentDo
	Create(values ...*model.EmailsSent) error
	CreateInBatches(values []*model.EmailsSent, batchSize int) error
	Save(values ...*model.EmailsSent) error
	First() (*model.EmailsSent, error)
	Take() (*model.EmailsSent, error)
	Last() (*model.EmailsSent, error)
	Find() ([]*model.EmailsSent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailsSent, err error)
	FindInBatches(result *[]*model.EmailsSent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EmailsSent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmailsSentDo
	Assign(attrs ...field.AssignExpr) IEmailsSentDo
	Joins(fields ...field.RelationField) IEmailsSentDo
	Preload(fields ...field.RelationField) IEmailsSentDo
	FirstOrInit() (*model.EmailsSent, error)
	FirstOrCreate() (*model.EmailsSent, error)
	FindByPage(offset int, limit int) (result []*model.EmailsSent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmailsSentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e emailsSentDo) Debug() IEmailsSentDo {
	return e.withDO(e.DO.Debug())
}

func (e emailsSentDo) WithContext(ctx context.Context) IEmailsSentDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailsSentDo) ReadDB() IEmailsSentDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailsSentDo) WriteDB() IEmailsSentDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailsSentDo) Session(config *gorm.Session) IEmailsSentDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailsSentDo) Clauses(conds ...clause.Expression) IEmailsSentDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailsSentDo) Returning(value interface{}, columns ...string) IEmailsSentDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailsSentDo) Not(conds ...gen.Condition) IEmailsSentDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailsSentDo) Or(conds ...gen.Condition) IEmailsSentDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailsSentDo) Select(conds ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailsSentDo) Where(conds ...gen.Condition) IEmailsSentDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailsSentDo) Order(conds ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailsSentDo) Distinct(cols ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailsSentDo) Omit(cols ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailsSentDo) Join(table schema.Tabler, on ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailsSentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailsSentDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailsSentDo) Group(cols ...field.Expr) IEmailsSentDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailsSentDo) Having(conds ...gen.Condition) IEmailsSentDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailsSentDo) Limit(limit int) IEmailsSentDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailsSentDo) Offset(offset int) IEmailsSentDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailsSentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailsSentDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailsSentDo) Unscoped() IEmailsSentDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailsSentDo) Create(values ...*model.EmailsSent) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailsSentDo) CreateInBatches(values []*model.EmailsSent, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailsSentDo) Save(values ...*model.EmailsSent) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailsSentDo) First() (*model.EmailsSent, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailsSent), nil
	}
}

func (e emailsSentDo) Take() (*model.EmailsSent, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailsSent), nil
	}
}

func (e emailsSentDo) Last() (*model.EmailsSent, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailsSent), nil
	}
}

func (e emailsSentDo) Find() ([]*model.EmailsSent, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmailsSent), err
}

func (e emailsSentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailsSent, err error) {
	buf := make([]*model.EmailsSent, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailsSentDo) FindInBatches(result *[]*model.EmailsSent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailsSentDo) Attrs(attrs ...field.AssignExpr) IEmailsSentDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailsSentDo) Assign(attrs ...field.AssignExpr) IEmailsSentDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailsSentDo) Joins(fields ...field.RelationField) IEmailsSentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailsSentDo) Preload(fields ...field.RelationField) IEmailsSentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailsSentDo) FirstOrInit() (*model.EmailsSent, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailsSent), nil
	}
}

func (e emailsSentDo) FirstOrCreate() (*model.EmailsSent, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailsSent), nil
	}
}

func (e emailsSentDo) FindByPage(offset int, limit int) (result []*model.EmailsSent, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailsSentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailsSentDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailsSentDo) Delete(models ...*model.EmailsSent) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailsSentDo) withDO(do gen.Dao) *emailsSentDo {
	e.DO = *do.(*gen.DO)
	return e
}
