// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	AdminSidebarItem     *adminSidebarItem
	AspNetPrivilege      *aspNetPrivilege
	AspNetRole           *aspNetRole
	AspNetRoleClaim      *aspNetRoleClaim
	AspNetUser           *aspNetUser
	AspNetUserClaim      *aspNetUserClaim
	AspNetUserLogin      *aspNetUserLogin
	AspNetUserRole       *aspNetUserRole
	AspNetUserToken      *aspNetUserToken
	DashboardChart       *dashboardChart
	EmailTemplate        *emailTemplate
	EmailsSent           *emailsSent
	Event                *event
	File                 *file
	FiltersForm          *filtersForm
	HandBook             *handBook
	HandBookList         *handBookList
	LibraryIcon          *libraryIcon
	LibraryStyle         *libraryStyle
	MapHandbook          *mapHandbook
	MapHandbooksList     *mapHandbooksList
	MapLabel             *mapLabel
	MapLayer             *mapLayer
	MapLayersSchemaTable *mapLayersSchemaTable
	MapObject            *mapObject
	MapProject           *mapProject
	MapSchemaColumn      *mapSchemaColumn
	MapSchemaTable       *mapSchemaTable
	MapSearch            *mapSearch
	MapSetting           *mapSetting
	Notification         *notification
	Setting              *setting
	SpatialRefSy         *spatialRefSy
	SyncZulu             *syncZulu
	ThemedColoring       *themedColoring
	ThemedColoringRule   *themedColoringRule
	UserInfo             *userInfo
	UserInfoPrivilege    *userInfoPrivilege
	UserInfoRefreshToken *userInfoRefreshToken
	UserInfoSetting      *userInfoSetting
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AdminSidebarItem = &Q.AdminSidebarItem
	AspNetPrivilege = &Q.AspNetPrivilege
	AspNetRole = &Q.AspNetRole
	AspNetRoleClaim = &Q.AspNetRoleClaim
	AspNetUser = &Q.AspNetUser
	AspNetUserClaim = &Q.AspNetUserClaim
	AspNetUserLogin = &Q.AspNetUserLogin
	AspNetUserRole = &Q.AspNetUserRole
	AspNetUserToken = &Q.AspNetUserToken
	DashboardChart = &Q.DashboardChart
	EmailTemplate = &Q.EmailTemplate
	EmailsSent = &Q.EmailsSent
	Event = &Q.Event
	File = &Q.File
	FiltersForm = &Q.FiltersForm
	HandBook = &Q.HandBook
	HandBookList = &Q.HandBookList
	LibraryIcon = &Q.LibraryIcon
	LibraryStyle = &Q.LibraryStyle
	MapHandbook = &Q.MapHandbook
	MapHandbooksList = &Q.MapHandbooksList
	MapLabel = &Q.MapLabel
	MapLayer = &Q.MapLayer
	MapLayersSchemaTable = &Q.MapLayersSchemaTable
	MapObject = &Q.MapObject
	MapProject = &Q.MapProject
	MapSchemaColumn = &Q.MapSchemaColumn
	MapSchemaTable = &Q.MapSchemaTable
	MapSearch = &Q.MapSearch
	MapSetting = &Q.MapSetting
	Notification = &Q.Notification
	Setting = &Q.Setting
	SpatialRefSy = &Q.SpatialRefSy
	SyncZulu = &Q.SyncZulu
	ThemedColoring = &Q.ThemedColoring
	ThemedColoringRule = &Q.ThemedColoringRule
	UserInfo = &Q.UserInfo
	UserInfoPrivilege = &Q.UserInfoPrivilege
	UserInfoRefreshToken = &Q.UserInfoRefreshToken
	UserInfoSetting = &Q.UserInfoSetting
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		AdminSidebarItem:     newAdminSidebarItem(db, opts...),
		AspNetPrivilege:      newAspNetPrivilege(db, opts...),
		AspNetRole:           newAspNetRole(db, opts...),
		AspNetRoleClaim:      newAspNetRoleClaim(db, opts...),
		AspNetUser:           newAspNetUser(db, opts...),
		AspNetUserClaim:      newAspNetUserClaim(db, opts...),
		AspNetUserLogin:      newAspNetUserLogin(db, opts...),
		AspNetUserRole:       newAspNetUserRole(db, opts...),
		AspNetUserToken:      newAspNetUserToken(db, opts...),
		DashboardChart:       newDashboardChart(db, opts...),
		EmailTemplate:        newEmailTemplate(db, opts...),
		EmailsSent:           newEmailsSent(db, opts...),
		Event:                newEvent(db, opts...),
		File:                 newFile(db, opts...),
		FiltersForm:          newFiltersForm(db, opts...),
		HandBook:             newHandBook(db, opts...),
		HandBookList:         newHandBookList(db, opts...),
		LibraryIcon:          newLibraryIcon(db, opts...),
		LibraryStyle:         newLibraryStyle(db, opts...),
		MapHandbook:          newMapHandbook(db, opts...),
		MapHandbooksList:     newMapHandbooksList(db, opts...),
		MapLabel:             newMapLabel(db, opts...),
		MapLayer:             newMapLayer(db, opts...),
		MapLayersSchemaTable: newMapLayersSchemaTable(db, opts...),
		MapObject:            newMapObject(db, opts...),
		MapProject:           newMapProject(db, opts...),
		MapSchemaColumn:      newMapSchemaColumn(db, opts...),
		MapSchemaTable:       newMapSchemaTable(db, opts...),
		MapSearch:            newMapSearch(db, opts...),
		MapSetting:           newMapSetting(db, opts...),
		Notification:         newNotification(db, opts...),
		Setting:              newSetting(db, opts...),
		SpatialRefSy:         newSpatialRefSy(db, opts...),
		SyncZulu:             newSyncZulu(db, opts...),
		ThemedColoring:       newThemedColoring(db, opts...),
		ThemedColoringRule:   newThemedColoringRule(db, opts...),
		UserInfo:             newUserInfo(db, opts...),
		UserInfoPrivilege:    newUserInfoPrivilege(db, opts...),
		UserInfoRefreshToken: newUserInfoRefreshToken(db, opts...),
		UserInfoSetting:      newUserInfoSetting(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AdminSidebarItem     adminSidebarItem
	AspNetPrivilege      aspNetPrivilege
	AspNetRole           aspNetRole
	AspNetRoleClaim      aspNetRoleClaim
	AspNetUser           aspNetUser
	AspNetUserClaim      aspNetUserClaim
	AspNetUserLogin      aspNetUserLogin
	AspNetUserRole       aspNetUserRole
	AspNetUserToken      aspNetUserToken
	DashboardChart       dashboardChart
	EmailTemplate        emailTemplate
	EmailsSent           emailsSent
	Event                event
	File                 file
	FiltersForm          filtersForm
	HandBook             handBook
	HandBookList         handBookList
	LibraryIcon          libraryIcon
	LibraryStyle         libraryStyle
	MapHandbook          mapHandbook
	MapHandbooksList     mapHandbooksList
	MapLabel             mapLabel
	MapLayer             mapLayer
	MapLayersSchemaTable mapLayersSchemaTable
	MapObject            mapObject
	MapProject           mapProject
	MapSchemaColumn      mapSchemaColumn
	MapSchemaTable       mapSchemaTable
	MapSearch            mapSearch
	MapSetting           mapSetting
	Notification         notification
	Setting              setting
	SpatialRefSy         spatialRefSy
	SyncZulu             syncZulu
	ThemedColoring       themedColoring
	ThemedColoringRule   themedColoringRule
	UserInfo             userInfo
	UserInfoPrivilege    userInfoPrivilege
	UserInfoRefreshToken userInfoRefreshToken
	UserInfoSetting      userInfoSetting
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		AdminSidebarItem:     q.AdminSidebarItem.clone(db),
		AspNetPrivilege:      q.AspNetPrivilege.clone(db),
		AspNetRole:           q.AspNetRole.clone(db),
		AspNetRoleClaim:      q.AspNetRoleClaim.clone(db),
		AspNetUser:           q.AspNetUser.clone(db),
		AspNetUserClaim:      q.AspNetUserClaim.clone(db),
		AspNetUserLogin:      q.AspNetUserLogin.clone(db),
		AspNetUserRole:       q.AspNetUserRole.clone(db),
		AspNetUserToken:      q.AspNetUserToken.clone(db),
		DashboardChart:       q.DashboardChart.clone(db),
		EmailTemplate:        q.EmailTemplate.clone(db),
		EmailsSent:           q.EmailsSent.clone(db),
		Event:                q.Event.clone(db),
		File:                 q.File.clone(db),
		FiltersForm:          q.FiltersForm.clone(db),
		HandBook:             q.HandBook.clone(db),
		HandBookList:         q.HandBookList.clone(db),
		LibraryIcon:          q.LibraryIcon.clone(db),
		LibraryStyle:         q.LibraryStyle.clone(db),
		MapHandbook:          q.MapHandbook.clone(db),
		MapHandbooksList:     q.MapHandbooksList.clone(db),
		MapLabel:             q.MapLabel.clone(db),
		MapLayer:             q.MapLayer.clone(db),
		MapLayersSchemaTable: q.MapLayersSchemaTable.clone(db),
		MapObject:            q.MapObject.clone(db),
		MapProject:           q.MapProject.clone(db),
		MapSchemaColumn:      q.MapSchemaColumn.clone(db),
		MapSchemaTable:       q.MapSchemaTable.clone(db),
		MapSearch:            q.MapSearch.clone(db),
		MapSetting:           q.MapSetting.clone(db),
		Notification:         q.Notification.clone(db),
		Setting:              q.Setting.clone(db),
		SpatialRefSy:         q.SpatialRefSy.clone(db),
		SyncZulu:             q.SyncZulu.clone(db),
		ThemedColoring:       q.ThemedColoring.clone(db),
		ThemedColoringRule:   q.ThemedColoringRule.clone(db),
		UserInfo:             q.UserInfo.clone(db),
		UserInfoPrivilege:    q.UserInfoPrivilege.clone(db),
		UserInfoRefreshToken: q.UserInfoRefreshToken.clone(db),
		UserInfoSetting:      q.UserInfoSetting.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		AdminSidebarItem:     q.AdminSidebarItem.replaceDB(db),
		AspNetPrivilege:      q.AspNetPrivilege.replaceDB(db),
		AspNetRole:           q.AspNetRole.replaceDB(db),
		AspNetRoleClaim:      q.AspNetRoleClaim.replaceDB(db),
		AspNetUser:           q.AspNetUser.replaceDB(db),
		AspNetUserClaim:      q.AspNetUserClaim.replaceDB(db),
		AspNetUserLogin:      q.AspNetUserLogin.replaceDB(db),
		AspNetUserRole:       q.AspNetUserRole.replaceDB(db),
		AspNetUserToken:      q.AspNetUserToken.replaceDB(db),
		DashboardChart:       q.DashboardChart.replaceDB(db),
		EmailTemplate:        q.EmailTemplate.replaceDB(db),
		EmailsSent:           q.EmailsSent.replaceDB(db),
		Event:                q.Event.replaceDB(db),
		File:                 q.File.replaceDB(db),
		FiltersForm:          q.FiltersForm.replaceDB(db),
		HandBook:             q.HandBook.replaceDB(db),
		HandBookList:         q.HandBookList.replaceDB(db),
		LibraryIcon:          q.LibraryIcon.replaceDB(db),
		LibraryStyle:         q.LibraryStyle.replaceDB(db),
		MapHandbook:          q.MapHandbook.replaceDB(db),
		MapHandbooksList:     q.MapHandbooksList.replaceDB(db),
		MapLabel:             q.MapLabel.replaceDB(db),
		MapLayer:             q.MapLayer.replaceDB(db),
		MapLayersSchemaTable: q.MapLayersSchemaTable.replaceDB(db),
		MapObject:            q.MapObject.replaceDB(db),
		MapProject:           q.MapProject.replaceDB(db),
		MapSchemaColumn:      q.MapSchemaColumn.replaceDB(db),
		MapSchemaTable:       q.MapSchemaTable.replaceDB(db),
		MapSearch:            q.MapSearch.replaceDB(db),
		MapSetting:           q.MapSetting.replaceDB(db),
		Notification:         q.Notification.replaceDB(db),
		Setting:              q.Setting.replaceDB(db),
		SpatialRefSy:         q.SpatialRefSy.replaceDB(db),
		SyncZulu:             q.SyncZulu.replaceDB(db),
		ThemedColoring:       q.ThemedColoring.replaceDB(db),
		ThemedColoringRule:   q.ThemedColoringRule.replaceDB(db),
		UserInfo:             q.UserInfo.replaceDB(db),
		UserInfoPrivilege:    q.UserInfoPrivilege.replaceDB(db),
		UserInfoRefreshToken: q.UserInfoRefreshToken.replaceDB(db),
		UserInfoSetting:      q.UserInfoSetting.replaceDB(db),
	}
}

type queryCtx struct {
	AdminSidebarItem     IAdminSidebarItemDo
	AspNetPrivilege      IAspNetPrivilegeDo
	AspNetRole           IAspNetRoleDo
	AspNetRoleClaim      IAspNetRoleClaimDo
	AspNetUser           IAspNetUserDo
	AspNetUserClaim      IAspNetUserClaimDo
	AspNetUserLogin      IAspNetUserLoginDo
	AspNetUserRole       IAspNetUserRoleDo
	AspNetUserToken      IAspNetUserTokenDo
	DashboardChart       IDashboardChartDo
	EmailTemplate        IEmailTemplateDo
	EmailsSent           IEmailsSentDo
	Event                IEventDo
	File                 IFileDo
	FiltersForm          IFiltersFormDo
	HandBook             IHandBookDo
	HandBookList         IHandBookListDo
	LibraryIcon          ILibraryIconDo
	LibraryStyle         ILibraryStyleDo
	MapHandbook          IMapHandbookDo
	MapHandbooksList     IMapHandbooksListDo
	MapLabel             IMapLabelDo
	MapLayer             IMapLayerDo
	MapLayersSchemaTable IMapLayersSchemaTableDo
	MapObject            IMapObjectDo
	MapProject           IMapProjectDo
	MapSchemaColumn      IMapSchemaColumnDo
	MapSchemaTable       IMapSchemaTableDo
	MapSearch            IMapSearchDo
	MapSetting           IMapSettingDo
	Notification         INotificationDo
	Setting              ISettingDo
	SpatialRefSy         ISpatialRefSyDo
	SyncZulu             ISyncZuluDo
	ThemedColoring       IThemedColoringDo
	ThemedColoringRule   IThemedColoringRuleDo
	UserInfo             IUserInfoDo
	UserInfoPrivilege    IUserInfoPrivilegeDo
	UserInfoRefreshToken IUserInfoRefreshTokenDo
	UserInfoSetting      IUserInfoSettingDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AdminSidebarItem:     q.AdminSidebarItem.WithContext(ctx),
		AspNetPrivilege:      q.AspNetPrivilege.WithContext(ctx),
		AspNetRole:           q.AspNetRole.WithContext(ctx),
		AspNetRoleClaim:      q.AspNetRoleClaim.WithContext(ctx),
		AspNetUser:           q.AspNetUser.WithContext(ctx),
		AspNetUserClaim:      q.AspNetUserClaim.WithContext(ctx),
		AspNetUserLogin:      q.AspNetUserLogin.WithContext(ctx),
		AspNetUserRole:       q.AspNetUserRole.WithContext(ctx),
		AspNetUserToken:      q.AspNetUserToken.WithContext(ctx),
		DashboardChart:       q.DashboardChart.WithContext(ctx),
		EmailTemplate:        q.EmailTemplate.WithContext(ctx),
		EmailsSent:           q.EmailsSent.WithContext(ctx),
		Event:                q.Event.WithContext(ctx),
		File:                 q.File.WithContext(ctx),
		FiltersForm:          q.FiltersForm.WithContext(ctx),
		HandBook:             q.HandBook.WithContext(ctx),
		HandBookList:         q.HandBookList.WithContext(ctx),
		LibraryIcon:          q.LibraryIcon.WithContext(ctx),
		LibraryStyle:         q.LibraryStyle.WithContext(ctx),
		MapHandbook:          q.MapHandbook.WithContext(ctx),
		MapHandbooksList:     q.MapHandbooksList.WithContext(ctx),
		MapLabel:             q.MapLabel.WithContext(ctx),
		MapLayer:             q.MapLayer.WithContext(ctx),
		MapLayersSchemaTable: q.MapLayersSchemaTable.WithContext(ctx),
		MapObject:            q.MapObject.WithContext(ctx),
		MapProject:           q.MapProject.WithContext(ctx),
		MapSchemaColumn:      q.MapSchemaColumn.WithContext(ctx),
		MapSchemaTable:       q.MapSchemaTable.WithContext(ctx),
		MapSearch:            q.MapSearch.WithContext(ctx),
		MapSetting:           q.MapSetting.WithContext(ctx),
		Notification:         q.Notification.WithContext(ctx),
		Setting:              q.Setting.WithContext(ctx),
		SpatialRefSy:         q.SpatialRefSy.WithContext(ctx),
		SyncZulu:             q.SyncZulu.WithContext(ctx),
		ThemedColoring:       q.ThemedColoring.WithContext(ctx),
		ThemedColoringRule:   q.ThemedColoringRule.WithContext(ctx),
		UserInfo:             q.UserInfo.WithContext(ctx),
		UserInfoPrivilege:    q.UserInfoPrivilege.WithContext(ctx),
		UserInfoRefreshToken: q.UserInfoRefreshToken.WithContext(ctx),
		UserInfoSetting:      q.UserInfoSetting.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
