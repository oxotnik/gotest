// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newMapSchemaTable(db *gorm.DB, opts ...gen.DOOption) mapSchemaTable {
	_mapSchemaTable := mapSchemaTable{}

	_mapSchemaTable.mapSchemaTableDo.UseDB(db, opts...)
	_mapSchemaTable.mapSchemaTableDo.UseModel(&model.MapSchemaTable{})

	tableName := _mapSchemaTable.mapSchemaTableDo.TableName()
	_mapSchemaTable.ALL = field.NewAsterisk(tableName)
	_mapSchemaTable.ID = field.NewInt32(tableName, "id")
	_mapSchemaTable.DateCreate = field.NewTime(tableName, "date_create")
	_mapSchemaTable.DateLastChange = field.NewTime(tableName, "date_last_change")
	_mapSchemaTable.CreaterID = field.NewInt64(tableName, "creater_id")
	_mapSchemaTable.ChangerID = field.NewInt64(tableName, "changer_id")
	_mapSchemaTable.Name = field.NewString(tableName, "name")
	_mapSchemaTable.Title = field.NewString(tableName, "title")
	_mapSchemaTable.ZuluTypeID = field.NewInt32(tableName, "zulu_type_id")
	_mapSchemaTable.ZuluModeID = field.NewInt32(tableName, "zulu_mode_id")
	_mapSchemaTable.ProjectID = field.NewInt32(tableName, "project_id")
	_mapSchemaTable.IsOneToMany = field.NewBool(tableName, "is_one_to_many")
	_mapSchemaTable.Scheme = field.NewString(tableName, "scheme")
	_mapSchemaTable.Jsonb = field.NewString(tableName, "jsonb")

	_mapSchemaTable.fillFieldMap()

	return _mapSchemaTable
}

type mapSchemaTable struct {
	mapSchemaTableDo

	ALL            field.Asterisk
	ID             field.Int32
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64
	Name           field.String
	Title          field.String
	ZuluTypeID     field.Int32
	ZuluModeID     field.Int32
	ProjectID      field.Int32
	IsOneToMany    field.Bool
	Scheme         field.String
	Jsonb          field.String

	fieldMap map[string]field.Expr
}

func (m mapSchemaTable) Table(newTableName string) *mapSchemaTable {
	m.mapSchemaTableDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mapSchemaTable) As(alias string) *mapSchemaTable {
	m.mapSchemaTableDo.DO = *(m.mapSchemaTableDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mapSchemaTable) updateTableName(table string) *mapSchemaTable {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.DateCreate = field.NewTime(table, "date_create")
	m.DateLastChange = field.NewTime(table, "date_last_change")
	m.CreaterID = field.NewInt64(table, "creater_id")
	m.ChangerID = field.NewInt64(table, "changer_id")
	m.Name = field.NewString(table, "name")
	m.Title = field.NewString(table, "title")
	m.ZuluTypeID = field.NewInt32(table, "zulu_type_id")
	m.ZuluModeID = field.NewInt32(table, "zulu_mode_id")
	m.ProjectID = field.NewInt32(table, "project_id")
	m.IsOneToMany = field.NewBool(table, "is_one_to_many")
	m.Scheme = field.NewString(table, "scheme")
	m.Jsonb = field.NewString(table, "jsonb")

	m.fillFieldMap()

	return m
}

func (m *mapSchemaTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mapSchemaTable) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["id"] = m.ID
	m.fieldMap["date_create"] = m.DateCreate
	m.fieldMap["date_last_change"] = m.DateLastChange
	m.fieldMap["creater_id"] = m.CreaterID
	m.fieldMap["changer_id"] = m.ChangerID
	m.fieldMap["name"] = m.Name
	m.fieldMap["title"] = m.Title
	m.fieldMap["zulu_type_id"] = m.ZuluTypeID
	m.fieldMap["zulu_mode_id"] = m.ZuluModeID
	m.fieldMap["project_id"] = m.ProjectID
	m.fieldMap["is_one_to_many"] = m.IsOneToMany
	m.fieldMap["scheme"] = m.Scheme
	m.fieldMap["jsonb"] = m.Jsonb
}

func (m mapSchemaTable) clone(db *gorm.DB) mapSchemaTable {
	m.mapSchemaTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mapSchemaTable) replaceDB(db *gorm.DB) mapSchemaTable {
	m.mapSchemaTableDo.ReplaceDB(db)
	return m
}

type mapSchemaTableDo struct{ gen.DO }

type IMapSchemaTableDo interface {
	gen.SubQuery
	Debug() IMapSchemaTableDo
	WithContext(ctx context.Context) IMapSchemaTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMapSchemaTableDo
	WriteDB() IMapSchemaTableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMapSchemaTableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMapSchemaTableDo
	Not(conds ...gen.Condition) IMapSchemaTableDo
	Or(conds ...gen.Condition) IMapSchemaTableDo
	Select(conds ...field.Expr) IMapSchemaTableDo
	Where(conds ...gen.Condition) IMapSchemaTableDo
	Order(conds ...field.Expr) IMapSchemaTableDo
	Distinct(cols ...field.Expr) IMapSchemaTableDo
	Omit(cols ...field.Expr) IMapSchemaTableDo
	Join(table schema.Tabler, on ...field.Expr) IMapSchemaTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMapSchemaTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMapSchemaTableDo
	Group(cols ...field.Expr) IMapSchemaTableDo
	Having(conds ...gen.Condition) IMapSchemaTableDo
	Limit(limit int) IMapSchemaTableDo
	Offset(offset int) IMapSchemaTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMapSchemaTableDo
	Unscoped() IMapSchemaTableDo
	Create(values ...*model.MapSchemaTable) error
	CreateInBatches(values []*model.MapSchemaTable, batchSize int) error
	Save(values ...*model.MapSchemaTable) error
	First() (*model.MapSchemaTable, error)
	Take() (*model.MapSchemaTable, error)
	Last() (*model.MapSchemaTable, error)
	Find() ([]*model.MapSchemaTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapSchemaTable, err error)
	FindInBatches(result *[]*model.MapSchemaTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MapSchemaTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMapSchemaTableDo
	Assign(attrs ...field.AssignExpr) IMapSchemaTableDo
	Joins(fields ...field.RelationField) IMapSchemaTableDo
	Preload(fields ...field.RelationField) IMapSchemaTableDo
	FirstOrInit() (*model.MapSchemaTable, error)
	FirstOrCreate() (*model.MapSchemaTable, error)
	FindByPage(offset int, limit int) (result []*model.MapSchemaTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMapSchemaTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mapSchemaTableDo) Debug() IMapSchemaTableDo {
	return m.withDO(m.DO.Debug())
}

func (m mapSchemaTableDo) WithContext(ctx context.Context) IMapSchemaTableDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mapSchemaTableDo) ReadDB() IMapSchemaTableDo {
	return m.Clauses(dbresolver.Read)
}

func (m mapSchemaTableDo) WriteDB() IMapSchemaTableDo {
	return m.Clauses(dbresolver.Write)
}

func (m mapSchemaTableDo) Session(config *gorm.Session) IMapSchemaTableDo {
	return m.withDO(m.DO.Session(config))
}

func (m mapSchemaTableDo) Clauses(conds ...clause.Expression) IMapSchemaTableDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mapSchemaTableDo) Returning(value interface{}, columns ...string) IMapSchemaTableDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mapSchemaTableDo) Not(conds ...gen.Condition) IMapSchemaTableDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mapSchemaTableDo) Or(conds ...gen.Condition) IMapSchemaTableDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mapSchemaTableDo) Select(conds ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mapSchemaTableDo) Where(conds ...gen.Condition) IMapSchemaTableDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mapSchemaTableDo) Order(conds ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mapSchemaTableDo) Distinct(cols ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mapSchemaTableDo) Omit(cols ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mapSchemaTableDo) Join(table schema.Tabler, on ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mapSchemaTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mapSchemaTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mapSchemaTableDo) Group(cols ...field.Expr) IMapSchemaTableDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mapSchemaTableDo) Having(conds ...gen.Condition) IMapSchemaTableDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mapSchemaTableDo) Limit(limit int) IMapSchemaTableDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mapSchemaTableDo) Offset(offset int) IMapSchemaTableDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mapSchemaTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMapSchemaTableDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mapSchemaTableDo) Unscoped() IMapSchemaTableDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mapSchemaTableDo) Create(values ...*model.MapSchemaTable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mapSchemaTableDo) CreateInBatches(values []*model.MapSchemaTable, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mapSchemaTableDo) Save(values ...*model.MapSchemaTable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mapSchemaTableDo) First() (*model.MapSchemaTable, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaTable), nil
	}
}

func (m mapSchemaTableDo) Take() (*model.MapSchemaTable, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaTable), nil
	}
}

func (m mapSchemaTableDo) Last() (*model.MapSchemaTable, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaTable), nil
	}
}

func (m mapSchemaTableDo) Find() ([]*model.MapSchemaTable, error) {
	result, err := m.DO.Find()
	return result.([]*model.MapSchemaTable), err
}

func (m mapSchemaTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MapSchemaTable, err error) {
	buf := make([]*model.MapSchemaTable, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mapSchemaTableDo) FindInBatches(result *[]*model.MapSchemaTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mapSchemaTableDo) Attrs(attrs ...field.AssignExpr) IMapSchemaTableDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mapSchemaTableDo) Assign(attrs ...field.AssignExpr) IMapSchemaTableDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mapSchemaTableDo) Joins(fields ...field.RelationField) IMapSchemaTableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mapSchemaTableDo) Preload(fields ...field.RelationField) IMapSchemaTableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mapSchemaTableDo) FirstOrInit() (*model.MapSchemaTable, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaTable), nil
	}
}

func (m mapSchemaTableDo) FirstOrCreate() (*model.MapSchemaTable, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MapSchemaTable), nil
	}
}

func (m mapSchemaTableDo) FindByPage(offset int, limit int) (result []*model.MapSchemaTable, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mapSchemaTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mapSchemaTableDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mapSchemaTableDo) Delete(models ...*model.MapSchemaTable) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mapSchemaTableDo) withDO(do gen.Dao) *mapSchemaTableDo {
	m.DO = *do.(*gen.DO)
	return m
}
