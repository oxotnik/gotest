// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newSyncZulu(db *gorm.DB, opts ...gen.DOOption) syncZulu {
	_syncZulu := syncZulu{}

	_syncZulu.syncZuluDo.UseDB(db, opts...)
	_syncZulu.syncZuluDo.UseModel(&model.SyncZulu{})

	tableName := _syncZulu.syncZuluDo.TableName()
	_syncZulu.ALL = field.NewAsterisk(tableName)
	_syncZulu.ID = field.NewInt32(tableName, "id")
	_syncZulu.ProjectID = field.NewInt32(tableName, "project_id")
	_syncZulu.LayerID = field.NewInt32(tableName, "layer_id")
	_syncZulu.PathLayer = field.NewString(tableName, "path_layer")
	_syncZulu.ZuluTypeID = field.NewInt32(tableName, "zulu_type_id")
	_syncZulu.IsActive = field.NewBool(tableName, "is_active")
	_syncZulu.DateNextStart = field.NewTime(tableName, "date_next_start")
	_syncZulu.StatusLast = field.NewString(tableName, "status_last")

	_syncZulu.fillFieldMap()

	return _syncZulu
}

type syncZulu struct {
	syncZuluDo

	ALL           field.Asterisk
	ID            field.Int32
	ProjectID     field.Int32
	LayerID       field.Int32
	PathLayer     field.String
	ZuluTypeID    field.Int32
	IsActive      field.Bool
	DateNextStart field.Time
	StatusLast    field.String

	fieldMap map[string]field.Expr
}

func (s syncZulu) Table(newTableName string) *syncZulu {
	s.syncZuluDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syncZulu) As(alias string) *syncZulu {
	s.syncZuluDo.DO = *(s.syncZuluDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syncZulu) updateTableName(table string) *syncZulu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.ProjectID = field.NewInt32(table, "project_id")
	s.LayerID = field.NewInt32(table, "layer_id")
	s.PathLayer = field.NewString(table, "path_layer")
	s.ZuluTypeID = field.NewInt32(table, "zulu_type_id")
	s.IsActive = field.NewBool(table, "is_active")
	s.DateNextStart = field.NewTime(table, "date_next_start")
	s.StatusLast = field.NewString(table, "status_last")

	s.fillFieldMap()

	return s
}

func (s *syncZulu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syncZulu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["project_id"] = s.ProjectID
	s.fieldMap["layer_id"] = s.LayerID
	s.fieldMap["path_layer"] = s.PathLayer
	s.fieldMap["zulu_type_id"] = s.ZuluTypeID
	s.fieldMap["is_active"] = s.IsActive
	s.fieldMap["date_next_start"] = s.DateNextStart
	s.fieldMap["status_last"] = s.StatusLast
}

func (s syncZulu) clone(db *gorm.DB) syncZulu {
	s.syncZuluDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syncZulu) replaceDB(db *gorm.DB) syncZulu {
	s.syncZuluDo.ReplaceDB(db)
	return s
}

type syncZuluDo struct{ gen.DO }

type ISyncZuluDo interface {
	gen.SubQuery
	Debug() ISyncZuluDo
	WithContext(ctx context.Context) ISyncZuluDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISyncZuluDo
	WriteDB() ISyncZuluDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISyncZuluDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyncZuluDo
	Not(conds ...gen.Condition) ISyncZuluDo
	Or(conds ...gen.Condition) ISyncZuluDo
	Select(conds ...field.Expr) ISyncZuluDo
	Where(conds ...gen.Condition) ISyncZuluDo
	Order(conds ...field.Expr) ISyncZuluDo
	Distinct(cols ...field.Expr) ISyncZuluDo
	Omit(cols ...field.Expr) ISyncZuluDo
	Join(table schema.Tabler, on ...field.Expr) ISyncZuluDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyncZuluDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyncZuluDo
	Group(cols ...field.Expr) ISyncZuluDo
	Having(conds ...gen.Condition) ISyncZuluDo
	Limit(limit int) ISyncZuluDo
	Offset(offset int) ISyncZuluDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyncZuluDo
	Unscoped() ISyncZuluDo
	Create(values ...*model.SyncZulu) error
	CreateInBatches(values []*model.SyncZulu, batchSize int) error
	Save(values ...*model.SyncZulu) error
	First() (*model.SyncZulu, error)
	Take() (*model.SyncZulu, error)
	Last() (*model.SyncZulu, error)
	Find() ([]*model.SyncZulu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncZulu, err error)
	FindInBatches(result *[]*model.SyncZulu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SyncZulu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyncZuluDo
	Assign(attrs ...field.AssignExpr) ISyncZuluDo
	Joins(fields ...field.RelationField) ISyncZuluDo
	Preload(fields ...field.RelationField) ISyncZuluDo
	FirstOrInit() (*model.SyncZulu, error)
	FirstOrCreate() (*model.SyncZulu, error)
	FindByPage(offset int, limit int) (result []*model.SyncZulu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyncZuluDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syncZuluDo) Debug() ISyncZuluDo {
	return s.withDO(s.DO.Debug())
}

func (s syncZuluDo) WithContext(ctx context.Context) ISyncZuluDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syncZuluDo) ReadDB() ISyncZuluDo {
	return s.Clauses(dbresolver.Read)
}

func (s syncZuluDo) WriteDB() ISyncZuluDo {
	return s.Clauses(dbresolver.Write)
}

func (s syncZuluDo) Session(config *gorm.Session) ISyncZuluDo {
	return s.withDO(s.DO.Session(config))
}

func (s syncZuluDo) Clauses(conds ...clause.Expression) ISyncZuluDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syncZuluDo) Returning(value interface{}, columns ...string) ISyncZuluDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syncZuluDo) Not(conds ...gen.Condition) ISyncZuluDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syncZuluDo) Or(conds ...gen.Condition) ISyncZuluDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syncZuluDo) Select(conds ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syncZuluDo) Where(conds ...gen.Condition) ISyncZuluDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syncZuluDo) Order(conds ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syncZuluDo) Distinct(cols ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syncZuluDo) Omit(cols ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syncZuluDo) Join(table schema.Tabler, on ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syncZuluDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syncZuluDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syncZuluDo) Group(cols ...field.Expr) ISyncZuluDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syncZuluDo) Having(conds ...gen.Condition) ISyncZuluDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syncZuluDo) Limit(limit int) ISyncZuluDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syncZuluDo) Offset(offset int) ISyncZuluDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syncZuluDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyncZuluDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syncZuluDo) Unscoped() ISyncZuluDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syncZuluDo) Create(values ...*model.SyncZulu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syncZuluDo) CreateInBatches(values []*model.SyncZulu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syncZuluDo) Save(values ...*model.SyncZulu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syncZuluDo) First() (*model.SyncZulu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncZulu), nil
	}
}

func (s syncZuluDo) Take() (*model.SyncZulu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncZulu), nil
	}
}

func (s syncZuluDo) Last() (*model.SyncZulu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncZulu), nil
	}
}

func (s syncZuluDo) Find() ([]*model.SyncZulu, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyncZulu), err
}

func (s syncZuluDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncZulu, err error) {
	buf := make([]*model.SyncZulu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syncZuluDo) FindInBatches(result *[]*model.SyncZulu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syncZuluDo) Attrs(attrs ...field.AssignExpr) ISyncZuluDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syncZuluDo) Assign(attrs ...field.AssignExpr) ISyncZuluDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syncZuluDo) Joins(fields ...field.RelationField) ISyncZuluDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syncZuluDo) Preload(fields ...field.RelationField) ISyncZuluDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syncZuluDo) FirstOrInit() (*model.SyncZulu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncZulu), nil
	}
}

func (s syncZuluDo) FirstOrCreate() (*model.SyncZulu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncZulu), nil
	}
}

func (s syncZuluDo) FindByPage(offset int, limit int) (result []*model.SyncZulu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syncZuluDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syncZuluDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syncZuluDo) Delete(models ...*model.SyncZulu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syncZuluDo) withDO(do gen.Dao) *syncZuluDo {
	s.DO = *do.(*gen.DO)
	return s
}
