// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newEmailTemplate(db *gorm.DB, opts ...gen.DOOption) emailTemplate {
	_emailTemplate := emailTemplate{}

	_emailTemplate.emailTemplateDo.UseDB(db, opts...)
	_emailTemplate.emailTemplateDo.UseModel(&model.EmailTemplate{})

	tableName := _emailTemplate.emailTemplateDo.TableName()
	_emailTemplate.ALL = field.NewAsterisk(tableName)
	_emailTemplate.DateCreate = field.NewTime(tableName, "date_create")
	_emailTemplate.DateLastChange = field.NewTime(tableName, "date_last_change")
	_emailTemplate.CreaterID = field.NewInt64(tableName, "creater_id")
	_emailTemplate.ChangerID = field.NewInt64(tableName, "changer_id")
	_emailTemplate.KeyTc = field.NewString(tableName, "key_tc")
	_emailTemplate.Subject = field.NewString(tableName, "subject")
	_emailTemplate.Body = field.NewString(tableName, "body")
	_emailTemplate.Description = field.NewString(tableName, "description")
	_emailTemplate.StoredProcedure = field.NewString(tableName, "stored_procedure")
	_emailTemplate.StoredProcedureUpdate = field.NewString(tableName, "stored_procedure_update")

	_emailTemplate.fillFieldMap()

	return _emailTemplate
}

type emailTemplate struct {
	emailTemplateDo

	ALL                   field.Asterisk
	DateCreate            field.Time
	DateLastChange        field.Time
	CreaterID             field.Int64
	ChangerID             field.Int64
	KeyTc                 field.String
	Subject               field.String
	Body                  field.String
	Description           field.String
	StoredProcedure       field.String
	StoredProcedureUpdate field.String

	fieldMap map[string]field.Expr
}

func (e emailTemplate) Table(newTableName string) *emailTemplate {
	e.emailTemplateDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailTemplate) As(alias string) *emailTemplate {
	e.emailTemplateDo.DO = *(e.emailTemplateDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailTemplate) updateTableName(table string) *emailTemplate {
	e.ALL = field.NewAsterisk(table)
	e.DateCreate = field.NewTime(table, "date_create")
	e.DateLastChange = field.NewTime(table, "date_last_change")
	e.CreaterID = field.NewInt64(table, "creater_id")
	e.ChangerID = field.NewInt64(table, "changer_id")
	e.KeyTc = field.NewString(table, "key_tc")
	e.Subject = field.NewString(table, "subject")
	e.Body = field.NewString(table, "body")
	e.Description = field.NewString(table, "description")
	e.StoredProcedure = field.NewString(table, "stored_procedure")
	e.StoredProcedureUpdate = field.NewString(table, "stored_procedure_update")

	e.fillFieldMap()

	return e
}

func (e *emailTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailTemplate) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["date_create"] = e.DateCreate
	e.fieldMap["date_last_change"] = e.DateLastChange
	e.fieldMap["creater_id"] = e.CreaterID
	e.fieldMap["changer_id"] = e.ChangerID
	e.fieldMap["key_tc"] = e.KeyTc
	e.fieldMap["subject"] = e.Subject
	e.fieldMap["body"] = e.Body
	e.fieldMap["description"] = e.Description
	e.fieldMap["stored_procedure"] = e.StoredProcedure
	e.fieldMap["stored_procedure_update"] = e.StoredProcedureUpdate
}

func (e emailTemplate) clone(db *gorm.DB) emailTemplate {
	e.emailTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailTemplate) replaceDB(db *gorm.DB) emailTemplate {
	e.emailTemplateDo.ReplaceDB(db)
	return e
}

type emailTemplateDo struct{ gen.DO }

type IEmailTemplateDo interface {
	gen.SubQuery
	Debug() IEmailTemplateDo
	WithContext(ctx context.Context) IEmailTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmailTemplateDo
	WriteDB() IEmailTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmailTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmailTemplateDo
	Not(conds ...gen.Condition) IEmailTemplateDo
	Or(conds ...gen.Condition) IEmailTemplateDo
	Select(conds ...field.Expr) IEmailTemplateDo
	Where(conds ...gen.Condition) IEmailTemplateDo
	Order(conds ...field.Expr) IEmailTemplateDo
	Distinct(cols ...field.Expr) IEmailTemplateDo
	Omit(cols ...field.Expr) IEmailTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IEmailTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmailTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmailTemplateDo
	Group(cols ...field.Expr) IEmailTemplateDo
	Having(conds ...gen.Condition) IEmailTemplateDo
	Limit(limit int) IEmailTemplateDo
	Offset(offset int) IEmailTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailTemplateDo
	Unscoped() IEmailTemplateDo
	Create(values ...*model.EmailTemplate) error
	CreateInBatches(values []*model.EmailTemplate, batchSize int) error
	Save(values ...*model.EmailTemplate) error
	First() (*model.EmailTemplate, error)
	Take() (*model.EmailTemplate, error)
	Last() (*model.EmailTemplate, error)
	Find() ([]*model.EmailTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailTemplate, err error)
	FindInBatches(result *[]*model.EmailTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EmailTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmailTemplateDo
	Assign(attrs ...field.AssignExpr) IEmailTemplateDo
	Joins(fields ...field.RelationField) IEmailTemplateDo
	Preload(fields ...field.RelationField) IEmailTemplateDo
	FirstOrInit() (*model.EmailTemplate, error)
	FirstOrCreate() (*model.EmailTemplate, error)
	FindByPage(offset int, limit int) (result []*model.EmailTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmailTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e emailTemplateDo) Debug() IEmailTemplateDo {
	return e.withDO(e.DO.Debug())
}

func (e emailTemplateDo) WithContext(ctx context.Context) IEmailTemplateDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailTemplateDo) ReadDB() IEmailTemplateDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailTemplateDo) WriteDB() IEmailTemplateDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailTemplateDo) Session(config *gorm.Session) IEmailTemplateDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailTemplateDo) Clauses(conds ...clause.Expression) IEmailTemplateDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailTemplateDo) Returning(value interface{}, columns ...string) IEmailTemplateDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailTemplateDo) Not(conds ...gen.Condition) IEmailTemplateDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailTemplateDo) Or(conds ...gen.Condition) IEmailTemplateDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailTemplateDo) Select(conds ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailTemplateDo) Where(conds ...gen.Condition) IEmailTemplateDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailTemplateDo) Order(conds ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailTemplateDo) Distinct(cols ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailTemplateDo) Omit(cols ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailTemplateDo) Join(table schema.Tabler, on ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailTemplateDo) Group(cols ...field.Expr) IEmailTemplateDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailTemplateDo) Having(conds ...gen.Condition) IEmailTemplateDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailTemplateDo) Limit(limit int) IEmailTemplateDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailTemplateDo) Offset(offset int) IEmailTemplateDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailTemplateDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailTemplateDo) Unscoped() IEmailTemplateDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailTemplateDo) Create(values ...*model.EmailTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailTemplateDo) CreateInBatches(values []*model.EmailTemplate, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailTemplateDo) Save(values ...*model.EmailTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailTemplateDo) First() (*model.EmailTemplate, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailTemplate), nil
	}
}

func (e emailTemplateDo) Take() (*model.EmailTemplate, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailTemplate), nil
	}
}

func (e emailTemplateDo) Last() (*model.EmailTemplate, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailTemplate), nil
	}
}

func (e emailTemplateDo) Find() ([]*model.EmailTemplate, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmailTemplate), err
}

func (e emailTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailTemplate, err error) {
	buf := make([]*model.EmailTemplate, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailTemplateDo) FindInBatches(result *[]*model.EmailTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailTemplateDo) Attrs(attrs ...field.AssignExpr) IEmailTemplateDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailTemplateDo) Assign(attrs ...field.AssignExpr) IEmailTemplateDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailTemplateDo) Joins(fields ...field.RelationField) IEmailTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailTemplateDo) Preload(fields ...field.RelationField) IEmailTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailTemplateDo) FirstOrInit() (*model.EmailTemplate, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailTemplate), nil
	}
}

func (e emailTemplateDo) FirstOrCreate() (*model.EmailTemplate, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailTemplate), nil
	}
}

func (e emailTemplateDo) FindByPage(offset int, limit int) (result []*model.EmailTemplate, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailTemplateDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailTemplateDo) Delete(models ...*model.EmailTemplate) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailTemplateDo) withDO(do gen.Dao) *emailTemplateDo {
	e.DO = *do.(*gen.DO)
	return e
}
