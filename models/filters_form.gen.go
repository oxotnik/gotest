// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newFiltersForm(db *gorm.DB, opts ...gen.DOOption) filtersForm {
	_filtersForm := filtersForm{}

	_filtersForm.filtersFormDo.UseDB(db, opts...)
	_filtersForm.filtersFormDo.UseModel(&model.FiltersForm{})

	tableName := _filtersForm.filtersFormDo.TableName()
	_filtersForm.ALL = field.NewAsterisk(tableName)
	_filtersForm.ID = field.NewInt32(tableName, "id")
	_filtersForm.DateCreate = field.NewTime(tableName, "date_create")
	_filtersForm.DateLastChange = field.NewTime(tableName, "date_last_change")
	_filtersForm.CreaterID = field.NewInt64(tableName, "creater_id")
	_filtersForm.ChangerID = field.NewInt64(tableName, "changer_id")
	_filtersForm.IsArchive = field.NewBool(tableName, "is_archive")
	_filtersForm.Title = field.NewString(tableName, "title")
	_filtersForm.ProjectID = field.NewInt32(tableName, "project_id")
	_filtersForm.LayerID = field.NewInt32(tableName, "layer_id")
	_filtersForm.PropertiesJSON = field.NewString(tableName, "properties_json")
	_filtersForm.SqlTemplare = field.NewString(tableName, "sql_templare")
	_filtersForm.HTMLViewForm = field.NewString(tableName, "html_view_form")

	_filtersForm.fillFieldMap()

	return _filtersForm
}

type filtersForm struct {
	filtersFormDo

	ALL            field.Asterisk
	ID             field.Int32
	DateCreate     field.Time
	DateLastChange field.Time
	CreaterID      field.Int64
	ChangerID      field.Int64
	IsArchive      field.Bool
	Title          field.String
	ProjectID      field.Int32
	LayerID        field.Int32
	PropertiesJSON field.String
	SqlTemplare    field.String
	HTMLViewForm   field.String

	fieldMap map[string]field.Expr
}

func (f filtersForm) Table(newTableName string) *filtersForm {
	f.filtersFormDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f filtersForm) As(alias string) *filtersForm {
	f.filtersFormDo.DO = *(f.filtersFormDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *filtersForm) updateTableName(table string) *filtersForm {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.DateCreate = field.NewTime(table, "date_create")
	f.DateLastChange = field.NewTime(table, "date_last_change")
	f.CreaterID = field.NewInt64(table, "creater_id")
	f.ChangerID = field.NewInt64(table, "changer_id")
	f.IsArchive = field.NewBool(table, "is_archive")
	f.Title = field.NewString(table, "title")
	f.ProjectID = field.NewInt32(table, "project_id")
	f.LayerID = field.NewInt32(table, "layer_id")
	f.PropertiesJSON = field.NewString(table, "properties_json")
	f.SqlTemplare = field.NewString(table, "sql_templare")
	f.HTMLViewForm = field.NewString(table, "html_view_form")

	f.fillFieldMap()

	return f
}

func (f *filtersForm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *filtersForm) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["id"] = f.ID
	f.fieldMap["date_create"] = f.DateCreate
	f.fieldMap["date_last_change"] = f.DateLastChange
	f.fieldMap["creater_id"] = f.CreaterID
	f.fieldMap["changer_id"] = f.ChangerID
	f.fieldMap["is_archive"] = f.IsArchive
	f.fieldMap["title"] = f.Title
	f.fieldMap["project_id"] = f.ProjectID
	f.fieldMap["layer_id"] = f.LayerID
	f.fieldMap["properties_json"] = f.PropertiesJSON
	f.fieldMap["sql_templare"] = f.SqlTemplare
	f.fieldMap["html_view_form"] = f.HTMLViewForm
}

func (f filtersForm) clone(db *gorm.DB) filtersForm {
	f.filtersFormDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f filtersForm) replaceDB(db *gorm.DB) filtersForm {
	f.filtersFormDo.ReplaceDB(db)
	return f
}

type filtersFormDo struct{ gen.DO }

type IFiltersFormDo interface {
	gen.SubQuery
	Debug() IFiltersFormDo
	WithContext(ctx context.Context) IFiltersFormDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFiltersFormDo
	WriteDB() IFiltersFormDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFiltersFormDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFiltersFormDo
	Not(conds ...gen.Condition) IFiltersFormDo
	Or(conds ...gen.Condition) IFiltersFormDo
	Select(conds ...field.Expr) IFiltersFormDo
	Where(conds ...gen.Condition) IFiltersFormDo
	Order(conds ...field.Expr) IFiltersFormDo
	Distinct(cols ...field.Expr) IFiltersFormDo
	Omit(cols ...field.Expr) IFiltersFormDo
	Join(table schema.Tabler, on ...field.Expr) IFiltersFormDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFiltersFormDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFiltersFormDo
	Group(cols ...field.Expr) IFiltersFormDo
	Having(conds ...gen.Condition) IFiltersFormDo
	Limit(limit int) IFiltersFormDo
	Offset(offset int) IFiltersFormDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFiltersFormDo
	Unscoped() IFiltersFormDo
	Create(values ...*model.FiltersForm) error
	CreateInBatches(values []*model.FiltersForm, batchSize int) error
	Save(values ...*model.FiltersForm) error
	First() (*model.FiltersForm, error)
	Take() (*model.FiltersForm, error)
	Last() (*model.FiltersForm, error)
	Find() ([]*model.FiltersForm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FiltersForm, err error)
	FindInBatches(result *[]*model.FiltersForm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FiltersForm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFiltersFormDo
	Assign(attrs ...field.AssignExpr) IFiltersFormDo
	Joins(fields ...field.RelationField) IFiltersFormDo
	Preload(fields ...field.RelationField) IFiltersFormDo
	FirstOrInit() (*model.FiltersForm, error)
	FirstOrCreate() (*model.FiltersForm, error)
	FindByPage(offset int, limit int) (result []*model.FiltersForm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFiltersFormDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f filtersFormDo) Debug() IFiltersFormDo {
	return f.withDO(f.DO.Debug())
}

func (f filtersFormDo) WithContext(ctx context.Context) IFiltersFormDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f filtersFormDo) ReadDB() IFiltersFormDo {
	return f.Clauses(dbresolver.Read)
}

func (f filtersFormDo) WriteDB() IFiltersFormDo {
	return f.Clauses(dbresolver.Write)
}

func (f filtersFormDo) Session(config *gorm.Session) IFiltersFormDo {
	return f.withDO(f.DO.Session(config))
}

func (f filtersFormDo) Clauses(conds ...clause.Expression) IFiltersFormDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f filtersFormDo) Returning(value interface{}, columns ...string) IFiltersFormDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f filtersFormDo) Not(conds ...gen.Condition) IFiltersFormDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f filtersFormDo) Or(conds ...gen.Condition) IFiltersFormDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f filtersFormDo) Select(conds ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f filtersFormDo) Where(conds ...gen.Condition) IFiltersFormDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f filtersFormDo) Order(conds ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f filtersFormDo) Distinct(cols ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f filtersFormDo) Omit(cols ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f filtersFormDo) Join(table schema.Tabler, on ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f filtersFormDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f filtersFormDo) RightJoin(table schema.Tabler, on ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f filtersFormDo) Group(cols ...field.Expr) IFiltersFormDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f filtersFormDo) Having(conds ...gen.Condition) IFiltersFormDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f filtersFormDo) Limit(limit int) IFiltersFormDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f filtersFormDo) Offset(offset int) IFiltersFormDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f filtersFormDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFiltersFormDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f filtersFormDo) Unscoped() IFiltersFormDo {
	return f.withDO(f.DO.Unscoped())
}

func (f filtersFormDo) Create(values ...*model.FiltersForm) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f filtersFormDo) CreateInBatches(values []*model.FiltersForm, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f filtersFormDo) Save(values ...*model.FiltersForm) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f filtersFormDo) First() (*model.FiltersForm, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FiltersForm), nil
	}
}

func (f filtersFormDo) Take() (*model.FiltersForm, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FiltersForm), nil
	}
}

func (f filtersFormDo) Last() (*model.FiltersForm, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FiltersForm), nil
	}
}

func (f filtersFormDo) Find() ([]*model.FiltersForm, error) {
	result, err := f.DO.Find()
	return result.([]*model.FiltersForm), err
}

func (f filtersFormDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FiltersForm, err error) {
	buf := make([]*model.FiltersForm, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f filtersFormDo) FindInBatches(result *[]*model.FiltersForm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f filtersFormDo) Attrs(attrs ...field.AssignExpr) IFiltersFormDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f filtersFormDo) Assign(attrs ...field.AssignExpr) IFiltersFormDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f filtersFormDo) Joins(fields ...field.RelationField) IFiltersFormDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f filtersFormDo) Preload(fields ...field.RelationField) IFiltersFormDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f filtersFormDo) FirstOrInit() (*model.FiltersForm, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FiltersForm), nil
	}
}

func (f filtersFormDo) FirstOrCreate() (*model.FiltersForm, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FiltersForm), nil
	}
}

func (f filtersFormDo) FindByPage(offset int, limit int) (result []*model.FiltersForm, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f filtersFormDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f filtersFormDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f filtersFormDo) Delete(models ...*model.FiltersForm) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *filtersFormDo) withDO(do gen.Dao) *filtersFormDo {
	f.DO = *do.(*gen.DO)
	return f
}
