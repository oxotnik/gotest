// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"glm-go-project/model"
)

func newAspNetRoleClaim(db *gorm.DB, opts ...gen.DOOption) aspNetRoleClaim {
	_aspNetRoleClaim := aspNetRoleClaim{}

	_aspNetRoleClaim.aspNetRoleClaimDo.UseDB(db, opts...)
	_aspNetRoleClaim.aspNetRoleClaimDo.UseModel(&model.AspNetRoleClaim{})

	tableName := _aspNetRoleClaim.aspNetRoleClaimDo.TableName()
	_aspNetRoleClaim.ALL = field.NewAsterisk(tableName)
	_aspNetRoleClaim.ID = field.NewInt32(tableName, "Id")
	_aspNetRoleClaim.RoleID = field.NewString(tableName, "RoleId")
	_aspNetRoleClaim.ClaimType = field.NewString(tableName, "ClaimType")
	_aspNetRoleClaim.ClaimValue = field.NewString(tableName, "ClaimValue")

	_aspNetRoleClaim.fillFieldMap()

	return _aspNetRoleClaim
}

type aspNetRoleClaim struct {
	aspNetRoleClaimDo

	ALL        field.Asterisk
	ID         field.Int32
	RoleID     field.String
	ClaimType  field.String
	ClaimValue field.String

	fieldMap map[string]field.Expr
}

func (a aspNetRoleClaim) Table(newTableName string) *aspNetRoleClaim {
	a.aspNetRoleClaimDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aspNetRoleClaim) As(alias string) *aspNetRoleClaim {
	a.aspNetRoleClaimDo.DO = *(a.aspNetRoleClaimDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aspNetRoleClaim) updateTableName(table string) *aspNetRoleClaim {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "Id")
	a.RoleID = field.NewString(table, "RoleId")
	a.ClaimType = field.NewString(table, "ClaimType")
	a.ClaimValue = field.NewString(table, "ClaimValue")

	a.fillFieldMap()

	return a
}

func (a *aspNetRoleClaim) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aspNetRoleClaim) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["RoleId"] = a.RoleID
	a.fieldMap["ClaimType"] = a.ClaimType
	a.fieldMap["ClaimValue"] = a.ClaimValue
}

func (a aspNetRoleClaim) clone(db *gorm.DB) aspNetRoleClaim {
	a.aspNetRoleClaimDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aspNetRoleClaim) replaceDB(db *gorm.DB) aspNetRoleClaim {
	a.aspNetRoleClaimDo.ReplaceDB(db)
	return a
}

type aspNetRoleClaimDo struct{ gen.DO }

type IAspNetRoleClaimDo interface {
	gen.SubQuery
	Debug() IAspNetRoleClaimDo
	WithContext(ctx context.Context) IAspNetRoleClaimDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAspNetRoleClaimDo
	WriteDB() IAspNetRoleClaimDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAspNetRoleClaimDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAspNetRoleClaimDo
	Not(conds ...gen.Condition) IAspNetRoleClaimDo
	Or(conds ...gen.Condition) IAspNetRoleClaimDo
	Select(conds ...field.Expr) IAspNetRoleClaimDo
	Where(conds ...gen.Condition) IAspNetRoleClaimDo
	Order(conds ...field.Expr) IAspNetRoleClaimDo
	Distinct(cols ...field.Expr) IAspNetRoleClaimDo
	Omit(cols ...field.Expr) IAspNetRoleClaimDo
	Join(table schema.Tabler, on ...field.Expr) IAspNetRoleClaimDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleClaimDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleClaimDo
	Group(cols ...field.Expr) IAspNetRoleClaimDo
	Having(conds ...gen.Condition) IAspNetRoleClaimDo
	Limit(limit int) IAspNetRoleClaimDo
	Offset(offset int) IAspNetRoleClaimDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetRoleClaimDo
	Unscoped() IAspNetRoleClaimDo
	Create(values ...*model.AspNetRoleClaim) error
	CreateInBatches(values []*model.AspNetRoleClaim, batchSize int) error
	Save(values ...*model.AspNetRoleClaim) error
	First() (*model.AspNetRoleClaim, error)
	Take() (*model.AspNetRoleClaim, error)
	Last() (*model.AspNetRoleClaim, error)
	Find() ([]*model.AspNetRoleClaim, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetRoleClaim, err error)
	FindInBatches(result *[]*model.AspNetRoleClaim, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AspNetRoleClaim) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAspNetRoleClaimDo
	Assign(attrs ...field.AssignExpr) IAspNetRoleClaimDo
	Joins(fields ...field.RelationField) IAspNetRoleClaimDo
	Preload(fields ...field.RelationField) IAspNetRoleClaimDo
	FirstOrInit() (*model.AspNetRoleClaim, error)
	FirstOrCreate() (*model.AspNetRoleClaim, error)
	FindByPage(offset int, limit int) (result []*model.AspNetRoleClaim, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAspNetRoleClaimDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aspNetRoleClaimDo) Debug() IAspNetRoleClaimDo {
	return a.withDO(a.DO.Debug())
}

func (a aspNetRoleClaimDo) WithContext(ctx context.Context) IAspNetRoleClaimDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aspNetRoleClaimDo) ReadDB() IAspNetRoleClaimDo {
	return a.Clauses(dbresolver.Read)
}

func (a aspNetRoleClaimDo) WriteDB() IAspNetRoleClaimDo {
	return a.Clauses(dbresolver.Write)
}

func (a aspNetRoleClaimDo) Session(config *gorm.Session) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Session(config))
}

func (a aspNetRoleClaimDo) Clauses(conds ...clause.Expression) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aspNetRoleClaimDo) Returning(value interface{}, columns ...string) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aspNetRoleClaimDo) Not(conds ...gen.Condition) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aspNetRoleClaimDo) Or(conds ...gen.Condition) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aspNetRoleClaimDo) Select(conds ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aspNetRoleClaimDo) Where(conds ...gen.Condition) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aspNetRoleClaimDo) Order(conds ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aspNetRoleClaimDo) Distinct(cols ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aspNetRoleClaimDo) Omit(cols ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aspNetRoleClaimDo) Join(table schema.Tabler, on ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aspNetRoleClaimDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aspNetRoleClaimDo) RightJoin(table schema.Tabler, on ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aspNetRoleClaimDo) Group(cols ...field.Expr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aspNetRoleClaimDo) Having(conds ...gen.Condition) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aspNetRoleClaimDo) Limit(limit int) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aspNetRoleClaimDo) Offset(offset int) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aspNetRoleClaimDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aspNetRoleClaimDo) Unscoped() IAspNetRoleClaimDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aspNetRoleClaimDo) Create(values ...*model.AspNetRoleClaim) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aspNetRoleClaimDo) CreateInBatches(values []*model.AspNetRoleClaim, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aspNetRoleClaimDo) Save(values ...*model.AspNetRoleClaim) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aspNetRoleClaimDo) First() (*model.AspNetRoleClaim, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRoleClaim), nil
	}
}

func (a aspNetRoleClaimDo) Take() (*model.AspNetRoleClaim, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRoleClaim), nil
	}
}

func (a aspNetRoleClaimDo) Last() (*model.AspNetRoleClaim, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRoleClaim), nil
	}
}

func (a aspNetRoleClaimDo) Find() ([]*model.AspNetRoleClaim, error) {
	result, err := a.DO.Find()
	return result.([]*model.AspNetRoleClaim), err
}

func (a aspNetRoleClaimDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AspNetRoleClaim, err error) {
	buf := make([]*model.AspNetRoleClaim, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aspNetRoleClaimDo) FindInBatches(result *[]*model.AspNetRoleClaim, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aspNetRoleClaimDo) Attrs(attrs ...field.AssignExpr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aspNetRoleClaimDo) Assign(attrs ...field.AssignExpr) IAspNetRoleClaimDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aspNetRoleClaimDo) Joins(fields ...field.RelationField) IAspNetRoleClaimDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aspNetRoleClaimDo) Preload(fields ...field.RelationField) IAspNetRoleClaimDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aspNetRoleClaimDo) FirstOrInit() (*model.AspNetRoleClaim, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRoleClaim), nil
	}
}

func (a aspNetRoleClaimDo) FirstOrCreate() (*model.AspNetRoleClaim, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AspNetRoleClaim), nil
	}
}

func (a aspNetRoleClaimDo) FindByPage(offset int, limit int) (result []*model.AspNetRoleClaim, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aspNetRoleClaimDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aspNetRoleClaimDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aspNetRoleClaimDo) Delete(models ...*model.AspNetRoleClaim) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aspNetRoleClaimDo) withDO(do gen.Dao) *aspNetRoleClaimDo {
	a.DO = *do.(*gen.DO)
	return a
}
